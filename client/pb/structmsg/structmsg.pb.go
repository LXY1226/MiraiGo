// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/pb/structmsg/structmsg.proto

package structmsg

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddFrdSNInfo struct {
	NotSeeDynamic int32 `protobuf:"varint,1,opt,name=notSeeDynamic,proto3" json:"notSeeDynamic,omitempty"`
	SetSn         int32 `protobuf:"varint,2,opt,name=setSn,proto3" json:"setSn,omitempty"`
}

func (m *AddFrdSNInfo) Reset()         { *m = AddFrdSNInfo{} }
func (m *AddFrdSNInfo) String() string { return proto.CompactTextString(m) }
func (*AddFrdSNInfo) ProtoMessage()    {}
func (*AddFrdSNInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{0}
}
func (m *AddFrdSNInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFrdSNInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFrdSNInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFrdSNInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFrdSNInfo.Merge(m, src)
}
func (m *AddFrdSNInfo) XXX_Size() int {
	return m.Size()
}
func (m *AddFrdSNInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFrdSNInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AddFrdSNInfo proto.InternalMessageInfo

func (m *AddFrdSNInfo) GetNotSeeDynamic() int32 {
	if m != nil {
		return m.NotSeeDynamic
	}
	return 0
}

func (m *AddFrdSNInfo) GetSetSn() int32 {
	if m != nil {
		return m.SetSn
	}
	return 0
}

type FlagInfo struct {
	GrpMsgKickAdmin                   int32 `protobuf:"varint,1,opt,name=grpMsgKickAdmin,proto3" json:"grpMsgKickAdmin,omitempty"`
	GrpMsgHiddenGrp                   int32 `protobuf:"varint,2,opt,name=grpMsgHiddenGrp,proto3" json:"grpMsgHiddenGrp,omitempty"`
	GrpMsgWordingDown                 int32 `protobuf:"varint,3,opt,name=grpMsgWordingDown,proto3" json:"grpMsgWordingDown,omitempty"`
	FrdMsgGetBusiCard                 int32 `protobuf:"varint,4,opt,name=frdMsgGetBusiCard,proto3" json:"frdMsgGetBusiCard,omitempty"`
	GrpMsgGetOfficialAccount          int32 `protobuf:"varint,5,opt,name=grpMsgGetOfficialAccount,proto3" json:"grpMsgGetOfficialAccount,omitempty"`
	GrpMsgGetPayInGroup               int32 `protobuf:"varint,6,opt,name=grpMsgGetPayInGroup,proto3" json:"grpMsgGetPayInGroup,omitempty"`
	FrdMsgDiscuss2ManyChat            int32 `protobuf:"varint,7,opt,name=frdMsgDiscuss2ManyChat,proto3" json:"frdMsgDiscuss2ManyChat,omitempty"`
	GrpMsgNotAllowJoinGrpInviteNotFrd int32 `protobuf:"varint,8,opt,name=grpMsgNotAllowJoinGrpInviteNotFrd,proto3" json:"grpMsgNotAllowJoinGrpInviteNotFrd,omitempty"`
	FrdMsgNeedWaitingMsg              int32 `protobuf:"varint,9,opt,name=frdMsgNeedWaitingMsg,proto3" json:"frdMsgNeedWaitingMsg,omitempty"`
	FrdMsgUint32NeedAllUnreadMsg      int32 `protobuf:"varint,10,opt,name=frdMsgUint32NeedAllUnreadMsg,proto3" json:"frdMsgUint32NeedAllUnreadMsg,omitempty"`
	GrpMsgNeedAutoAdminWording        int32 `protobuf:"varint,11,opt,name=grpMsgNeedAutoAdminWording,proto3" json:"grpMsgNeedAutoAdminWording,omitempty"`
	GrpMsgGetTransferGroupMsgFlag     int32 `protobuf:"varint,12,opt,name=grpMsgGetTransferGroupMsgFlag,proto3" json:"grpMsgGetTransferGroupMsgFlag,omitempty"`
	GrpMsgGetQuitPayGroupMsgFlag      int32 `protobuf:"varint,13,opt,name=grpMsgGetQuitPayGroupMsgFlag,proto3" json:"grpMsgGetQuitPayGroupMsgFlag,omitempty"`
	GrpMsgSupportInviteAutoJoin       int32 `protobuf:"varint,14,opt,name=grpMsgSupportInviteAutoJoin,proto3" json:"grpMsgSupportInviteAutoJoin,omitempty"`
	GrpMsgMaskInviteAutoJoin          int32 `protobuf:"varint,15,opt,name=grpMsgMaskInviteAutoJoin,proto3" json:"grpMsgMaskInviteAutoJoin,omitempty"`
	GrpMsgGetDisbandedByAdmin         int32 `protobuf:"varint,16,opt,name=grpMsgGetDisbandedByAdmin,proto3" json:"grpMsgGetDisbandedByAdmin,omitempty"`
	GrpMsgGetC2CInviteJoinGroup       int32 `protobuf:"varint,17,opt,name=grpMsgGetC2cInviteJoinGroup,proto3" json:"grpMsgGetC2cInviteJoinGroup,omitempty"`
}

func (m *FlagInfo) Reset()         { *m = FlagInfo{} }
func (m *FlagInfo) String() string { return proto.CompactTextString(m) }
func (*FlagInfo) ProtoMessage()    {}
func (*FlagInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{1}
}
func (m *FlagInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlagInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlagInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlagInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlagInfo.Merge(m, src)
}
func (m *FlagInfo) XXX_Size() int {
	return m.Size()
}
func (m *FlagInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FlagInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FlagInfo proto.InternalMessageInfo

func (m *FlagInfo) GetGrpMsgKickAdmin() int32 {
	if m != nil {
		return m.GrpMsgKickAdmin
	}
	return 0
}

func (m *FlagInfo) GetGrpMsgHiddenGrp() int32 {
	if m != nil {
		return m.GrpMsgHiddenGrp
	}
	return 0
}

func (m *FlagInfo) GetGrpMsgWordingDown() int32 {
	if m != nil {
		return m.GrpMsgWordingDown
	}
	return 0
}

func (m *FlagInfo) GetFrdMsgGetBusiCard() int32 {
	if m != nil {
		return m.FrdMsgGetBusiCard
	}
	return 0
}

func (m *FlagInfo) GetGrpMsgGetOfficialAccount() int32 {
	if m != nil {
		return m.GrpMsgGetOfficialAccount
	}
	return 0
}

func (m *FlagInfo) GetGrpMsgGetPayInGroup() int32 {
	if m != nil {
		return m.GrpMsgGetPayInGroup
	}
	return 0
}

func (m *FlagInfo) GetFrdMsgDiscuss2ManyChat() int32 {
	if m != nil {
		return m.FrdMsgDiscuss2ManyChat
	}
	return 0
}

func (m *FlagInfo) GetGrpMsgNotAllowJoinGrpInviteNotFrd() int32 {
	if m != nil {
		return m.GrpMsgNotAllowJoinGrpInviteNotFrd
	}
	return 0
}

func (m *FlagInfo) GetFrdMsgNeedWaitingMsg() int32 {
	if m != nil {
		return m.FrdMsgNeedWaitingMsg
	}
	return 0
}

func (m *FlagInfo) GetFrdMsgUint32NeedAllUnreadMsg() int32 {
	if m != nil {
		return m.FrdMsgUint32NeedAllUnreadMsg
	}
	return 0
}

func (m *FlagInfo) GetGrpMsgNeedAutoAdminWording() int32 {
	if m != nil {
		return m.GrpMsgNeedAutoAdminWording
	}
	return 0
}

func (m *FlagInfo) GetGrpMsgGetTransferGroupMsgFlag() int32 {
	if m != nil {
		return m.GrpMsgGetTransferGroupMsgFlag
	}
	return 0
}

func (m *FlagInfo) GetGrpMsgGetQuitPayGroupMsgFlag() int32 {
	if m != nil {
		return m.GrpMsgGetQuitPayGroupMsgFlag
	}
	return 0
}

func (m *FlagInfo) GetGrpMsgSupportInviteAutoJoin() int32 {
	if m != nil {
		return m.GrpMsgSupportInviteAutoJoin
	}
	return 0
}

func (m *FlagInfo) GetGrpMsgMaskInviteAutoJoin() int32 {
	if m != nil {
		return m.GrpMsgMaskInviteAutoJoin
	}
	return 0
}

func (m *FlagInfo) GetGrpMsgGetDisbandedByAdmin() int32 {
	if m != nil {
		return m.GrpMsgGetDisbandedByAdmin
	}
	return 0
}

func (m *FlagInfo) GetGrpMsgGetC2CInviteJoinGroup() int32 {
	if m != nil {
		return m.GrpMsgGetC2CInviteJoinGroup
	}
	return 0
}

type FriendInfo struct {
	MsgJointFriend string `protobuf:"bytes,1,opt,name=msgJointFriend,proto3" json:"msgJointFriend,omitempty"`
	MsgBlacklist   string `protobuf:"bytes,2,opt,name=msgBlacklist,proto3" json:"msgBlacklist,omitempty"`
}

func (m *FriendInfo) Reset()         { *m = FriendInfo{} }
func (m *FriendInfo) String() string { return proto.CompactTextString(m) }
func (*FriendInfo) ProtoMessage()    {}
func (*FriendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{2}
}
func (m *FriendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendInfo.Merge(m, src)
}
func (m *FriendInfo) XXX_Size() int {
	return m.Size()
}
func (m *FriendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FriendInfo proto.InternalMessageInfo

func (m *FriendInfo) GetMsgJointFriend() string {
	if m != nil {
		return m.MsgJointFriend
	}
	return ""
}

func (m *FriendInfo) GetMsgBlacklist() string {
	if m != nil {
		return m.MsgBlacklist
	}
	return ""
}

type SGroupInfo struct {
	GroupAuthType     int32  `protobuf:"varint,1,opt,name=groupAuthType,proto3" json:"groupAuthType,omitempty"`
	DisplayAction     int32  `protobuf:"varint,2,opt,name=displayAction,proto3" json:"displayAction,omitempty"`
	MsgAlert          string `protobuf:"bytes,3,opt,name=msgAlert,proto3" json:"msgAlert,omitempty"`
	MsgDetailAlert    string `protobuf:"bytes,4,opt,name=msgDetailAlert,proto3" json:"msgDetailAlert,omitempty"`
	MsgOtherAdminDone string `protobuf:"bytes,5,opt,name=msgOtherAdminDone,proto3" json:"msgOtherAdminDone,omitempty"`
	AppPrivilegeFlag  int32  `protobuf:"varint,6,opt,name=appPrivilegeFlag,proto3" json:"appPrivilegeFlag,omitempty"`
}

func (m *SGroupInfo) Reset()         { *m = SGroupInfo{} }
func (m *SGroupInfo) String() string { return proto.CompactTextString(m) }
func (*SGroupInfo) ProtoMessage()    {}
func (*SGroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{3}
}
func (m *SGroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SGroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SGroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SGroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SGroupInfo.Merge(m, src)
}
func (m *SGroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *SGroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SGroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SGroupInfo proto.InternalMessageInfo

func (m *SGroupInfo) GetGroupAuthType() int32 {
	if m != nil {
		return m.GroupAuthType
	}
	return 0
}

func (m *SGroupInfo) GetDisplayAction() int32 {
	if m != nil {
		return m.DisplayAction
	}
	return 0
}

func (m *SGroupInfo) GetMsgAlert() string {
	if m != nil {
		return m.MsgAlert
	}
	return ""
}

func (m *SGroupInfo) GetMsgDetailAlert() string {
	if m != nil {
		return m.MsgDetailAlert
	}
	return ""
}

func (m *SGroupInfo) GetMsgOtherAdminDone() string {
	if m != nil {
		return m.MsgOtherAdminDone
	}
	return ""
}

func (m *SGroupInfo) GetAppPrivilegeFlag() int32 {
	if m != nil {
		return m.AppPrivilegeFlag
	}
	return 0
}

type MsgInviteExt struct {
	SrcType   int32 `protobuf:"varint,1,opt,name=srcType,proto3" json:"srcType,omitempty"`
	SrcCode   int64 `protobuf:"varint,2,opt,name=srcCode,proto3" json:"srcCode,omitempty"`
	WaitState int32 `protobuf:"varint,3,opt,name=waitState,proto3" json:"waitState,omitempty"`
}

func (m *MsgInviteExt) Reset()         { *m = MsgInviteExt{} }
func (m *MsgInviteExt) String() string { return proto.CompactTextString(m) }
func (*MsgInviteExt) ProtoMessage()    {}
func (*MsgInviteExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{4}
}
func (m *MsgInviteExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInviteExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInviteExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInviteExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInviteExt.Merge(m, src)
}
func (m *MsgInviteExt) XXX_Size() int {
	return m.Size()
}
func (m *MsgInviteExt) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInviteExt.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInviteExt proto.InternalMessageInfo

func (m *MsgInviteExt) GetSrcType() int32 {
	if m != nil {
		return m.SrcType
	}
	return 0
}

func (m *MsgInviteExt) GetSrcCode() int64 {
	if m != nil {
		return m.SrcCode
	}
	return 0
}

func (m *MsgInviteExt) GetWaitState() int32 {
	if m != nil {
		return m.WaitState
	}
	return 0
}

type MsgPayGroupExt struct {
	JoinGrpTime int64 `protobuf:"varint,1,opt,name=joinGrpTime,proto3" json:"joinGrpTime,omitempty"`
	QuitGrpTime int64 `protobuf:"varint,2,opt,name=quitGrpTime,proto3" json:"quitGrpTime,omitempty"`
}

func (m *MsgPayGroupExt) Reset()         { *m = MsgPayGroupExt{} }
func (m *MsgPayGroupExt) String() string { return proto.CompactTextString(m) }
func (*MsgPayGroupExt) ProtoMessage()    {}
func (*MsgPayGroupExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{5}
}
func (m *MsgPayGroupExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPayGroupExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayGroupExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPayGroupExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayGroupExt.Merge(m, src)
}
func (m *MsgPayGroupExt) XXX_Size() int {
	return m.Size()
}
func (m *MsgPayGroupExt) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayGroupExt.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayGroupExt proto.InternalMessageInfo

func (m *MsgPayGroupExt) GetJoinGrpTime() int64 {
	if m != nil {
		return m.JoinGrpTime
	}
	return 0
}

func (m *MsgPayGroupExt) GetQuitGrpTime() int64 {
	if m != nil {
		return m.QuitGrpTime
	}
	return 0
}

type ReqNextSystemMsg struct {
	MsgNum             int32     `protobuf:"varint,1,opt,name=msgNum,proto3" json:"msgNum,omitempty"`
	FollowingFriendSeq int64     `protobuf:"varint,2,opt,name=followingFriendSeq,proto3" json:"followingFriendSeq,omitempty"`
	FollowingGroupSeq  int64     `protobuf:"varint,3,opt,name=followingGroupSeq,proto3" json:"followingGroupSeq,omitempty"`
	Checktype          int32     `protobuf:"varint,4,opt,name=checktype,proto3" json:"checktype,omitempty"`
	Flag               *FlagInfo `protobuf:"bytes,5,opt,name=flag,proto3" json:"flag,omitempty"`
	Language           int32     `protobuf:"varint,6,opt,name=language,proto3" json:"language,omitempty"`
	Version            int32     `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	FriendMsgTypeFlag  int64     `protobuf:"varint,8,opt,name=friendMsgTypeFlag,proto3" json:"friendMsgTypeFlag,omitempty"`
}

func (m *ReqNextSystemMsg) Reset()         { *m = ReqNextSystemMsg{} }
func (m *ReqNextSystemMsg) String() string { return proto.CompactTextString(m) }
func (*ReqNextSystemMsg) ProtoMessage()    {}
func (*ReqNextSystemMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{6}
}
func (m *ReqNextSystemMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqNextSystemMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqNextSystemMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqNextSystemMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqNextSystemMsg.Merge(m, src)
}
func (m *ReqNextSystemMsg) XXX_Size() int {
	return m.Size()
}
func (m *ReqNextSystemMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqNextSystemMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ReqNextSystemMsg proto.InternalMessageInfo

func (m *ReqNextSystemMsg) GetMsgNum() int32 {
	if m != nil {
		return m.MsgNum
	}
	return 0
}

func (m *ReqNextSystemMsg) GetFollowingFriendSeq() int64 {
	if m != nil {
		return m.FollowingFriendSeq
	}
	return 0
}

func (m *ReqNextSystemMsg) GetFollowingGroupSeq() int64 {
	if m != nil {
		return m.FollowingGroupSeq
	}
	return 0
}

func (m *ReqNextSystemMsg) GetChecktype() int32 {
	if m != nil {
		return m.Checktype
	}
	return 0
}

func (m *ReqNextSystemMsg) GetFlag() *FlagInfo {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *ReqNextSystemMsg) GetLanguage() int32 {
	if m != nil {
		return m.Language
	}
	return 0
}

func (m *ReqNextSystemMsg) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ReqNextSystemMsg) GetFriendMsgTypeFlag() int64 {
	if m != nil {
		return m.FriendMsgTypeFlag
	}
	return 0
}

type ReqSystemMsg struct {
	MsgNum          int32 `protobuf:"varint,1,opt,name=msgNum,proto3" json:"msgNum,omitempty"`
	LatestFriendSeq int64 `protobuf:"varint,2,opt,name=latestFriendSeq,proto3" json:"latestFriendSeq,omitempty"`
	LatestGroupSeq  int64 `protobuf:"varint,3,opt,name=latestGroupSeq,proto3" json:"latestGroupSeq,omitempty"`
	Version         int32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Language        int32 `protobuf:"varint,5,opt,name=language,proto3" json:"language,omitempty"`
}

func (m *ReqSystemMsg) Reset()         { *m = ReqSystemMsg{} }
func (m *ReqSystemMsg) String() string { return proto.CompactTextString(m) }
func (*ReqSystemMsg) ProtoMessage()    {}
func (*ReqSystemMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{7}
}
func (m *ReqSystemMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSystemMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSystemMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSystemMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSystemMsg.Merge(m, src)
}
func (m *ReqSystemMsg) XXX_Size() int {
	return m.Size()
}
func (m *ReqSystemMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSystemMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSystemMsg proto.InternalMessageInfo

func (m *ReqSystemMsg) GetMsgNum() int32 {
	if m != nil {
		return m.MsgNum
	}
	return 0
}

func (m *ReqSystemMsg) GetLatestFriendSeq() int64 {
	if m != nil {
		return m.LatestFriendSeq
	}
	return 0
}

func (m *ReqSystemMsg) GetLatestGroupSeq() int64 {
	if m != nil {
		return m.LatestGroupSeq
	}
	return 0
}

func (m *ReqSystemMsg) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ReqSystemMsg) GetLanguage() int32 {
	if m != nil {
		return m.Language
	}
	return 0
}

type ReqSystemMsgAction struct {
	MsgType      int32                `protobuf:"varint,1,opt,name=msgType,proto3" json:"msgType,omitempty"`
	MsgSeq       int64                `protobuf:"varint,2,opt,name=msgSeq,proto3" json:"msgSeq,omitempty"`
	ReqUin       int64                `protobuf:"varint,3,opt,name=reqUin,proto3" json:"reqUin,omitempty"`
	SubType      int32                `protobuf:"varint,4,opt,name=subType,proto3" json:"subType,omitempty"`
	SrcId        int32                `protobuf:"varint,5,opt,name=srcId,proto3" json:"srcId,omitempty"`
	SubSrcId     int32                `protobuf:"varint,6,opt,name=subSrcId,proto3" json:"subSrcId,omitempty"`
	GroupMsgType int32                `protobuf:"varint,7,opt,name=groupMsgType,proto3" json:"groupMsgType,omitempty"`
	ActionInfo   *SystemMsgActionInfo `protobuf:"bytes,8,opt,name=actionInfo,proto3" json:"actionInfo,omitempty"`
	Language     int32                `protobuf:"varint,9,opt,name=language,proto3" json:"language,omitempty"`
}

func (m *ReqSystemMsgAction) Reset()         { *m = ReqSystemMsgAction{} }
func (m *ReqSystemMsgAction) String() string { return proto.CompactTextString(m) }
func (*ReqSystemMsgAction) ProtoMessage()    {}
func (*ReqSystemMsgAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{8}
}
func (m *ReqSystemMsgAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSystemMsgAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSystemMsgAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSystemMsgAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSystemMsgAction.Merge(m, src)
}
func (m *ReqSystemMsgAction) XXX_Size() int {
	return m.Size()
}
func (m *ReqSystemMsgAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSystemMsgAction.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSystemMsgAction proto.InternalMessageInfo

func (m *ReqSystemMsgAction) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *ReqSystemMsgAction) GetMsgSeq() int64 {
	if m != nil {
		return m.MsgSeq
	}
	return 0
}

func (m *ReqSystemMsgAction) GetReqUin() int64 {
	if m != nil {
		return m.ReqUin
	}
	return 0
}

func (m *ReqSystemMsgAction) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *ReqSystemMsgAction) GetSrcId() int32 {
	if m != nil {
		return m.SrcId
	}
	return 0
}

func (m *ReqSystemMsgAction) GetSubSrcId() int32 {
	if m != nil {
		return m.SubSrcId
	}
	return 0
}

func (m *ReqSystemMsgAction) GetGroupMsgType() int32 {
	if m != nil {
		return m.GroupMsgType
	}
	return 0
}

func (m *ReqSystemMsgAction) GetActionInfo() *SystemMsgActionInfo {
	if m != nil {
		return m.ActionInfo
	}
	return nil
}

func (m *ReqSystemMsgAction) GetLanguage() int32 {
	if m != nil {
		return m.Language
	}
	return 0
}

type ReqSystemMsgNew struct {
	MsgNum            int32     `protobuf:"varint,1,opt,name=msgNum,proto3" json:"msgNum,omitempty"`
	LatestFriendSeq   int64     `protobuf:"varint,2,opt,name=latestFriendSeq,proto3" json:"latestFriendSeq,omitempty"`
	LatestGroupSeq    int64     `protobuf:"varint,3,opt,name=latestGroupSeq,proto3" json:"latestGroupSeq,omitempty"`
	Version           int32     `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Checktype         int32     `protobuf:"varint,5,opt,name=checktype,proto3" json:"checktype,omitempty"`
	Flag              *FlagInfo `protobuf:"bytes,6,opt,name=flag,proto3" json:"flag,omitempty"`
	Language          int32     `protobuf:"varint,7,opt,name=language,proto3" json:"language,omitempty"`
	IsGetFrdRibbon    bool      `protobuf:"varint,8,opt,name=isGetFrdRibbon,proto3" json:"isGetFrdRibbon,omitempty"`
	IsGetGrpRibbon    bool      `protobuf:"varint,9,opt,name=isGetGrpRibbon,proto3" json:"isGetGrpRibbon,omitempty"`
	FriendMsgTypeFlag int64     `protobuf:"varint,10,opt,name=friendMsgTypeFlag,proto3" json:"friendMsgTypeFlag,omitempty"`
}

func (m *ReqSystemMsgNew) Reset()         { *m = ReqSystemMsgNew{} }
func (m *ReqSystemMsgNew) String() string { return proto.CompactTextString(m) }
func (*ReqSystemMsgNew) ProtoMessage()    {}
func (*ReqSystemMsgNew) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{9}
}
func (m *ReqSystemMsgNew) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSystemMsgNew) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSystemMsgNew.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSystemMsgNew) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSystemMsgNew.Merge(m, src)
}
func (m *ReqSystemMsgNew) XXX_Size() int {
	return m.Size()
}
func (m *ReqSystemMsgNew) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSystemMsgNew.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSystemMsgNew proto.InternalMessageInfo

func (m *ReqSystemMsgNew) GetMsgNum() int32 {
	if m != nil {
		return m.MsgNum
	}
	return 0
}

func (m *ReqSystemMsgNew) GetLatestFriendSeq() int64 {
	if m != nil {
		return m.LatestFriendSeq
	}
	return 0
}

func (m *ReqSystemMsgNew) GetLatestGroupSeq() int64 {
	if m != nil {
		return m.LatestGroupSeq
	}
	return 0
}

func (m *ReqSystemMsgNew) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ReqSystemMsgNew) GetChecktype() int32 {
	if m != nil {
		return m.Checktype
	}
	return 0
}

func (m *ReqSystemMsgNew) GetFlag() *FlagInfo {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *ReqSystemMsgNew) GetLanguage() int32 {
	if m != nil {
		return m.Language
	}
	return 0
}

func (m *ReqSystemMsgNew) GetIsGetFrdRibbon() bool {
	if m != nil {
		return m.IsGetFrdRibbon
	}
	return false
}

func (m *ReqSystemMsgNew) GetIsGetGrpRibbon() bool {
	if m != nil {
		return m.IsGetGrpRibbon
	}
	return false
}

func (m *ReqSystemMsgNew) GetFriendMsgTypeFlag() int64 {
	if m != nil {
		return m.FriendMsgTypeFlag
	}
	return 0
}

type ReqSystemMsgRead struct {
	LatestFriendSeq int64 `protobuf:"varint,1,opt,name=latestFriendSeq,proto3" json:"latestFriendSeq,omitempty"`
	LatestGroupSeq  int64 `protobuf:"varint,2,opt,name=latestGroupSeq,proto3" json:"latestGroupSeq,omitempty"`
	Type            int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Checktype       int32 `protobuf:"varint,4,opt,name=checktype,proto3" json:"checktype,omitempty"`
}

func (m *ReqSystemMsgRead) Reset()         { *m = ReqSystemMsgRead{} }
func (m *ReqSystemMsgRead) String() string { return proto.CompactTextString(m) }
func (*ReqSystemMsgRead) ProtoMessage()    {}
func (*ReqSystemMsgRead) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{10}
}
func (m *ReqSystemMsgRead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqSystemMsgRead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqSystemMsgRead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqSystemMsgRead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSystemMsgRead.Merge(m, src)
}
func (m *ReqSystemMsgRead) XXX_Size() int {
	return m.Size()
}
func (m *ReqSystemMsgRead) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSystemMsgRead.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSystemMsgRead proto.InternalMessageInfo

func (m *ReqSystemMsgRead) GetLatestFriendSeq() int64 {
	if m != nil {
		return m.LatestFriendSeq
	}
	return 0
}

func (m *ReqSystemMsgRead) GetLatestGroupSeq() int64 {
	if m != nil {
		return m.LatestGroupSeq
	}
	return 0
}

func (m *ReqSystemMsgRead) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqSystemMsgRead) GetChecktype() int32 {
	if m != nil {
		return m.Checktype
	}
	return 0
}

type RspHead struct {
	Result  int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	MsgFail string `protobuf:"bytes,2,opt,name=msgFail,proto3" json:"msgFail,omitempty"`
}

func (m *RspHead) Reset()         { *m = RspHead{} }
func (m *RspHead) String() string { return proto.CompactTextString(m) }
func (*RspHead) ProtoMessage()    {}
func (*RspHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{11}
}
func (m *RspHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RspHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RspHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RspHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspHead.Merge(m, src)
}
func (m *RspHead) XXX_Size() int {
	return m.Size()
}
func (m *RspHead) XXX_DiscardUnknown() {
	xxx_messageInfo_RspHead.DiscardUnknown(m)
}

var xxx_messageInfo_RspHead proto.InternalMessageInfo

func (m *RspHead) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *RspHead) GetMsgFail() string {
	if m != nil {
		return m.MsgFail
	}
	return ""
}

type RspNextSystemMsg struct {
	Head               *RspHead     `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Msgs               []*StructMsg `protobuf:"bytes,2,rep,name=msgs,proto3" json:"msgs,omitempty"`
	FollowingFriendSeq int64        `protobuf:"varint,3,opt,name=followingFriendSeq,proto3" json:"followingFriendSeq,omitempty"`
	FollowingGroupSeq  int64        `protobuf:"varint,4,opt,name=followingGroupSeq,proto3" json:"followingGroupSeq,omitempty"`
	Checktype          int32        `protobuf:"varint,5,opt,name=checktype,proto3" json:"checktype,omitempty"`
	GameNick           string       `protobuf:"bytes,100,opt,name=gameNick,proto3" json:"gameNick,omitempty"`
	UndecidForQim      []byte       `protobuf:"bytes,101,opt,name=undecidForQim,proto3" json:"undecidForQim,omitempty"`
	UnReadCount3       int32        `protobuf:"varint,102,opt,name=unReadCount3,proto3" json:"unReadCount3,omitempty"`
}

func (m *RspNextSystemMsg) Reset()         { *m = RspNextSystemMsg{} }
func (m *RspNextSystemMsg) String() string { return proto.CompactTextString(m) }
func (*RspNextSystemMsg) ProtoMessage()    {}
func (*RspNextSystemMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{12}
}
func (m *RspNextSystemMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RspNextSystemMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RspNextSystemMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RspNextSystemMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspNextSystemMsg.Merge(m, src)
}
func (m *RspNextSystemMsg) XXX_Size() int {
	return m.Size()
}
func (m *RspNextSystemMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RspNextSystemMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RspNextSystemMsg proto.InternalMessageInfo

func (m *RspNextSystemMsg) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *RspNextSystemMsg) GetMsgs() []*StructMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *RspNextSystemMsg) GetFollowingFriendSeq() int64 {
	if m != nil {
		return m.FollowingFriendSeq
	}
	return 0
}

func (m *RspNextSystemMsg) GetFollowingGroupSeq() int64 {
	if m != nil {
		return m.FollowingGroupSeq
	}
	return 0
}

func (m *RspNextSystemMsg) GetChecktype() int32 {
	if m != nil {
		return m.Checktype
	}
	return 0
}

func (m *RspNextSystemMsg) GetGameNick() string {
	if m != nil {
		return m.GameNick
	}
	return ""
}

func (m *RspNextSystemMsg) GetUndecidForQim() []byte {
	if m != nil {
		return m.UndecidForQim
	}
	return nil
}

func (m *RspNextSystemMsg) GetUnReadCount3() int32 {
	if m != nil {
		return m.UnReadCount3
	}
	return 0
}

type RspSystemMsg struct {
	Head               *RspHead     `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Msgs               []*StructMsg `protobuf:"bytes,2,rep,name=msgs,proto3" json:"msgs,omitempty"`
	UnreadCount        int32        `protobuf:"varint,3,opt,name=unreadCount,proto3" json:"unreadCount,omitempty"`
	LatestFriendSeq    int64        `protobuf:"varint,4,opt,name=latestFriendSeq,proto3" json:"latestFriendSeq,omitempty"`
	LatestGroupSeq     int64        `protobuf:"varint,5,opt,name=latestGroupSeq,proto3" json:"latestGroupSeq,omitempty"`
	FollowingFriendSeq int64        `protobuf:"varint,6,opt,name=followingFriendSeq,proto3" json:"followingFriendSeq,omitempty"`
	FollowingGroupSeq  int64        `protobuf:"varint,7,opt,name=followingGroupSeq,proto3" json:"followingGroupSeq,omitempty"`
	MsgDisplay         string       `protobuf:"bytes,8,opt,name=msgDisplay,proto3" json:"msgDisplay,omitempty"`
}

func (m *RspSystemMsg) Reset()         { *m = RspSystemMsg{} }
func (m *RspSystemMsg) String() string { return proto.CompactTextString(m) }
func (*RspSystemMsg) ProtoMessage()    {}
func (*RspSystemMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{13}
}
func (m *RspSystemMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RspSystemMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RspSystemMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RspSystemMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspSystemMsg.Merge(m, src)
}
func (m *RspSystemMsg) XXX_Size() int {
	return m.Size()
}
func (m *RspSystemMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RspSystemMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RspSystemMsg proto.InternalMessageInfo

func (m *RspSystemMsg) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *RspSystemMsg) GetMsgs() []*StructMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *RspSystemMsg) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *RspSystemMsg) GetLatestFriendSeq() int64 {
	if m != nil {
		return m.LatestFriendSeq
	}
	return 0
}

func (m *RspSystemMsg) GetLatestGroupSeq() int64 {
	if m != nil {
		return m.LatestGroupSeq
	}
	return 0
}

func (m *RspSystemMsg) GetFollowingFriendSeq() int64 {
	if m != nil {
		return m.FollowingFriendSeq
	}
	return 0
}

func (m *RspSystemMsg) GetFollowingGroupSeq() int64 {
	if m != nil {
		return m.FollowingGroupSeq
	}
	return 0
}

func (m *RspSystemMsg) GetMsgDisplay() string {
	if m != nil {
		return m.MsgDisplay
	}
	return ""
}

type RspSystemMsgAction struct {
	Head              *RspHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	MsgDetail         string   `protobuf:"bytes,2,opt,name=msgDetail,proto3" json:"msgDetail,omitempty"`
	Type              int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	MsgInvalidDecided string   `protobuf:"bytes,5,opt,name=msgInvalidDecided,proto3" json:"msgInvalidDecided,omitempty"`
	RemarkResult      int32    `protobuf:"varint,6,opt,name=remarkResult,proto3" json:"remarkResult,omitempty"`
}

func (m *RspSystemMsgAction) Reset()         { *m = RspSystemMsgAction{} }
func (m *RspSystemMsgAction) String() string { return proto.CompactTextString(m) }
func (*RspSystemMsgAction) ProtoMessage()    {}
func (*RspSystemMsgAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{14}
}
func (m *RspSystemMsgAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RspSystemMsgAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RspSystemMsgAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RspSystemMsgAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspSystemMsgAction.Merge(m, src)
}
func (m *RspSystemMsgAction) XXX_Size() int {
	return m.Size()
}
func (m *RspSystemMsgAction) XXX_DiscardUnknown() {
	xxx_messageInfo_RspSystemMsgAction.DiscardUnknown(m)
}

var xxx_messageInfo_RspSystemMsgAction proto.InternalMessageInfo

func (m *RspSystemMsgAction) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *RspSystemMsgAction) GetMsgDetail() string {
	if m != nil {
		return m.MsgDetail
	}
	return ""
}

func (m *RspSystemMsgAction) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RspSystemMsgAction) GetMsgInvalidDecided() string {
	if m != nil {
		return m.MsgInvalidDecided
	}
	return ""
}

func (m *RspSystemMsgAction) GetRemarkResult() int32 {
	if m != nil {
		return m.RemarkResult
	}
	return 0
}

type RspSystemMsgNew struct {
	Head               *RspHead     `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	UnreadFriendCount  int32        `protobuf:"varint,2,opt,name=unreadFriendCount,proto3" json:"unreadFriendCount,omitempty"`
	UnreadGroupCount   int32        `protobuf:"varint,3,opt,name=unreadGroupCount,proto3" json:"unreadGroupCount,omitempty"`
	LatestFriendSeq    int64        `protobuf:"varint,4,opt,name=latestFriendSeq,proto3" json:"latestFriendSeq,omitempty"`
	LatestGroupSeq     int64        `protobuf:"varint,5,opt,name=latestGroupSeq,proto3" json:"latestGroupSeq,omitempty"`
	FollowingFriendSeq int64        `protobuf:"varint,6,opt,name=followingFriendSeq,proto3" json:"followingFriendSeq,omitempty"`
	FollowingGroupSeq  int64        `protobuf:"varint,7,opt,name=followingGroupSeq,proto3" json:"followingGroupSeq,omitempty"`
	Friendmsgs         []*StructMsg `protobuf:"bytes,9,rep,name=friendmsgs,proto3" json:"friendmsgs,omitempty"`
	Groupmsgs          []*StructMsg `protobuf:"bytes,10,rep,name=groupmsgs,proto3" json:"groupmsgs,omitempty"`
	MsgRibbonFriend    *StructMsg   `protobuf:"bytes,11,opt,name=msgRibbonFriend,proto3" json:"msgRibbonFriend,omitempty"`
	MsgRibbonGroup     *StructMsg   `protobuf:"bytes,12,opt,name=msgRibbonGroup,proto3" json:"msgRibbonGroup,omitempty"`
	MsgDisplay         string       `protobuf:"bytes,13,opt,name=msgDisplay,proto3" json:"msgDisplay,omitempty"`
	GrpMsgDisplay      string       `protobuf:"bytes,14,opt,name=grpMsgDisplay,proto3" json:"grpMsgDisplay,omitempty"`
	Over               int32        `protobuf:"varint,15,opt,name=over,proto3" json:"over,omitempty"`
	Checktype          int32        `protobuf:"varint,20,opt,name=checktype,proto3" json:"checktype,omitempty"`
	GameNick           string       `protobuf:"bytes,100,opt,name=gameNick,proto3" json:"gameNick,omitempty"`
	UndecidForQim      []byte       `protobuf:"bytes,101,opt,name=undecidForQim,proto3" json:"undecidForQim,omitempty"`
	UnReadCount3       int32        `protobuf:"varint,102,opt,name=unReadCount3,proto3" json:"unReadCount3,omitempty"`
}

func (m *RspSystemMsgNew) Reset()         { *m = RspSystemMsgNew{} }
func (m *RspSystemMsgNew) String() string { return proto.CompactTextString(m) }
func (*RspSystemMsgNew) ProtoMessage()    {}
func (*RspSystemMsgNew) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{15}
}
func (m *RspSystemMsgNew) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RspSystemMsgNew) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RspSystemMsgNew.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RspSystemMsgNew) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspSystemMsgNew.Merge(m, src)
}
func (m *RspSystemMsgNew) XXX_Size() int {
	return m.Size()
}
func (m *RspSystemMsgNew) XXX_DiscardUnknown() {
	xxx_messageInfo_RspSystemMsgNew.DiscardUnknown(m)
}

var xxx_messageInfo_RspSystemMsgNew proto.InternalMessageInfo

func (m *RspSystemMsgNew) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *RspSystemMsgNew) GetUnreadFriendCount() int32 {
	if m != nil {
		return m.UnreadFriendCount
	}
	return 0
}

func (m *RspSystemMsgNew) GetUnreadGroupCount() int32 {
	if m != nil {
		return m.UnreadGroupCount
	}
	return 0
}

func (m *RspSystemMsgNew) GetLatestFriendSeq() int64 {
	if m != nil {
		return m.LatestFriendSeq
	}
	return 0
}

func (m *RspSystemMsgNew) GetLatestGroupSeq() int64 {
	if m != nil {
		return m.LatestGroupSeq
	}
	return 0
}

func (m *RspSystemMsgNew) GetFollowingFriendSeq() int64 {
	if m != nil {
		return m.FollowingFriendSeq
	}
	return 0
}

func (m *RspSystemMsgNew) GetFollowingGroupSeq() int64 {
	if m != nil {
		return m.FollowingGroupSeq
	}
	return 0
}

func (m *RspSystemMsgNew) GetFriendmsgs() []*StructMsg {
	if m != nil {
		return m.Friendmsgs
	}
	return nil
}

func (m *RspSystemMsgNew) GetGroupmsgs() []*StructMsg {
	if m != nil {
		return m.Groupmsgs
	}
	return nil
}

func (m *RspSystemMsgNew) GetMsgRibbonFriend() *StructMsg {
	if m != nil {
		return m.MsgRibbonFriend
	}
	return nil
}

func (m *RspSystemMsgNew) GetMsgRibbonGroup() *StructMsg {
	if m != nil {
		return m.MsgRibbonGroup
	}
	return nil
}

func (m *RspSystemMsgNew) GetMsgDisplay() string {
	if m != nil {
		return m.MsgDisplay
	}
	return ""
}

func (m *RspSystemMsgNew) GetGrpMsgDisplay() string {
	if m != nil {
		return m.GrpMsgDisplay
	}
	return ""
}

func (m *RspSystemMsgNew) GetOver() int32 {
	if m != nil {
		return m.Over
	}
	return 0
}

func (m *RspSystemMsgNew) GetChecktype() int32 {
	if m != nil {
		return m.Checktype
	}
	return 0
}

func (m *RspSystemMsgNew) GetGameNick() string {
	if m != nil {
		return m.GameNick
	}
	return ""
}

func (m *RspSystemMsgNew) GetUndecidForQim() []byte {
	if m != nil {
		return m.UndecidForQim
	}
	return nil
}

func (m *RspSystemMsgNew) GetUnReadCount3() int32 {
	if m != nil {
		return m.UnReadCount3
	}
	return 0
}

type RspSystemMsgRead struct {
	Head      *RspHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Type      int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Checktype int32    `protobuf:"varint,3,opt,name=checktype,proto3" json:"checktype,omitempty"`
}

func (m *RspSystemMsgRead) Reset()         { *m = RspSystemMsgRead{} }
func (m *RspSystemMsgRead) String() string { return proto.CompactTextString(m) }
func (*RspSystemMsgRead) ProtoMessage()    {}
func (*RspSystemMsgRead) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{16}
}
func (m *RspSystemMsgRead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RspSystemMsgRead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RspSystemMsgRead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RspSystemMsgRead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspSystemMsgRead.Merge(m, src)
}
func (m *RspSystemMsgRead) XXX_Size() int {
	return m.Size()
}
func (m *RspSystemMsgRead) XXX_DiscardUnknown() {
	xxx_messageInfo_RspSystemMsgRead.DiscardUnknown(m)
}

var xxx_messageInfo_RspSystemMsgRead proto.InternalMessageInfo

func (m *RspSystemMsgRead) GetHead() *RspHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *RspSystemMsgRead) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RspSystemMsgRead) GetChecktype() int32 {
	if m != nil {
		return m.Checktype
	}
	return 0
}

type StructMsg struct {
	Version    int32      `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	MsgType    int32      `protobuf:"varint,2,opt,name=msgType,proto3" json:"msgType,omitempty"`
	MsgSeq     int64      `protobuf:"varint,3,opt,name=msgSeq,proto3" json:"msgSeq,omitempty"`
	MsgTime    int64      `protobuf:"varint,4,opt,name=msgTime,proto3" json:"msgTime,omitempty"`
	ReqUin     int64      `protobuf:"varint,5,opt,name=reqUin,proto3" json:"reqUin,omitempty"`
	UnreadFlag int32      `protobuf:"varint,6,opt,name=unreadFlag,proto3" json:"unreadFlag,omitempty"`
	Msg        *SystemMsg `protobuf:"bytes,50,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *StructMsg) Reset()         { *m = StructMsg{} }
func (m *StructMsg) String() string { return proto.CompactTextString(m) }
func (*StructMsg) ProtoMessage()    {}
func (*StructMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{17}
}
func (m *StructMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StructMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StructMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StructMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructMsg.Merge(m, src)
}
func (m *StructMsg) XXX_Size() int {
	return m.Size()
}
func (m *StructMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_StructMsg.DiscardUnknown(m)
}

var xxx_messageInfo_StructMsg proto.InternalMessageInfo

func (m *StructMsg) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *StructMsg) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *StructMsg) GetMsgSeq() int64 {
	if m != nil {
		return m.MsgSeq
	}
	return 0
}

func (m *StructMsg) GetMsgTime() int64 {
	if m != nil {
		return m.MsgTime
	}
	return 0
}

func (m *StructMsg) GetReqUin() int64 {
	if m != nil {
		return m.ReqUin
	}
	return 0
}

func (m *StructMsg) GetUnreadFlag() int32 {
	if m != nil {
		return m.UnreadFlag
	}
	return 0
}

func (m *StructMsg) GetMsg() *SystemMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type SystemMsg struct {
	SubType                int32              `protobuf:"varint,1,opt,name=subType,proto3" json:"subType,omitempty"`
	MsgTitle               string             `protobuf:"bytes,2,opt,name=msgTitle,proto3" json:"msgTitle,omitempty"`
	MsgDescribe            string             `protobuf:"bytes,3,opt,name=msgDescribe,proto3" json:"msgDescribe,omitempty"`
	MsgAdditional          string             `protobuf:"bytes,4,opt,name=msgAdditional,proto3" json:"msgAdditional,omitempty"`
	MsgSource              string             `protobuf:"bytes,5,opt,name=msgSource,proto3" json:"msgSource,omitempty"`
	MsgDecided             string             `protobuf:"bytes,6,opt,name=msgDecided,proto3" json:"msgDecided,omitempty"`
	SrcId                  int32              `protobuf:"varint,7,opt,name=srcId,proto3" json:"srcId,omitempty"`
	SubSrcId               int32              `protobuf:"varint,8,opt,name=subSrcId,proto3" json:"subSrcId,omitempty"`
	Actions                []*SystemMsgAction `protobuf:"bytes,9,rep,name=actions,proto3" json:"actions,omitempty"`
	GroupCode              int64              `protobuf:"varint,10,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	ActionUin              int64              `protobuf:"varint,11,opt,name=actionUin,proto3" json:"actionUin,omitempty"`
	GroupMsgType           int32              `protobuf:"varint,12,opt,name=groupMsgType,proto3" json:"groupMsgType,omitempty"`
	GroupInviterRole       int32              `protobuf:"varint,13,opt,name=groupInviterRole,proto3" json:"groupInviterRole,omitempty"`
	FriendInfo             *FriendInfo        `protobuf:"bytes,14,opt,name=friendInfo,proto3" json:"friendInfo,omitempty"`
	GroupInfo              *SGroupInfo        `protobuf:"bytes,15,opt,name=groupInfo,proto3" json:"groupInfo,omitempty"`
	ActorUin               int64              `protobuf:"varint,16,opt,name=actorUin,proto3" json:"actorUin,omitempty"`
	MsgActorDescribe       string             `protobuf:"bytes,17,opt,name=msgActorDescribe,proto3" json:"msgActorDescribe,omitempty"`
	MsgAdditionalList      string             `protobuf:"bytes,18,opt,name=msgAdditionalList,proto3" json:"msgAdditionalList,omitempty"`
	Relation               int32              `protobuf:"varint,19,opt,name=relation,proto3" json:"relation,omitempty"`
	Reqsubtype             int32              `protobuf:"varint,20,opt,name=reqsubtype,proto3" json:"reqsubtype,omitempty"`
	CloneUin               int64              `protobuf:"varint,21,opt,name=cloneUin,proto3" json:"cloneUin,omitempty"`
	DiscussUin             int64              `protobuf:"varint,22,opt,name=discussUin,proto3" json:"discussUin,omitempty"`
	EimGroupId             int64              `protobuf:"varint,23,opt,name=eimGroupId,proto3" json:"eimGroupId,omitempty"`
	MsgInviteExtinfo       *MsgInviteExt      `protobuf:"bytes,24,opt,name=msgInviteExtinfo,proto3" json:"msgInviteExtinfo,omitempty"`
	MsgPayGroupExtinfo     *MsgPayGroupExt    `protobuf:"bytes,25,opt,name=msgPayGroupExtinfo,proto3" json:"msgPayGroupExtinfo,omitempty"`
	SourceFlag             int32              `protobuf:"varint,26,opt,name=sourceFlag,proto3" json:"sourceFlag,omitempty"`
	GameNick               []byte             `protobuf:"bytes,27,opt,name=gameNick,proto3" json:"gameNick,omitempty"`
	GameMsg                []byte             `protobuf:"bytes,28,opt,name=gameMsg,proto3" json:"gameMsg,omitempty"`
	GroupFlagext3          int32              `protobuf:"varint,29,opt,name=groupFlagext3,proto3" json:"groupFlagext3,omitempty"`
	GroupOwnerUin          int64              `protobuf:"varint,30,opt,name=groupOwnerUin,proto3" json:"groupOwnerUin,omitempty"`
	DoubtFlag              int32              `protobuf:"varint,31,opt,name=doubtFlag,proto3" json:"doubtFlag,omitempty"`
	WarningTips            []byte             `protobuf:"bytes,32,opt,name=warningTips,proto3" json:"warningTips,omitempty"`
	NameMore               []byte             `protobuf:"bytes,33,opt,name=nameMore,proto3" json:"nameMore,omitempty"`
	ReqUinFaceid           int32              `protobuf:"varint,50,opt,name=reqUinFaceid,proto3" json:"reqUinFaceid,omitempty"`
	ReqUinNick             string             `protobuf:"bytes,51,opt,name=reqUinNick,proto3" json:"reqUinNick,omitempty"`
	GroupName              string             `protobuf:"bytes,52,opt,name=groupName,proto3" json:"groupName,omitempty"`
	ActionUinNick          string             `protobuf:"bytes,53,opt,name=actionUinNick,proto3" json:"actionUinNick,omitempty"`
	MsgQna                 string             `protobuf:"bytes,54,opt,name=msgQna,proto3" json:"msgQna,omitempty"`
	MsgDetail              string             `protobuf:"bytes,55,opt,name=msgDetail,proto3" json:"msgDetail,omitempty"`
	GroupExtFlag           int32              `protobuf:"varint,57,opt,name=groupExtFlag,proto3" json:"groupExtFlag,omitempty"`
	ActorUinNick           string             `protobuf:"bytes,58,opt,name=actorUinNick,proto3" json:"actorUinNick,omitempty"`
	PicUrl                 string             `protobuf:"bytes,59,opt,name=picUrl,proto3" json:"picUrl,omitempty"`
	CloneUinNick           string             `protobuf:"bytes,60,opt,name=cloneUinNick,proto3" json:"cloneUinNick,omitempty"`
	ReqUinBusinessCard     string             `protobuf:"bytes,61,opt,name=reqUinBusinessCard,proto3" json:"reqUinBusinessCard,omitempty"`
	EimGroupIdName         string             `protobuf:"bytes,63,opt,name=eimGroupIdName,proto3" json:"eimGroupIdName,omitempty"`
	ReqUinPreRemark        string             `protobuf:"bytes,64,opt,name=reqUinPreRemark,proto3" json:"reqUinPreRemark,omitempty"`
	ActionUinQqNick        string             `protobuf:"bytes,65,opt,name=actionUinQqNick,proto3" json:"actionUinQqNick,omitempty"`
	ActionUinRemark        string             `protobuf:"bytes,66,opt,name=actionUinRemark,proto3" json:"actionUinRemark,omitempty"`
	ReqUinGender           int32              `protobuf:"varint,67,opt,name=reqUinGender,proto3" json:"reqUinGender,omitempty"`
	ReqUinAge              int32              `protobuf:"varint,68,opt,name=reqUinAge,proto3" json:"reqUinAge,omitempty"`
	C2CInviteJoinGroupFlag int32              `protobuf:"varint,69,opt,name=c2cInviteJoinGroupFlag,proto3" json:"c2cInviteJoinGroupFlag,omitempty"`
	CardSwitch             int32              `protobuf:"varint,101,opt,name=cardSwitch,proto3" json:"cardSwitch,omitempty"`
}

func (m *SystemMsg) Reset()         { *m = SystemMsg{} }
func (m *SystemMsg) String() string { return proto.CompactTextString(m) }
func (*SystemMsg) ProtoMessage()    {}
func (*SystemMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{18}
}
func (m *SystemMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemMsg.Merge(m, src)
}
func (m *SystemMsg) XXX_Size() int {
	return m.Size()
}
func (m *SystemMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SystemMsg proto.InternalMessageInfo

func (m *SystemMsg) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *SystemMsg) GetMsgTitle() string {
	if m != nil {
		return m.MsgTitle
	}
	return ""
}

func (m *SystemMsg) GetMsgDescribe() string {
	if m != nil {
		return m.MsgDescribe
	}
	return ""
}

func (m *SystemMsg) GetMsgAdditional() string {
	if m != nil {
		return m.MsgAdditional
	}
	return ""
}

func (m *SystemMsg) GetMsgSource() string {
	if m != nil {
		return m.MsgSource
	}
	return ""
}

func (m *SystemMsg) GetMsgDecided() string {
	if m != nil {
		return m.MsgDecided
	}
	return ""
}

func (m *SystemMsg) GetSrcId() int32 {
	if m != nil {
		return m.SrcId
	}
	return 0
}

func (m *SystemMsg) GetSubSrcId() int32 {
	if m != nil {
		return m.SubSrcId
	}
	return 0
}

func (m *SystemMsg) GetActions() []*SystemMsgAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *SystemMsg) GetGroupCode() int64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *SystemMsg) GetActionUin() int64 {
	if m != nil {
		return m.ActionUin
	}
	return 0
}

func (m *SystemMsg) GetGroupMsgType() int32 {
	if m != nil {
		return m.GroupMsgType
	}
	return 0
}

func (m *SystemMsg) GetGroupInviterRole() int32 {
	if m != nil {
		return m.GroupInviterRole
	}
	return 0
}

func (m *SystemMsg) GetFriendInfo() *FriendInfo {
	if m != nil {
		return m.FriendInfo
	}
	return nil
}

func (m *SystemMsg) GetGroupInfo() *SGroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

func (m *SystemMsg) GetActorUin() int64 {
	if m != nil {
		return m.ActorUin
	}
	return 0
}

func (m *SystemMsg) GetMsgActorDescribe() string {
	if m != nil {
		return m.MsgActorDescribe
	}
	return ""
}

func (m *SystemMsg) GetMsgAdditionalList() string {
	if m != nil {
		return m.MsgAdditionalList
	}
	return ""
}

func (m *SystemMsg) GetRelation() int32 {
	if m != nil {
		return m.Relation
	}
	return 0
}

func (m *SystemMsg) GetReqsubtype() int32 {
	if m != nil {
		return m.Reqsubtype
	}
	return 0
}

func (m *SystemMsg) GetCloneUin() int64 {
	if m != nil {
		return m.CloneUin
	}
	return 0
}

func (m *SystemMsg) GetDiscussUin() int64 {
	if m != nil {
		return m.DiscussUin
	}
	return 0
}

func (m *SystemMsg) GetEimGroupId() int64 {
	if m != nil {
		return m.EimGroupId
	}
	return 0
}

func (m *SystemMsg) GetMsgInviteExtinfo() *MsgInviteExt {
	if m != nil {
		return m.MsgInviteExtinfo
	}
	return nil
}

func (m *SystemMsg) GetMsgPayGroupExtinfo() *MsgPayGroupExt {
	if m != nil {
		return m.MsgPayGroupExtinfo
	}
	return nil
}

func (m *SystemMsg) GetSourceFlag() int32 {
	if m != nil {
		return m.SourceFlag
	}
	return 0
}

func (m *SystemMsg) GetGameNick() []byte {
	if m != nil {
		return m.GameNick
	}
	return nil
}

func (m *SystemMsg) GetGameMsg() []byte {
	if m != nil {
		return m.GameMsg
	}
	return nil
}

func (m *SystemMsg) GetGroupFlagext3() int32 {
	if m != nil {
		return m.GroupFlagext3
	}
	return 0
}

func (m *SystemMsg) GetGroupOwnerUin() int64 {
	if m != nil {
		return m.GroupOwnerUin
	}
	return 0
}

func (m *SystemMsg) GetDoubtFlag() int32 {
	if m != nil {
		return m.DoubtFlag
	}
	return 0
}

func (m *SystemMsg) GetWarningTips() []byte {
	if m != nil {
		return m.WarningTips
	}
	return nil
}

func (m *SystemMsg) GetNameMore() []byte {
	if m != nil {
		return m.NameMore
	}
	return nil
}

func (m *SystemMsg) GetReqUinFaceid() int32 {
	if m != nil {
		return m.ReqUinFaceid
	}
	return 0
}

func (m *SystemMsg) GetReqUinNick() string {
	if m != nil {
		return m.ReqUinNick
	}
	return ""
}

func (m *SystemMsg) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *SystemMsg) GetActionUinNick() string {
	if m != nil {
		return m.ActionUinNick
	}
	return ""
}

func (m *SystemMsg) GetMsgQna() string {
	if m != nil {
		return m.MsgQna
	}
	return ""
}

func (m *SystemMsg) GetMsgDetail() string {
	if m != nil {
		return m.MsgDetail
	}
	return ""
}

func (m *SystemMsg) GetGroupExtFlag() int32 {
	if m != nil {
		return m.GroupExtFlag
	}
	return 0
}

func (m *SystemMsg) GetActorUinNick() string {
	if m != nil {
		return m.ActorUinNick
	}
	return ""
}

func (m *SystemMsg) GetPicUrl() string {
	if m != nil {
		return m.PicUrl
	}
	return ""
}

func (m *SystemMsg) GetCloneUinNick() string {
	if m != nil {
		return m.CloneUinNick
	}
	return ""
}

func (m *SystemMsg) GetReqUinBusinessCard() string {
	if m != nil {
		return m.ReqUinBusinessCard
	}
	return ""
}

func (m *SystemMsg) GetEimGroupIdName() string {
	if m != nil {
		return m.EimGroupIdName
	}
	return ""
}

func (m *SystemMsg) GetReqUinPreRemark() string {
	if m != nil {
		return m.ReqUinPreRemark
	}
	return ""
}

func (m *SystemMsg) GetActionUinQqNick() string {
	if m != nil {
		return m.ActionUinQqNick
	}
	return ""
}

func (m *SystemMsg) GetActionUinRemark() string {
	if m != nil {
		return m.ActionUinRemark
	}
	return ""
}

func (m *SystemMsg) GetReqUinGender() int32 {
	if m != nil {
		return m.ReqUinGender
	}
	return 0
}

func (m *SystemMsg) GetReqUinAge() int32 {
	if m != nil {
		return m.ReqUinAge
	}
	return 0
}

func (m *SystemMsg) GetC2CInviteJoinGroupFlag() int32 {
	if m != nil {
		return m.C2CInviteJoinGroupFlag
	}
	return 0
}

func (m *SystemMsg) GetCardSwitch() int32 {
	if m != nil {
		return m.CardSwitch
	}
	return 0
}

type SystemMsgAction struct {
	Name       string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Result     string               `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Action     int32                `protobuf:"varint,3,opt,name=action,proto3" json:"action,omitempty"`
	ActionInfo *SystemMsgActionInfo `protobuf:"bytes,4,opt,name=actionInfo,proto3" json:"actionInfo,omitempty"`
	DetailName string               `protobuf:"bytes,5,opt,name=detailName,proto3" json:"detailName,omitempty"`
}

func (m *SystemMsgAction) Reset()         { *m = SystemMsgAction{} }
func (m *SystemMsgAction) String() string { return proto.CompactTextString(m) }
func (*SystemMsgAction) ProtoMessage()    {}
func (*SystemMsgAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{19}
}
func (m *SystemMsgAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemMsgAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemMsgAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemMsgAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemMsgAction.Merge(m, src)
}
func (m *SystemMsgAction) XXX_Size() int {
	return m.Size()
}
func (m *SystemMsgAction) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemMsgAction.DiscardUnknown(m)
}

var xxx_messageInfo_SystemMsgAction proto.InternalMessageInfo

func (m *SystemMsgAction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SystemMsgAction) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *SystemMsgAction) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *SystemMsgAction) GetActionInfo() *SystemMsgActionInfo {
	if m != nil {
		return m.ActionInfo
	}
	return nil
}

func (m *SystemMsgAction) GetDetailName() string {
	if m != nil {
		return m.DetailName
	}
	return ""
}

type SystemMsgActionInfo struct {
	Type         int32         `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	GroupCode    int64         `protobuf:"varint,2,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	Sig          []byte        `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`
	Msg          string        `protobuf:"bytes,50,opt,name=msg,proto3" json:"msg,omitempty"`
	GroupId      int32         `protobuf:"varint,51,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Remark       string        `protobuf:"bytes,52,opt,name=remark,proto3" json:"remark,omitempty"`
	Blacklist    bool          `protobuf:"varint,53,opt,name=blacklist,proto3" json:"blacklist,omitempty"`
	AddFrdSNInfo *AddFrdSNInfo `protobuf:"bytes,54,opt,name=addFrdSNInfo,proto3" json:"addFrdSNInfo,omitempty"`
}

func (m *SystemMsgActionInfo) Reset()         { *m = SystemMsgActionInfo{} }
func (m *SystemMsgActionInfo) String() string { return proto.CompactTextString(m) }
func (*SystemMsgActionInfo) ProtoMessage()    {}
func (*SystemMsgActionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_384c5ab2b0a6eea5, []int{20}
}
func (m *SystemMsgActionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemMsgActionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemMsgActionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemMsgActionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemMsgActionInfo.Merge(m, src)
}
func (m *SystemMsgActionInfo) XXX_Size() int {
	return m.Size()
}
func (m *SystemMsgActionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemMsgActionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SystemMsgActionInfo proto.InternalMessageInfo

func (m *SystemMsgActionInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SystemMsgActionInfo) GetGroupCode() int64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *SystemMsgActionInfo) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *SystemMsgActionInfo) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SystemMsgActionInfo) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *SystemMsgActionInfo) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *SystemMsgActionInfo) GetBlacklist() bool {
	if m != nil {
		return m.Blacklist
	}
	return false
}

func (m *SystemMsgActionInfo) GetAddFrdSNInfo() *AddFrdSNInfo {
	if m != nil {
		return m.AddFrdSNInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*AddFrdSNInfo)(nil), "AddFrdSNInfo")
	proto.RegisterType((*FlagInfo)(nil), "FlagInfo")
	proto.RegisterType((*FriendInfo)(nil), "FriendInfo")
	proto.RegisterType((*SGroupInfo)(nil), "SGroupInfo")
	proto.RegisterType((*MsgInviteExt)(nil), "MsgInviteExt")
	proto.RegisterType((*MsgPayGroupExt)(nil), "MsgPayGroupExt")
	proto.RegisterType((*ReqNextSystemMsg)(nil), "ReqNextSystemMsg")
	proto.RegisterType((*ReqSystemMsg)(nil), "ReqSystemMsg")
	proto.RegisterType((*ReqSystemMsgAction)(nil), "ReqSystemMsgAction")
	proto.RegisterType((*ReqSystemMsgNew)(nil), "ReqSystemMsgNew")
	proto.RegisterType((*ReqSystemMsgRead)(nil), "ReqSystemMsgRead")
	proto.RegisterType((*RspHead)(nil), "RspHead")
	proto.RegisterType((*RspNextSystemMsg)(nil), "RspNextSystemMsg")
	proto.RegisterType((*RspSystemMsg)(nil), "RspSystemMsg")
	proto.RegisterType((*RspSystemMsgAction)(nil), "RspSystemMsgAction")
	proto.RegisterType((*RspSystemMsgNew)(nil), "RspSystemMsgNew")
	proto.RegisterType((*RspSystemMsgRead)(nil), "RspSystemMsgRead")
	proto.RegisterType((*StructMsg)(nil), "StructMsg")
	proto.RegisterType((*SystemMsg)(nil), "SystemMsg")
	proto.RegisterType((*SystemMsgAction)(nil), "SystemMsgAction")
	proto.RegisterType((*SystemMsgActionInfo)(nil), "SystemMsgActionInfo")
}

func init() {
	proto.RegisterFile("client/pb/structmsg/structmsg.proto", fileDescriptor_384c5ab2b0a6eea5)
}

var fileDescriptor_384c5ab2b0a6eea5 = []byte{
	// 2333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xcd, 0x73, 0x1c, 0x47,
	0x15, 0xcf, 0x6a, 0x57, 0x1f, 0xdb, 0xbb, 0x96, 0xe4, 0xb1, 0x31, 0x13, 0x47, 0x16, 0xca, 0x02,
	0x29, 0x61, 0x52, 0x0a, 0x48, 0x8e, 0xa9, 0xc4, 0x81, 0x44, 0x1f, 0x96, 0xe2, 0x90, 0x95, 0xed,
	0x59, 0xa9, 0x42, 0x71, 0x62, 0x76, 0xa6, 0x35, 0x6a, 0x34, 0x1f, 0xab, 0xe9, 0x1e, 0xcb, 0xfa,
	0x2f, 0x38, 0x71, 0xe6, 0x4a, 0x51, 0xc5, 0x81, 0x03, 0x47, 0x2e, 0x1c, 0xe0, 0x98, 0x1b, 0x1c,
	0x29, 0xfb, 0x4a, 0xe5, 0xc8, 0x99, 0x7a, 0xef, 0xf5, 0xcc, 0xf4, 0xcc, 0xee, 0xca, 0x4e, 0x15,
	0x55, 0xc0, 0x6d, 0xfb, 0xf7, 0x5e, 0xf7, 0xbc, 0x7e, 0x1f, 0xbf, 0x7e, 0xdd, 0xcb, 0xbe, 0xed,
	0x85, 0x82, 0xc7, 0xea, 0xbd, 0xd1, 0xf0, 0x3d, 0xa9, 0xd2, 0xcc, 0x53, 0x91, 0x0c, 0xca, 0x5f,
	0x1b, 0xa3, 0x34, 0x51, 0x49, 0xef, 0x33, 0xd6, 0xdd, 0xf6, 0xfd, 0xfd, 0xd4, 0x1f, 0x1c, 0x3e,
	0x8a, 0x4f, 0x12, 0xeb, 0x3b, 0xec, 0x5a, 0x9c, 0xa8, 0x01, 0xe7, 0x7b, 0x97, 0xb1, 0x1b, 0x09,
	0xcf, 0x6e, 0xac, 0x35, 0xd6, 0x67, 0x9d, 0x2a, 0x68, 0xdd, 0x64, 0xb3, 0x92, 0xab, 0x41, 0x6c,
	0xcf, 0xa0, 0x94, 0x06, 0xbd, 0xaf, 0xe6, 0xd9, 0xc2, 0x7e, 0xe8, 0x06, 0xb8, 0xd0, 0x3a, 0x5b,
	0x0a, 0xd2, 0x51, 0x5f, 0x06, 0x3f, 0x15, 0xde, 0xd9, 0xb6, 0x1f, 0x89, 0x58, 0x2f, 0x55, 0x87,
	0x4b, 0xcd, 0x4f, 0x85, 0xef, 0xf3, 0xf8, 0x20, 0x1d, 0xe9, 0x65, 0xeb, 0xb0, 0xf5, 0x2e, 0xbb,
	0x4e, 0xd0, 0x17, 0x49, 0xea, 0x8b, 0x38, 0xd8, 0x4b, 0x2e, 0x62, 0xbb, 0x89, 0xba, 0xe3, 0x02,
	0xd0, 0x3e, 0x49, 0xfd, 0xbe, 0x0c, 0x0e, 0xb8, 0xda, 0xc9, 0xa4, 0xd8, 0x75, 0x53, 0xdf, 0x6e,
	0x91, 0xf6, 0x98, 0xc0, 0xfa, 0x90, 0xd9, 0xb4, 0xc4, 0x01, 0x57, 0x8f, 0x4f, 0x4e, 0x84, 0x27,
	0xdc, 0x70, 0xdb, 0xf3, 0x92, 0x2c, 0x56, 0xf6, 0x2c, 0x4e, 0x9a, 0x2a, 0xb7, 0x7e, 0xc0, 0x6e,
	0x14, 0xb2, 0x27, 0xee, 0xe5, 0xa3, 0xf8, 0x20, 0x4d, 0xb2, 0x91, 0x3d, 0x87, 0xd3, 0x26, 0x89,
	0xac, 0xfb, 0xec, 0x16, 0x99, 0xb0, 0x27, 0xa4, 0x97, 0x49, 0xb9, 0xd9, 0x77, 0xe3, 0xcb, 0xdd,
	0x53, 0x57, 0xd9, 0xf3, 0x38, 0x69, 0x8a, 0xd4, 0xfa, 0x9c, 0xbd, 0x4d, 0xcb, 0x1d, 0x26, 0x6a,
	0x3b, 0x0c, 0x93, 0x8b, 0xcf, 0x12, 0x01, 0xae, 0x79, 0x14, 0x3f, 0x13, 0x8a, 0x1f, 0x26, 0x6a,
	0x3f, 0xf5, 0xed, 0x05, 0x5c, 0xe2, 0xd5, 0x8a, 0xd6, 0x26, 0xbb, 0x49, 0xdf, 0x39, 0xe4, 0xdc,
	0xff, 0xc2, 0x15, 0x4a, 0xc4, 0x41, 0x5f, 0x06, 0x76, 0x1b, 0x17, 0x98, 0x28, 0xb3, 0x76, 0xd8,
	0x0a, 0xe1, 0xc7, 0x22, 0x56, 0x5b, 0x9b, 0x20, 0xdd, 0x0e, 0xc3, 0xe3, 0x38, 0xe5, 0x2e, 0xa0,
	0x36, 0xc3, 0xb9, 0x57, 0xea, 0x58, 0x3f, 0x61, 0xb7, 0xb5, 0x71, 0x20, 0xc9, 0x54, 0x82, 0x89,
	0xa0, 0x63, 0x67, 0x77, 0x70, 0x85, 0x2b, 0x34, 0xac, 0x3d, 0x76, 0xa7, 0x70, 0xea, 0x51, 0xea,
	0xc6, 0xf2, 0x84, 0xa7, 0xe8, 0xd7, 0xbe, 0x0c, 0x20, 0x01, 0xed, 0x2e, 0x2e, 0x71, 0xb5, 0x12,
	0xec, 0xa4, 0x50, 0x78, 0x9a, 0x09, 0x08, 0x4f, 0x65, 0x91, 0x6b, 0xb4, 0x93, 0xab, 0x74, 0xac,
	0x4f, 0xd8, 0x5b, 0x24, 0x1f, 0x64, 0xa3, 0x51, 0x92, 0x2a, 0x72, 0x2f, 0x18, 0x0c, 0xfe, 0xb6,
	0x17, 0x71, 0x89, 0xab, 0x54, 0xca, 0xbc, 0xeb, 0xbb, 0xf2, 0xac, 0x36, 0x7d, 0xc9, 0xcc, 0xbb,
	0x71, 0xb9, 0xf5, 0x11, 0x7b, 0xb3, 0xb0, 0x6e, 0x4f, 0xc8, 0xa1, 0x1b, 0xfb, 0xdc, 0xdf, 0xb9,
	0xa4, 0x6a, 0x5b, 0xc6, 0xc9, 0xd3, 0x15, 0x4a, 0xdb, 0x0f, 0xb8, 0xda, 0xdd, 0xf4, 0x68, 0x6d,
	0x4a, 0x13, 0xc8, 0xde, 0xeb, 0xa6, 0xed, 0x13, 0x55, 0x7a, 0x3f, 0x63, 0x6c, 0x3f, 0x15, 0x3c,
	0xf6, 0xb1, 0xe2, 0xdf, 0x61, 0x8b, 0x91, 0x0c, 0x40, 0xaa, 0x08, 0xc5, 0x82, 0x6f, 0x3b, 0x35,
	0xd4, 0xea, 0xb1, 0x6e, 0x24, 0x83, 0x9d, 0xd0, 0xf5, 0xce, 0x42, 0x21, 0x15, 0x16, 0x7b, 0xdb,
	0xa9, 0x60, 0xbd, 0x7f, 0x35, 0x18, 0x1b, 0xe0, 0x47, 0x72, 0x56, 0x0a, 0x60, 0xb0, 0x9d, 0xa9,
	0xd3, 0xa3, 0xcb, 0x11, 0xcf, 0x59, 0xa9, 0x02, 0x82, 0x96, 0x2f, 0xe4, 0x28, 0x74, 0x2f, 0xb7,
	0x3d, 0x25, 0x92, 0x9c, 0x9d, 0xaa, 0xa0, 0x75, 0x9b, 0x2d, 0x44, 0x32, 0xd8, 0x0e, 0x79, 0xaa,
	0x90, 0x3b, 0xda, 0x4e, 0x31, 0xd6, 0x5b, 0xd8, 0xe3, 0xca, 0x15, 0x21, 0x69, 0xb4, 0x8a, 0x2d,
	0x18, 0x28, 0x50, 0x4b, 0x24, 0x83, 0xc7, 0xea, 0x94, 0xa7, 0xe8, 0xcb, 0xbd, 0x24, 0xe6, 0xc8,
	0x12, 0x6d, 0x67, 0x5c, 0x60, 0xdd, 0x65, 0xcb, 0xee, 0x68, 0xf4, 0x24, 0x15, 0xcf, 0x44, 0xc8,
	0x03, 0x8e, 0xc9, 0x45, 0xdc, 0x30, 0x86, 0xf7, 0x7e, 0xc1, 0xba, 0x7d, 0x19, 0x90, 0xa3, 0x1f,
	0x3e, 0x57, 0x96, 0xcd, 0xe6, 0x65, 0xea, 0x19, 0x7b, 0xce, 0x87, 0x5a, 0xb2, 0x9b, 0xf8, 0x1c,
	0xf7, 0xd9, 0x74, 0xf2, 0xa1, 0xb5, 0xc2, 0xda, 0x17, 0xae, 0x50, 0x03, 0xe5, 0x2a, 0xae, 0xe9,
	0xb1, 0x04, 0x7a, 0x47, 0x6c, 0xb1, 0x2f, 0x83, 0x3c, 0x91, 0xe1, 0x1b, 0x6b, 0xac, 0xf3, 0x4b,
	0x62, 0x87, 0x23, 0x11, 0xd1, 0x77, 0x9a, 0x8e, 0x09, 0x81, 0xc6, 0x79, 0x26, 0x54, 0xae, 0x41,
	0xdf, 0x33, 0xa1, 0xde, 0x6f, 0x67, 0xd8, 0xb2, 0xc3, 0xcf, 0x0f, 0xf9, 0x73, 0x35, 0xb8, 0x94,
	0x8a, 0x47, 0x50, 0xe7, 0xb7, 0xd8, 0x5c, 0x24, 0x83, 0xc3, 0x2c, 0xd2, 0xb6, 0xeb, 0x91, 0xb5,
	0xc1, 0xac, 0x93, 0x04, 0x48, 0x49, 0xc4, 0x01, 0x25, 0xc5, 0x80, 0x9f, 0xeb, 0x55, 0x27, 0x48,
	0x90, 0xc9, 0x73, 0x14, 0xad, 0x06, 0xf5, 0x26, 0xaa, 0x8f, 0x0b, 0x60, 0xfb, 0xde, 0x29, 0xf7,
	0xce, 0x14, 0x38, 0x8d, 0xf8, 0xbe, 0x04, 0xac, 0x3b, 0xac, 0x75, 0x02, 0x01, 0x80, 0x68, 0x75,
	0x36, 0xdb, 0x1b, 0xf9, 0x81, 0xe5, 0x20, 0x0c, 0xd9, 0x11, 0xba, 0x71, 0x90, 0xb9, 0x01, 0xd7,
	0x31, 0x2a, 0xc6, 0xe0, 0xf1, 0x67, 0x3c, 0x95, 0x90, 0x59, 0xc4, 0xd2, 0xf9, 0x90, 0x8e, 0x1a,
	0xb0, 0xb6, 0x2f, 0x03, 0x08, 0x0e, 0x86, 0x78, 0x41, 0x1b, 0x58, 0x17, 0xf4, 0x7e, 0xdf, 0x60,
	0x5d, 0x87, 0x9f, 0xbf, 0xda, 0x4f, 0xeb, 0x6c, 0x29, 0x74, 0x15, 0x97, 0xaa, 0xee, 0xa4, 0x3a,
	0x0c, 0x89, 0x4b, 0x50, 0xcd, 0x3d, 0x35, 0xd4, 0xdc, 0x42, 0xab, 0xba, 0x05, 0x73, 0xe3, 0xb3,
	0xd5, 0x8d, 0xf7, 0x7e, 0x33, 0xc3, 0x2c, 0xd3, 0x60, 0x5d, 0x49, 0x36, 0x9b, 0x8f, 0x68, 0x5b,
	0x79, 0x6e, 0xea, 0xa1, 0xde, 0x50, 0x69, 0xaf, 0x1e, 0x01, 0x9e, 0xf2, 0xf3, 0x63, 0x11, 0x6b,
	0xf3, 0xf4, 0x08, 0x73, 0x39, 0x1b, 0x1e, 0x95, 0x01, 0xcb, 0x87, 0xd8, 0x69, 0xa4, 0xde, 0x23,
	0x5f, 0xdb, 0x44, 0x03, 0x30, 0x56, 0x66, 0xc3, 0x01, 0x0a, 0x74, 0x94, 0xf2, 0x31, 0xd0, 0x4b,
	0xa0, 0x29, 0x1a, 0x17, 0xa4, 0x50, 0x55, 0x30, 0xeb, 0x1e, 0x63, 0x2e, 0xee, 0x01, 0x22, 0x8f,
	0x81, 0xea, 0x6c, 0xde, 0xdc, 0xa8, 0xed, 0x0f, 0xb3, 0xc2, 0xd0, 0xab, 0xb8, 0xa8, 0x5d, 0x73,
	0xd1, 0x3f, 0x67, 0xd8, 0x92, 0xe9, 0xa2, 0x43, 0x7e, 0xf1, 0x3f, 0x11, 0xd6, 0x4a, 0x31, 0xcc,
	0x4e, 0x2b, 0x86, 0xb9, 0x57, 0x17, 0xc3, 0x7c, 0xad, 0x18, 0xde, 0x61, 0x8b, 0x42, 0x1e, 0x70,
	0xe8, 0x23, 0x1c, 0x31, 0x1c, 0x26, 0x31, 0xba, 0x71, 0xc1, 0xa9, 0xa1, 0x85, 0xde, 0x41, 0x3a,
	0xd2, 0x7a, 0x6d, 0x43, 0xaf, 0x40, 0x27, 0x97, 0x10, 0x9b, 0x56, 0x42, 0xbf, 0x6e, 0x20, 0xdd,
	0x14, 0xee, 0x76, 0xb8, 0xeb, 0x4f, 0xf2, 0x6b, 0xe3, 0x75, 0xfd, 0x3a, 0x33, 0xd1, 0xaf, 0x16,
	0x6b, 0xa1, 0xe3, 0x88, 0x44, 0xf1, 0xf7, 0xd5, 0xf4, 0xd2, 0x7b, 0xc0, 0xe6, 0x1d, 0x39, 0xfa,
	0x14, 0xcc, 0xc1, 0x64, 0x97, 0x59, 0xa8, 0xf2, 0xf0, 0xd3, 0x48, 0x97, 0xcd, 0xbe, 0x2b, 0x42,
	0x7d, 0xf4, 0xe5, 0xc3, 0xde, 0x1f, 0x80, 0x44, 0xe5, 0xa8, 0x4a, 0xa2, 0x2b, 0xac, 0x75, 0xca,
	0x5d, 0x3a, 0x4c, 0x3b, 0x9b, 0x0b, 0x1b, 0x7a, 0x79, 0x07, 0x51, 0x6b, 0x95, 0xb5, 0x22, 0x19,
	0x48, 0x7b, 0x66, 0xad, 0xb9, 0xde, 0xd9, 0x64, 0x1b, 0x03, 0xec, 0xef, 0xc1, 0x23, 0x88, 0x4f,
	0xa1, 0xda, 0xe6, 0xd7, 0xa3, 0xda, 0xd6, 0x6b, 0x51, 0xed, 0x58, 0x76, 0xdd, 0x66, 0x0b, 0x81,
	0x1b, 0xf1, 0x43, 0xe1, 0x9d, 0xd9, 0x3e, 0x9d, 0xb4, 0xf9, 0x18, 0xce, 0xea, 0x2c, 0xf6, 0xb9,
	0x27, 0xfc, 0xfd, 0x24, 0x7d, 0x2a, 0x22, 0x9b, 0xaf, 0x35, 0xd6, 0xbb, 0x4e, 0x15, 0x84, 0x5a,
	0xce, 0x62, 0x88, 0xed, 0x2e, 0xf4, 0xd9, 0x5b, 0xf6, 0x09, 0xd5, 0xb2, 0x89, 0xf5, 0xfe, 0x34,
	0xc3, 0xba, 0x8e, 0x1c, 0xfd, 0xa7, 0x1c, 0xb6, 0xc6, 0x3a, 0x19, 0x36, 0xaa, 0xb8, 0xbc, 0x8e,
	0xbc, 0x09, 0x4d, 0x4a, 0xb3, 0xd6, 0xeb, 0xa6, 0xd9, 0xec, 0xc4, 0x34, 0x9b, 0x1c, 0xa4, 0xb9,
	0xaf, 0x17, 0xa4, 0xf9, 0x69, 0x41, 0x5a, 0x65, 0x2c, 0xc2, 0xab, 0x04, 0x34, 0x41, 0x58, 0xa5,
	0x6d, 0xc7, 0x40, 0x7a, 0x7f, 0x6c, 0x30, 0xcb, 0x74, 0xa0, 0x66, 0xf7, 0xab, 0xdd, 0xb8, 0xc2,
	0xda, 0x45, 0x4f, 0xa4, 0xd3, 0xb8, 0x04, 0x26, 0xd6, 0x0d, 0xf5, 0x4c, 0x8f, 0xe2, 0x67, 0x6e,
	0x28, 0xfc, 0x3d, 0x08, 0x32, 0xf7, 0x8d, 0x9e, 0xa9, 0x2a, 0x80, 0xc8, 0xa7, 0x3c, 0x72, 0xd3,
	0x33, 0x87, 0x4a, 0x88, 0x58, 0xbe, 0x82, 0xf5, 0xfe, 0x36, 0xcb, 0x96, 0x4c, 0xc3, 0x81, 0x73,
	0xaf, 0xb6, 0xfa, 0x5d, 0x76, 0x9d, 0x22, 0x49, 0xbe, 0xa4, 0x10, 0x53, 0x97, 0x38, 0x2e, 0x80,
	0xbe, 0x8d, 0x40, 0x74, 0xa5, 0x99, 0x0f, 0x63, 0xf8, 0xff, 0x5d, 0x52, 0xdc, 0x65, 0x8c, 0x58,
	0x15, 0x8b, 0xa1, 0x3d, 0x56, 0x0c, 0x86, 0xd4, 0x5a, 0x67, 0x6d, 0x3c, 0x3d, 0x51, 0x95, 0x8d,
	0xa9, 0x96, 0x42, 0xeb, 0x1e, 0x5b, 0x8a, 0x64, 0x40, 0x8c, 0xae, 0xef, 0x00, 0x1d, 0x0c, 0x84,
	0xa9, 0x5f, 0x57, 0xb1, 0x36, 0xb1, 0xeb, 0x26, 0x88, 0xee, 0x1e, 0xdd, 0xb1, 0x49, 0x35, 0x8d,
	0x5a, 0x52, 0x5f, 0xab, 0x27, 0x35, 0xdd, 0x18, 0x46, 0xfd, 0x52, 0x65, 0x11, 0x55, 0xaa, 0x20,
	0xe4, 0x69, 0xf2, 0x8c, 0xa7, 0xfa, 0xa2, 0x85, 0xbf, 0xab, 0x9c, 0x76, 0xf3, 0xbf, 0xc3, 0x69,
	0x43, 0x3c, 0x07, 0xaa, 0xa7, 0xdb, 0xd5, 0x99, 0x9d, 0x57, 0xdc, 0xcc, 0xb4, 0x93, 0xaa, 0x59,
	0x3f, 0xa9, 0xfe, 0xd2, 0x60, 0xed, 0xc2, 0xbf, 0x66, 0x07, 0xd1, 0xa8, 0x76, 0x10, 0x46, 0x97,
	0x37, 0x33, 0xad, 0xcb, 0x6b, 0x56, 0xba, 0x3c, 0x3d, 0x03, 0x6e, 0x0a, 0x54, 0x03, 0xf9, 0xd0,
	0xe8, 0xff, 0x66, 0x2b, 0xfd, 0xdf, 0x2a, 0x63, 0xba, 0xfc, 0xca, 0xbb, 0x91, 0x81, 0x58, 0x2b,
	0xac, 0x19, 0xc9, 0xc0, 0xde, 0xcc, 0xd3, 0xa2, 0x70, 0x0c, 0xc0, 0xbd, 0x3f, 0x2f, 0xb2, 0x76,
	0x49, 0xff, 0x46, 0x2f, 0xd9, 0xa8, 0xf6, 0x92, 0x74, 0xf3, 0x3b, 0x12, 0x2a, 0xe4, 0x9a, 0xb2,
	0x8a, 0x31, 0xd0, 0x3e, 0xd2, 0x97, 0xf4, 0x52, 0x31, 0xe4, 0xfa, 0x62, 0x68, 0x42, 0x10, 0x5d,
	0xb8, 0x27, 0xfa, 0xbe, 0x00, 0x7a, 0x74, 0x43, 0x7d, 0x35, 0xac, 0x82, 0x9a, 0x17, 0x07, 0x49,
	0x96, 0x7a, 0xf9, 0x8d, 0xb0, 0x04, 0xf2, 0xac, 0xd5, 0xe4, 0x37, 0x57, 0x66, 0xad, 0x66, 0xbd,
	0xa2, 0xdb, 0x9d, 0x9f, 0xd6, 0xed, 0x2e, 0xd4, 0xba, 0xdd, 0xbb, 0x6c, 0x9e, 0x3a, 0xd4, 0xbc,
	0x88, 0x97, 0xeb, 0x6d, 0xac, 0x93, 0x2b, 0x80, 0x6d, 0x01, 0x31, 0x96, 0xcf, 0x75, 0x6b, 0x55,
	0x02, 0x20, 0x25, 0x45, 0x08, 0x4f, 0x87, 0xa4, 0x05, 0x30, 0xd6, 0x55, 0x77, 0x27, 0x74, 0xd5,
	0x77, 0xd9, 0x72, 0x40, 0x57, 0x76, 0xb8, 0xbd, 0xa6, 0x4e, 0x12, 0x72, 0xfd, 0x88, 0x32, 0x86,
	0x5b, 0xdf, 0xcf, 0xf9, 0x07, 0x3b, 0xf0, 0x45, 0x0c, 0x6c, 0x67, 0xa3, 0x7c, 0x4d, 0x70, 0x0c,
	0xb1, 0xf5, 0x3d, 0x6d, 0x38, 0xea, 0x2e, 0x69, 0xdd, 0xf2, 0x79, 0xc0, 0x29, 0xa5, 0xe0, 0x2b,
	0xd7, 0x53, 0x49, 0x7a, 0xac, 0x5f, 0x40, 0x9a, 0x4e, 0x31, 0x06, 0xfb, 0x22, 0xf4, 0x4a, 0x92,
	0x16, 0x81, 0xbe, 0x8e, 0x31, 0x18, 0xc3, 0xf5, 0x69, 0x55, 0x06, 0xf6, 0x73, 0x21, 0x95, 0x6d,
	0x15, 0xa7, 0x55, 0x55, 0x00, 0x5f, 0x4d, 0x79, 0xe8, 0xe2, 0xa3, 0xc3, 0x0d, 0x8a, 0x50, 0x3e,
	0x86, 0x98, 0xa7, 0xfc, 0x5c, 0x66, 0x43, 0x83, 0x50, 0x0c, 0x04, 0xe6, 0x7a, 0x61, 0x12, 0x73,
	0xb0, 0xf8, 0x1b, 0x64, 0x71, 0x3e, 0x86, 0xb9, 0x3e, 0x3d, 0x01, 0x82, 0xf4, 0x16, 0x4a, 0x0d,
	0x04, 0xe4, 0x5c, 0x44, 0xe4, 0x08, 0xdf, 0xfe, 0x26, 0xc9, 0x4b, 0xc4, 0xfa, 0x00, 0x77, 0x5c,
	0xbc, 0x26, 0x08, 0xf0, 0x9f, 0x8d, 0xfe, 0xbb, 0xb6, 0x61, 0x3e, 0x33, 0x38, 0x63, 0x6a, 0xd6,
	0xc7, 0xcc, 0x8a, 0x2a, 0xcf, 0x04, 0x38, 0xf9, 0x4d, 0x9c, 0xbc, 0xb4, 0x51, 0x7d, 0x41, 0x70,
	0x26, 0xa8, 0x82, 0x6d, 0x12, 0xb3, 0x1e, 0x6b, 0xfa, 0x36, 0xed, 0xbb, 0x44, 0x2a, 0x4c, 0xfa,
	0x16, 0x12, 0x65, 0xc9, 0xa4, 0x36, 0x9b, 0x87, 0xdf, 0x7d, 0x19, 0xd8, 0x2b, 0x28, 0xca, 0x87,
	0xc5, 0x4b, 0x10, 0x2c, 0xc1, 0x9f, 0xab, 0x2d, 0xfb, 0x8e, 0xf1, 0x12, 0x94, 0x83, 0x85, 0xd6,
	0xe3, 0x8b, 0x98, 0x63, 0x2a, 0xac, 0xa2, 0x6b, 0xaa, 0x20, 0x64, 0xbc, 0x9f, 0x64, 0x43, 0x85,
	0x06, 0x7e, 0x8b, 0xf8, 0xb1, 0x00, 0x80, 0x11, 0x2e, 0xdc, 0x34, 0x16, 0x71, 0x70, 0x24, 0x46,
	0xd2, 0x5e, 0x43, 0x3b, 0x4c, 0x08, 0x76, 0x10, 0x83, 0x59, 0x49, 0xca, 0xed, 0xb7, 0x69, 0x07,
	0xf9, 0x98, 0xfa, 0x17, 0xe0, 0xb6, 0x7d, 0xd7, 0xe3, 0xc2, 0x47, 0xea, 0xc2, 0xfe, 0xa5, 0xc4,
	0x74, 0x66, 0x1c, 0x8b, 0x18, 0x7d, 0xb0, 0x45, 0x6c, 0x50, 0x22, 0x45, 0xbd, 0x1e, 0xba, 0x11,
	0xb7, 0xef, 0x11, 0x97, 0x14, 0x00, 0xec, 0xb1, 0x28, 0x4f, 0x5c, 0xe0, 0x7d, 0xe2, 0xa3, 0x0a,
	0xa8, 0x39, 0xfa, 0x69, 0xec, 0xda, 0xf7, 0x51, 0xac, 0x47, 0xd5, 0xfe, 0xed, 0x47, 0xf5, 0xfe,
	0x2d, 0xaf, 0xf6, 0x87, 0xcf, 0xc9, 0x39, 0x1f, 0x18, 0xd5, 0xae, 0x31, 0xd0, 0xc9, 0x2b, 0x0b,
	0x3f, 0xff, 0x21, 0x3d, 0xe3, 0x99, 0x18, 0x7c, 0x7d, 0x24, 0xbc, 0xe3, 0x34, 0xb4, 0x1f, 0xd0,
	0xd7, 0x69, 0x04, 0x73, 0xf3, 0x1c, 0xc7, 0xb9, 0x1f, 0xd1, 0x5c, 0x13, 0x83, 0xfe, 0x87, 0x7c,
	0xb1, 0x93, 0x49, 0x11, 0x73, 0x29, 0xf1, 0xfd, 0xfe, 0xc7, 0xa8, 0x39, 0x41, 0x02, 0x7d, 0x55,
	0x99, 0xf9, 0xe8, 0xb2, 0x8f, 0xe9, 0xed, 0xae, 0x8a, 0x42, 0xa7, 0x46, 0xb3, 0x9f, 0xa4, 0xdc,
	0xc1, 0x76, 0xd2, 0xfe, 0x04, 0x15, 0xeb, 0x30, 0x68, 0x16, 0xce, 0x7c, 0x7a, 0x8e, 0x86, 0x6e,
	0x93, 0x66, 0x0d, 0xae, 0x68, 0xea, 0x35, 0x77, 0x6a, 0x9a, 0x7a, 0xcd, 0x22, 0x2f, 0x0e, 0x78,
	0xec, 0xf3, 0xd4, 0xde, 0x35, 0xf3, 0x82, 0x30, 0x88, 0x0d, 0x8d, 0xb7, 0x03, 0x6e, 0xef, 0x51,
	0x5e, 0x16, 0x80, 0x75, 0x9f, 0xdd, 0xf2, 0xc6, 0x9e, 0x62, 0x31, 0x4a, 0x0f, 0xe9, 0xaf, 0x83,
	0xc9, 0x52, 0xc8, 0x36, 0xcf, 0x4d, 0xfd, 0xc1, 0x85, 0x50, 0xde, 0x29, 0xb6, 0x26, 0xb3, 0x8e,
	0x81, 0xf4, 0x7e, 0xd7, 0x60, 0x4b, 0xf5, 0x3b, 0x80, 0xc5, 0x5a, 0x90, 0xd1, 0xfa, 0x21, 0x17,
	0x7f, 0x1b, 0xd7, 0x5a, 0x3a, 0x43, 0xf3, 0x6b, 0xed, 0x2d, 0x36, 0x47, 0x9b, 0xd5, 0xad, 0x86,
	0x1e, 0xd5, 0xde, 0x5a, 0x5a, 0xaf, 0xf9, 0xd6, 0x02, 0xcc, 0x87, 0xb9, 0x88, 0x91, 0xa4, 0x83,
	0xd4, 0x40, 0x7a, 0x5f, 0x35, 0xd8, 0x8d, 0x09, 0x6b, 0x14, 0x7d, 0x50, 0xa3, 0xda, 0x07, 0x95,
	0xe7, 0xde, 0x4c, 0xfd, 0xdc, 0x5b, 0x66, 0x4d, 0x29, 0x02, 0x34, 0xba, 0xeb, 0xc0, 0x4f, 0x40,
	0xf2, 0x6e, 0xa3, 0x8d, 0x1d, 0x06, 0xf2, 0x91, 0x26, 0xd9, 0x2d, 0xea, 0x29, 0xf4, 0x90, 0xbc,
	0x81, 0x01, 0xbf, 0x97, 0x7b, 0x03, 0xe3, 0xbc, 0xc2, 0xda, 0xc3, 0xe2, 0x85, 0xfb, 0x7d, 0x7c,
	0xf1, 0x28, 0x01, 0xeb, 0x87, 0xac, 0xeb, 0x1a, 0xff, 0xba, 0x61, 0x6d, 0x02, 0x27, 0x9b, 0x7f,
	0xc5, 0x39, 0x15, 0x95, 0x9d, 0xef, 0xfe, 0xf5, 0xc5, 0x6a, 0xe3, 0xcb, 0x17, 0xab, 0x8d, 0x7f,
	0xbc, 0x58, 0x6d, 0xfc, 0xea, 0xe5, 0xea, 0x1b, 0x5f, 0xbe, 0x5c, 0x7d, 0xe3, 0xef, 0x2f, 0x57,
	0xdf, 0xf8, 0x79, 0x67, 0xe3, 0x41, 0xf1, 0xaf, 0xde, 0x70, 0x0e, 0xff, 0xd6, 0xdb, 0xfa, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xd2, 0xe0, 0x0a, 0xfd, 0x1b, 0x00, 0x00,
}

func (m *AddFrdSNInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFrdSNInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFrdSNInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SetSn != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.SetSn))
		i--
		dAtA[i] = 0x10
	}
	if m.NotSeeDynamic != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.NotSeeDynamic))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlagInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlagInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlagInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GrpMsgGetC2CInviteJoinGroup != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GrpMsgGetC2CInviteJoinGroup))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.GrpMsgGetDisbandedByAdmin != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GrpMsgGetDisbandedByAdmin))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.GrpMsgMaskInviteAutoJoin != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GrpMsgMaskInviteAutoJoin))
		i--
		dAtA[i] = 0x78
	}
	if m.GrpMsgSupportInviteAutoJoin != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GrpMsgSupportInviteAutoJoin))
		i--
		dAtA[i] = 0x70
	}
	if m.GrpMsgGetQuitPayGroupMsgFlag != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GrpMsgGetQuitPayGroupMsgFlag))
		i--
		dAtA[i] = 0x68
	}
	if m.GrpMsgGetTransferGroupMsgFlag != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GrpMsgGetTransferGroupMsgFlag))
		i--
		dAtA[i] = 0x60
	}
	if m.GrpMsgNeedAutoAdminWording != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GrpMsgNeedAutoAdminWording))
		i--
		dAtA[i] = 0x58
	}
	if m.FrdMsgUint32NeedAllUnreadMsg != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FrdMsgUint32NeedAllUnreadMsg))
		i--
		dAtA[i] = 0x50
	}
	if m.FrdMsgNeedWaitingMsg != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FrdMsgNeedWaitingMsg))
		i--
		dAtA[i] = 0x48
	}
	if m.GrpMsgNotAllowJoinGrpInviteNotFrd != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GrpMsgNotAllowJoinGrpInviteNotFrd))
		i--
		dAtA[i] = 0x40
	}
	if m.FrdMsgDiscuss2ManyChat != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FrdMsgDiscuss2ManyChat))
		i--
		dAtA[i] = 0x38
	}
	if m.GrpMsgGetPayInGroup != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GrpMsgGetPayInGroup))
		i--
		dAtA[i] = 0x30
	}
	if m.GrpMsgGetOfficialAccount != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GrpMsgGetOfficialAccount))
		i--
		dAtA[i] = 0x28
	}
	if m.FrdMsgGetBusiCard != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FrdMsgGetBusiCard))
		i--
		dAtA[i] = 0x20
	}
	if m.GrpMsgWordingDown != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GrpMsgWordingDown))
		i--
		dAtA[i] = 0x18
	}
	if m.GrpMsgHiddenGrp != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GrpMsgHiddenGrp))
		i--
		dAtA[i] = 0x10
	}
	if m.GrpMsgKickAdmin != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GrpMsgKickAdmin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FriendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgBlacklist) > 0 {
		i -= len(m.MsgBlacklist)
		copy(dAtA[i:], m.MsgBlacklist)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgBlacklist)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgJointFriend) > 0 {
		i -= len(m.MsgJointFriend)
		copy(dAtA[i:], m.MsgJointFriend)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgJointFriend)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SGroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SGroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppPrivilegeFlag != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.AppPrivilegeFlag))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MsgOtherAdminDone) > 0 {
		i -= len(m.MsgOtherAdminDone)
		copy(dAtA[i:], m.MsgOtherAdminDone)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgOtherAdminDone)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MsgDetailAlert) > 0 {
		i -= len(m.MsgDetailAlert)
		copy(dAtA[i:], m.MsgDetailAlert)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgDetailAlert)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MsgAlert) > 0 {
		i -= len(m.MsgAlert)
		copy(dAtA[i:], m.MsgAlert)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgAlert)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DisplayAction != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.DisplayAction))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupAuthType != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GroupAuthType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgInviteExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInviteExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInviteExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WaitState != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.WaitState))
		i--
		dAtA[i] = 0x18
	}
	if m.SrcCode != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.SrcCode))
		i--
		dAtA[i] = 0x10
	}
	if m.SrcType != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.SrcType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPayGroupExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayGroupExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayGroupExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QuitGrpTime != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.QuitGrpTime))
		i--
		dAtA[i] = 0x10
	}
	if m.JoinGrpTime != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.JoinGrpTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqNextSystemMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqNextSystemMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqNextSystemMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FriendMsgTypeFlag != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FriendMsgTypeFlag))
		i--
		dAtA[i] = 0x40
	}
	if m.Version != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x38
	}
	if m.Language != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x30
	}
	if m.Flag != nil {
		{
			size, err := m.Flag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Checktype != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Checktype))
		i--
		dAtA[i] = 0x20
	}
	if m.FollowingGroupSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FollowingGroupSeq))
		i--
		dAtA[i] = 0x18
	}
	if m.FollowingFriendSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FollowingFriendSeq))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgNum != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.MsgNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqSystemMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSystemMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSystemMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Language != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x28
	}
	if m.Version != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if m.LatestGroupSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.LatestGroupSeq))
		i--
		dAtA[i] = 0x18
	}
	if m.LatestFriendSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.LatestFriendSeq))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgNum != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.MsgNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqSystemMsgAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSystemMsgAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSystemMsgAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Language != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x48
	}
	if m.ActionInfo != nil {
		{
			size, err := m.ActionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.GroupMsgType != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GroupMsgType))
		i--
		dAtA[i] = 0x38
	}
	if m.SubSrcId != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.SubSrcId))
		i--
		dAtA[i] = 0x30
	}
	if m.SrcId != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.SrcId))
		i--
		dAtA[i] = 0x28
	}
	if m.SubType != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.SubType))
		i--
		dAtA[i] = 0x20
	}
	if m.ReqUin != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.ReqUin))
		i--
		dAtA[i] = 0x18
	}
	if m.MsgSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.MsgSeq))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgType != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqSystemMsgNew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSystemMsgNew) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSystemMsgNew) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FriendMsgTypeFlag != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FriendMsgTypeFlag))
		i--
		dAtA[i] = 0x50
	}
	if m.IsGetGrpRibbon {
		i--
		if m.IsGetGrpRibbon {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsGetFrdRibbon {
		i--
		if m.IsGetFrdRibbon {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Language != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x38
	}
	if m.Flag != nil {
		{
			size, err := m.Flag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Checktype != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Checktype))
		i--
		dAtA[i] = 0x28
	}
	if m.Version != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if m.LatestGroupSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.LatestGroupSeq))
		i--
		dAtA[i] = 0x18
	}
	if m.LatestFriendSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.LatestFriendSeq))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgNum != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.MsgNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqSystemMsgRead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqSystemMsgRead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqSystemMsgRead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Checktype != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Checktype))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.LatestGroupSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.LatestGroupSeq))
		i--
		dAtA[i] = 0x10
	}
	if m.LatestFriendSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.LatestFriendSeq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RspHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RspHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RspHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgFail) > 0 {
		i -= len(m.MsgFail)
		copy(dAtA[i:], m.MsgFail)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgFail)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RspNextSystemMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RspNextSystemMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RspNextSystemMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnReadCount3 != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.UnReadCount3))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if len(m.UndecidForQim) > 0 {
		i -= len(m.UndecidForQim)
		copy(dAtA[i:], m.UndecidForQim)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.UndecidForQim)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.GameNick) > 0 {
		i -= len(m.GameNick)
		copy(dAtA[i:], m.GameNick)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.GameNick)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.Checktype != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Checktype))
		i--
		dAtA[i] = 0x28
	}
	if m.FollowingGroupSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FollowingGroupSeq))
		i--
		dAtA[i] = 0x20
	}
	if m.FollowingFriendSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FollowingFriendSeq))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RspSystemMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RspSystemMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RspSystemMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgDisplay) > 0 {
		i -= len(m.MsgDisplay)
		copy(dAtA[i:], m.MsgDisplay)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgDisplay)))
		i--
		dAtA[i] = 0x42
	}
	if m.FollowingGroupSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FollowingGroupSeq))
		i--
		dAtA[i] = 0x38
	}
	if m.FollowingFriendSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FollowingFriendSeq))
		i--
		dAtA[i] = 0x30
	}
	if m.LatestGroupSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.LatestGroupSeq))
		i--
		dAtA[i] = 0x28
	}
	if m.LatestFriendSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.LatestFriendSeq))
		i--
		dAtA[i] = 0x20
	}
	if m.UnreadCount != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.UnreadCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RspSystemMsgAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RspSystemMsgAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RspSystemMsgAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemarkResult != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.RemarkResult))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MsgInvalidDecided) > 0 {
		i -= len(m.MsgInvalidDecided)
		copy(dAtA[i:], m.MsgInvalidDecided)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgInvalidDecided)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MsgDetail) > 0 {
		i -= len(m.MsgDetail)
		copy(dAtA[i:], m.MsgDetail)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgDetail)))
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RspSystemMsgNew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RspSystemMsgNew) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RspSystemMsgNew) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnReadCount3 != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.UnReadCount3))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if len(m.UndecidForQim) > 0 {
		i -= len(m.UndecidForQim)
		copy(dAtA[i:], m.UndecidForQim)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.UndecidForQim)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.GameNick) > 0 {
		i -= len(m.GameNick)
		copy(dAtA[i:], m.GameNick)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.GameNick)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.Checktype != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Checktype))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Over != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Over))
		i--
		dAtA[i] = 0x78
	}
	if len(m.GrpMsgDisplay) > 0 {
		i -= len(m.GrpMsgDisplay)
		copy(dAtA[i:], m.GrpMsgDisplay)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.GrpMsgDisplay)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.MsgDisplay) > 0 {
		i -= len(m.MsgDisplay)
		copy(dAtA[i:], m.MsgDisplay)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgDisplay)))
		i--
		dAtA[i] = 0x6a
	}
	if m.MsgRibbonGroup != nil {
		{
			size, err := m.MsgRibbonGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.MsgRibbonFriend != nil {
		{
			size, err := m.MsgRibbonFriend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Groupmsgs) > 0 {
		for iNdEx := len(m.Groupmsgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groupmsgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Friendmsgs) > 0 {
		for iNdEx := len(m.Friendmsgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Friendmsgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.FollowingGroupSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FollowingGroupSeq))
		i--
		dAtA[i] = 0x38
	}
	if m.FollowingFriendSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.FollowingFriendSeq))
		i--
		dAtA[i] = 0x30
	}
	if m.LatestGroupSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.LatestGroupSeq))
		i--
		dAtA[i] = 0x28
	}
	if m.LatestFriendSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.LatestFriendSeq))
		i--
		dAtA[i] = 0x20
	}
	if m.UnreadGroupCount != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.UnreadGroupCount))
		i--
		dAtA[i] = 0x18
	}
	if m.UnreadFriendCount != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.UnreadFriendCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RspSystemMsgRead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RspSystemMsgRead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RspSystemMsgRead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Checktype != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Checktype))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StructMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StructMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StructMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if m.UnreadFlag != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.UnreadFlag))
		i--
		dAtA[i] = 0x30
	}
	if m.ReqUin != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.ReqUin))
		i--
		dAtA[i] = 0x28
	}
	if m.MsgTime != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.MsgTime))
		i--
		dAtA[i] = 0x20
	}
	if m.MsgSeq != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.MsgSeq))
		i--
		dAtA[i] = 0x18
	}
	if m.MsgType != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SystemMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CardSwitch != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.CardSwitch))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if m.C2CInviteJoinGroupFlag != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.C2CInviteJoinGroupFlag))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa8
	}
	if m.ReqUinAge != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.ReqUinAge))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa0
	}
	if m.ReqUinGender != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.ReqUinGender))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
	}
	if len(m.ActionUinRemark) > 0 {
		i -= len(m.ActionUinRemark)
		copy(dAtA[i:], m.ActionUinRemark)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.ActionUinRemark)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	if len(m.ActionUinQqNick) > 0 {
		i -= len(m.ActionUinQqNick)
		copy(dAtA[i:], m.ActionUinQqNick)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.ActionUinQqNick)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ReqUinPreRemark) > 0 {
		i -= len(m.ReqUinPreRemark)
		copy(dAtA[i:], m.ReqUinPreRemark)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.ReqUinPreRemark)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	if len(m.EimGroupIdName) > 0 {
		i -= len(m.EimGroupIdName)
		copy(dAtA[i:], m.EimGroupIdName)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.EimGroupIdName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	if len(m.ReqUinBusinessCard) > 0 {
		i -= len(m.ReqUinBusinessCard)
		copy(dAtA[i:], m.ReqUinBusinessCard)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.ReqUinBusinessCard)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if len(m.CloneUinNick) > 0 {
		i -= len(m.CloneUinNick)
		copy(dAtA[i:], m.CloneUinNick)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.CloneUinNick)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if len(m.PicUrl) > 0 {
		i -= len(m.PicUrl)
		copy(dAtA[i:], m.PicUrl)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.PicUrl)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	if len(m.ActorUinNick) > 0 {
		i -= len(m.ActorUinNick)
		copy(dAtA[i:], m.ActorUinNick)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.ActorUinNick)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	if m.GroupExtFlag != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GroupExtFlag))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if len(m.MsgDetail) > 0 {
		i -= len(m.MsgDetail)
		copy(dAtA[i:], m.MsgDetail)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgDetail)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if len(m.MsgQna) > 0 {
		i -= len(m.MsgQna)
		copy(dAtA[i:], m.MsgQna)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgQna)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ActionUinNick) > 0 {
		i -= len(m.ActionUinNick)
		copy(dAtA[i:], m.ActionUinNick)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.ActionUinNick)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if len(m.ReqUinNick) > 0 {
		i -= len(m.ReqUinNick)
		copy(dAtA[i:], m.ReqUinNick)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.ReqUinNick)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if m.ReqUinFaceid != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.ReqUinFaceid))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if len(m.NameMore) > 0 {
		i -= len(m.NameMore)
		copy(dAtA[i:], m.NameMore)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.NameMore)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if len(m.WarningTips) > 0 {
		i -= len(m.WarningTips)
		copy(dAtA[i:], m.WarningTips)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.WarningTips)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.DoubtFlag != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.DoubtFlag))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.GroupOwnerUin != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GroupOwnerUin))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.GroupFlagext3 != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GroupFlagext3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if len(m.GameMsg) > 0 {
		i -= len(m.GameMsg)
		copy(dAtA[i:], m.GameMsg)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.GameMsg)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.GameNick) > 0 {
		i -= len(m.GameNick)
		copy(dAtA[i:], m.GameNick)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.GameNick)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.SourceFlag != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.SourceFlag))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.MsgPayGroupExtinfo != nil {
		{
			size, err := m.MsgPayGroupExtinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.MsgInviteExtinfo != nil {
		{
			size, err := m.MsgInviteExtinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.EimGroupId != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.EimGroupId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.DiscussUin != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.DiscussUin))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CloneUin != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.CloneUin))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Reqsubtype != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Reqsubtype))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Relation != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Relation))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.MsgAdditionalList) > 0 {
		i -= len(m.MsgAdditionalList)
		copy(dAtA[i:], m.MsgAdditionalList)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgAdditionalList)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.MsgActorDescribe) > 0 {
		i -= len(m.MsgActorDescribe)
		copy(dAtA[i:], m.MsgActorDescribe)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgActorDescribe)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.ActorUin != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.ActorUin))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.GroupInfo != nil {
		{
			size, err := m.GroupInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.FriendInfo != nil {
		{
			size, err := m.FriendInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.GroupInviterRole != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GroupInviterRole))
		i--
		dAtA[i] = 0x68
	}
	if m.GroupMsgType != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GroupMsgType))
		i--
		dAtA[i] = 0x60
	}
	if m.ActionUin != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.ActionUin))
		i--
		dAtA[i] = 0x58
	}
	if m.GroupCode != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GroupCode))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStructmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.SubSrcId != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.SubSrcId))
		i--
		dAtA[i] = 0x40
	}
	if m.SrcId != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.SrcId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MsgDecided) > 0 {
		i -= len(m.MsgDecided)
		copy(dAtA[i:], m.MsgDecided)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgDecided)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MsgSource) > 0 {
		i -= len(m.MsgSource)
		copy(dAtA[i:], m.MsgSource)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgSource)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MsgAdditional) > 0 {
		i -= len(m.MsgAdditional)
		copy(dAtA[i:], m.MsgAdditional)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgAdditional)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MsgDescribe) > 0 {
		i -= len(m.MsgDescribe)
		copy(dAtA[i:], m.MsgDescribe)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgDescribe)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MsgTitle) > 0 {
		i -= len(m.MsgTitle)
		copy(dAtA[i:], m.MsgTitle)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.MsgTitle)))
		i--
		dAtA[i] = 0x12
	}
	if m.SubType != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.SubType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SystemMsgAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemMsgAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemMsgAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DetailName) > 0 {
		i -= len(m.DetailName)
		copy(dAtA[i:], m.DetailName)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.DetailName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ActionInfo != nil {
		{
			size, err := m.ActionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Action != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SystemMsgActionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemMsgActionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemMsgActionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddFrdSNInfo != nil {
		{
			size, err := m.AddFrdSNInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStructmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.Blacklist {
		i--
		if m.Blacklist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.GroupId != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintStructmsg(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupCode != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.GroupCode))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintStructmsg(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStructmsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovStructmsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddFrdSNInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotSeeDynamic != 0 {
		n += 1 + sovStructmsg(uint64(m.NotSeeDynamic))
	}
	if m.SetSn != 0 {
		n += 1 + sovStructmsg(uint64(m.SetSn))
	}
	return n
}

func (m *FlagInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GrpMsgKickAdmin != 0 {
		n += 1 + sovStructmsg(uint64(m.GrpMsgKickAdmin))
	}
	if m.GrpMsgHiddenGrp != 0 {
		n += 1 + sovStructmsg(uint64(m.GrpMsgHiddenGrp))
	}
	if m.GrpMsgWordingDown != 0 {
		n += 1 + sovStructmsg(uint64(m.GrpMsgWordingDown))
	}
	if m.FrdMsgGetBusiCard != 0 {
		n += 1 + sovStructmsg(uint64(m.FrdMsgGetBusiCard))
	}
	if m.GrpMsgGetOfficialAccount != 0 {
		n += 1 + sovStructmsg(uint64(m.GrpMsgGetOfficialAccount))
	}
	if m.GrpMsgGetPayInGroup != 0 {
		n += 1 + sovStructmsg(uint64(m.GrpMsgGetPayInGroup))
	}
	if m.FrdMsgDiscuss2ManyChat != 0 {
		n += 1 + sovStructmsg(uint64(m.FrdMsgDiscuss2ManyChat))
	}
	if m.GrpMsgNotAllowJoinGrpInviteNotFrd != 0 {
		n += 1 + sovStructmsg(uint64(m.GrpMsgNotAllowJoinGrpInviteNotFrd))
	}
	if m.FrdMsgNeedWaitingMsg != 0 {
		n += 1 + sovStructmsg(uint64(m.FrdMsgNeedWaitingMsg))
	}
	if m.FrdMsgUint32NeedAllUnreadMsg != 0 {
		n += 1 + sovStructmsg(uint64(m.FrdMsgUint32NeedAllUnreadMsg))
	}
	if m.GrpMsgNeedAutoAdminWording != 0 {
		n += 1 + sovStructmsg(uint64(m.GrpMsgNeedAutoAdminWording))
	}
	if m.GrpMsgGetTransferGroupMsgFlag != 0 {
		n += 1 + sovStructmsg(uint64(m.GrpMsgGetTransferGroupMsgFlag))
	}
	if m.GrpMsgGetQuitPayGroupMsgFlag != 0 {
		n += 1 + sovStructmsg(uint64(m.GrpMsgGetQuitPayGroupMsgFlag))
	}
	if m.GrpMsgSupportInviteAutoJoin != 0 {
		n += 1 + sovStructmsg(uint64(m.GrpMsgSupportInviteAutoJoin))
	}
	if m.GrpMsgMaskInviteAutoJoin != 0 {
		n += 1 + sovStructmsg(uint64(m.GrpMsgMaskInviteAutoJoin))
	}
	if m.GrpMsgGetDisbandedByAdmin != 0 {
		n += 2 + sovStructmsg(uint64(m.GrpMsgGetDisbandedByAdmin))
	}
	if m.GrpMsgGetC2CInviteJoinGroup != 0 {
		n += 2 + sovStructmsg(uint64(m.GrpMsgGetC2CInviteJoinGroup))
	}
	return n
}

func (m *FriendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgJointFriend)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	l = len(m.MsgBlacklist)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	return n
}

func (m *SGroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupAuthType != 0 {
		n += 1 + sovStructmsg(uint64(m.GroupAuthType))
	}
	if m.DisplayAction != 0 {
		n += 1 + sovStructmsg(uint64(m.DisplayAction))
	}
	l = len(m.MsgAlert)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	l = len(m.MsgDetailAlert)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	l = len(m.MsgOtherAdminDone)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.AppPrivilegeFlag != 0 {
		n += 1 + sovStructmsg(uint64(m.AppPrivilegeFlag))
	}
	return n
}

func (m *MsgInviteExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcType != 0 {
		n += 1 + sovStructmsg(uint64(m.SrcType))
	}
	if m.SrcCode != 0 {
		n += 1 + sovStructmsg(uint64(m.SrcCode))
	}
	if m.WaitState != 0 {
		n += 1 + sovStructmsg(uint64(m.WaitState))
	}
	return n
}

func (m *MsgPayGroupExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinGrpTime != 0 {
		n += 1 + sovStructmsg(uint64(m.JoinGrpTime))
	}
	if m.QuitGrpTime != 0 {
		n += 1 + sovStructmsg(uint64(m.QuitGrpTime))
	}
	return n
}

func (m *ReqNextSystemMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgNum != 0 {
		n += 1 + sovStructmsg(uint64(m.MsgNum))
	}
	if m.FollowingFriendSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.FollowingFriendSeq))
	}
	if m.FollowingGroupSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.FollowingGroupSeq))
	}
	if m.Checktype != 0 {
		n += 1 + sovStructmsg(uint64(m.Checktype))
	}
	if m.Flag != nil {
		l = m.Flag.Size()
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.Language != 0 {
		n += 1 + sovStructmsg(uint64(m.Language))
	}
	if m.Version != 0 {
		n += 1 + sovStructmsg(uint64(m.Version))
	}
	if m.FriendMsgTypeFlag != 0 {
		n += 1 + sovStructmsg(uint64(m.FriendMsgTypeFlag))
	}
	return n
}

func (m *ReqSystemMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgNum != 0 {
		n += 1 + sovStructmsg(uint64(m.MsgNum))
	}
	if m.LatestFriendSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.LatestFriendSeq))
	}
	if m.LatestGroupSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.LatestGroupSeq))
	}
	if m.Version != 0 {
		n += 1 + sovStructmsg(uint64(m.Version))
	}
	if m.Language != 0 {
		n += 1 + sovStructmsg(uint64(m.Language))
	}
	return n
}

func (m *ReqSystemMsgAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgType != 0 {
		n += 1 + sovStructmsg(uint64(m.MsgType))
	}
	if m.MsgSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.MsgSeq))
	}
	if m.ReqUin != 0 {
		n += 1 + sovStructmsg(uint64(m.ReqUin))
	}
	if m.SubType != 0 {
		n += 1 + sovStructmsg(uint64(m.SubType))
	}
	if m.SrcId != 0 {
		n += 1 + sovStructmsg(uint64(m.SrcId))
	}
	if m.SubSrcId != 0 {
		n += 1 + sovStructmsg(uint64(m.SubSrcId))
	}
	if m.GroupMsgType != 0 {
		n += 1 + sovStructmsg(uint64(m.GroupMsgType))
	}
	if m.ActionInfo != nil {
		l = m.ActionInfo.Size()
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.Language != 0 {
		n += 1 + sovStructmsg(uint64(m.Language))
	}
	return n
}

func (m *ReqSystemMsgNew) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgNum != 0 {
		n += 1 + sovStructmsg(uint64(m.MsgNum))
	}
	if m.LatestFriendSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.LatestFriendSeq))
	}
	if m.LatestGroupSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.LatestGroupSeq))
	}
	if m.Version != 0 {
		n += 1 + sovStructmsg(uint64(m.Version))
	}
	if m.Checktype != 0 {
		n += 1 + sovStructmsg(uint64(m.Checktype))
	}
	if m.Flag != nil {
		l = m.Flag.Size()
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.Language != 0 {
		n += 1 + sovStructmsg(uint64(m.Language))
	}
	if m.IsGetFrdRibbon {
		n += 2
	}
	if m.IsGetGrpRibbon {
		n += 2
	}
	if m.FriendMsgTypeFlag != 0 {
		n += 1 + sovStructmsg(uint64(m.FriendMsgTypeFlag))
	}
	return n
}

func (m *ReqSystemMsgRead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestFriendSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.LatestFriendSeq))
	}
	if m.LatestGroupSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.LatestGroupSeq))
	}
	if m.Type != 0 {
		n += 1 + sovStructmsg(uint64(m.Type))
	}
	if m.Checktype != 0 {
		n += 1 + sovStructmsg(uint64(m.Checktype))
	}
	return n
}

func (m *RspHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovStructmsg(uint64(m.Result))
	}
	l = len(m.MsgFail)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	return n
}

func (m *RspNextSystemMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovStructmsg(uint64(l))
		}
	}
	if m.FollowingFriendSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.FollowingFriendSeq))
	}
	if m.FollowingGroupSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.FollowingGroupSeq))
	}
	if m.Checktype != 0 {
		n += 1 + sovStructmsg(uint64(m.Checktype))
	}
	l = len(m.GameNick)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.UndecidForQim)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	if m.UnReadCount3 != 0 {
		n += 2 + sovStructmsg(uint64(m.UnReadCount3))
	}
	return n
}

func (m *RspSystemMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovStructmsg(uint64(l))
		}
	}
	if m.UnreadCount != 0 {
		n += 1 + sovStructmsg(uint64(m.UnreadCount))
	}
	if m.LatestFriendSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.LatestFriendSeq))
	}
	if m.LatestGroupSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.LatestGroupSeq))
	}
	if m.FollowingFriendSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.FollowingFriendSeq))
	}
	if m.FollowingGroupSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.FollowingGroupSeq))
	}
	l = len(m.MsgDisplay)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	return n
}

func (m *RspSystemMsgAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovStructmsg(uint64(l))
	}
	l = len(m.MsgDetail)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovStructmsg(uint64(m.Type))
	}
	l = len(m.MsgInvalidDecided)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.RemarkResult != 0 {
		n += 1 + sovStructmsg(uint64(m.RemarkResult))
	}
	return n
}

func (m *RspSystemMsgNew) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.UnreadFriendCount != 0 {
		n += 1 + sovStructmsg(uint64(m.UnreadFriendCount))
	}
	if m.UnreadGroupCount != 0 {
		n += 1 + sovStructmsg(uint64(m.UnreadGroupCount))
	}
	if m.LatestFriendSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.LatestFriendSeq))
	}
	if m.LatestGroupSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.LatestGroupSeq))
	}
	if m.FollowingFriendSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.FollowingFriendSeq))
	}
	if m.FollowingGroupSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.FollowingGroupSeq))
	}
	if len(m.Friendmsgs) > 0 {
		for _, e := range m.Friendmsgs {
			l = e.Size()
			n += 1 + l + sovStructmsg(uint64(l))
		}
	}
	if len(m.Groupmsgs) > 0 {
		for _, e := range m.Groupmsgs {
			l = e.Size()
			n += 1 + l + sovStructmsg(uint64(l))
		}
	}
	if m.MsgRibbonFriend != nil {
		l = m.MsgRibbonFriend.Size()
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.MsgRibbonGroup != nil {
		l = m.MsgRibbonGroup.Size()
		n += 1 + l + sovStructmsg(uint64(l))
	}
	l = len(m.MsgDisplay)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	l = len(m.GrpMsgDisplay)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.Over != 0 {
		n += 1 + sovStructmsg(uint64(m.Over))
	}
	if m.Checktype != 0 {
		n += 2 + sovStructmsg(uint64(m.Checktype))
	}
	l = len(m.GameNick)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.UndecidForQim)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	if m.UnReadCount3 != 0 {
		n += 2 + sovStructmsg(uint64(m.UnReadCount3))
	}
	return n
}

func (m *RspSystemMsgRead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovStructmsg(uint64(m.Type))
	}
	if m.Checktype != 0 {
		n += 1 + sovStructmsg(uint64(m.Checktype))
	}
	return n
}

func (m *StructMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovStructmsg(uint64(m.Version))
	}
	if m.MsgType != 0 {
		n += 1 + sovStructmsg(uint64(m.MsgType))
	}
	if m.MsgSeq != 0 {
		n += 1 + sovStructmsg(uint64(m.MsgSeq))
	}
	if m.MsgTime != 0 {
		n += 1 + sovStructmsg(uint64(m.MsgTime))
	}
	if m.ReqUin != 0 {
		n += 1 + sovStructmsg(uint64(m.ReqUin))
	}
	if m.UnreadFlag != 0 {
		n += 1 + sovStructmsg(uint64(m.UnreadFlag))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 2 + l + sovStructmsg(uint64(l))
	}
	return n
}

func (m *SystemMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubType != 0 {
		n += 1 + sovStructmsg(uint64(m.SubType))
	}
	l = len(m.MsgTitle)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	l = len(m.MsgDescribe)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	l = len(m.MsgAdditional)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	l = len(m.MsgSource)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	l = len(m.MsgDecided)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.SrcId != 0 {
		n += 1 + sovStructmsg(uint64(m.SrcId))
	}
	if m.SubSrcId != 0 {
		n += 1 + sovStructmsg(uint64(m.SubSrcId))
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovStructmsg(uint64(l))
		}
	}
	if m.GroupCode != 0 {
		n += 1 + sovStructmsg(uint64(m.GroupCode))
	}
	if m.ActionUin != 0 {
		n += 1 + sovStructmsg(uint64(m.ActionUin))
	}
	if m.GroupMsgType != 0 {
		n += 1 + sovStructmsg(uint64(m.GroupMsgType))
	}
	if m.GroupInviterRole != 0 {
		n += 1 + sovStructmsg(uint64(m.GroupInviterRole))
	}
	if m.FriendInfo != nil {
		l = m.FriendInfo.Size()
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.GroupInfo != nil {
		l = m.GroupInfo.Size()
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.ActorUin != 0 {
		n += 2 + sovStructmsg(uint64(m.ActorUin))
	}
	l = len(m.MsgActorDescribe)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.MsgAdditionalList)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	if m.Relation != 0 {
		n += 2 + sovStructmsg(uint64(m.Relation))
	}
	if m.Reqsubtype != 0 {
		n += 2 + sovStructmsg(uint64(m.Reqsubtype))
	}
	if m.CloneUin != 0 {
		n += 2 + sovStructmsg(uint64(m.CloneUin))
	}
	if m.DiscussUin != 0 {
		n += 2 + sovStructmsg(uint64(m.DiscussUin))
	}
	if m.EimGroupId != 0 {
		n += 2 + sovStructmsg(uint64(m.EimGroupId))
	}
	if m.MsgInviteExtinfo != nil {
		l = m.MsgInviteExtinfo.Size()
		n += 2 + l + sovStructmsg(uint64(l))
	}
	if m.MsgPayGroupExtinfo != nil {
		l = m.MsgPayGroupExtinfo.Size()
		n += 2 + l + sovStructmsg(uint64(l))
	}
	if m.SourceFlag != 0 {
		n += 2 + sovStructmsg(uint64(m.SourceFlag))
	}
	l = len(m.GameNick)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.GameMsg)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	if m.GroupFlagext3 != 0 {
		n += 2 + sovStructmsg(uint64(m.GroupFlagext3))
	}
	if m.GroupOwnerUin != 0 {
		n += 2 + sovStructmsg(uint64(m.GroupOwnerUin))
	}
	if m.DoubtFlag != 0 {
		n += 2 + sovStructmsg(uint64(m.DoubtFlag))
	}
	l = len(m.WarningTips)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.NameMore)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	if m.ReqUinFaceid != 0 {
		n += 2 + sovStructmsg(uint64(m.ReqUinFaceid))
	}
	l = len(m.ReqUinNick)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.ActionUinNick)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.MsgQna)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.MsgDetail)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	if m.GroupExtFlag != 0 {
		n += 2 + sovStructmsg(uint64(m.GroupExtFlag))
	}
	l = len(m.ActorUinNick)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.PicUrl)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.CloneUinNick)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.ReqUinBusinessCard)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.EimGroupIdName)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.ReqUinPreRemark)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.ActionUinQqNick)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	l = len(m.ActionUinRemark)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	if m.ReqUinGender != 0 {
		n += 2 + sovStructmsg(uint64(m.ReqUinGender))
	}
	if m.ReqUinAge != 0 {
		n += 2 + sovStructmsg(uint64(m.ReqUinAge))
	}
	if m.C2CInviteJoinGroupFlag != 0 {
		n += 2 + sovStructmsg(uint64(m.C2CInviteJoinGroupFlag))
	}
	if m.CardSwitch != 0 {
		n += 2 + sovStructmsg(uint64(m.CardSwitch))
	}
	return n
}

func (m *SystemMsgAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovStructmsg(uint64(m.Action))
	}
	if m.ActionInfo != nil {
		l = m.ActionInfo.Size()
		n += 1 + l + sovStructmsg(uint64(l))
	}
	l = len(m.DetailName)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	return n
}

func (m *SystemMsgActionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovStructmsg(uint64(m.Type))
	}
	if m.GroupCode != 0 {
		n += 1 + sovStructmsg(uint64(m.GroupCode))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovStructmsg(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	if m.GroupId != 0 {
		n += 2 + sovStructmsg(uint64(m.GroupId))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 2 + l + sovStructmsg(uint64(l))
	}
	if m.Blacklist {
		n += 3
	}
	if m.AddFrdSNInfo != nil {
		l = m.AddFrdSNInfo.Size()
		n += 2 + l + sovStructmsg(uint64(l))
	}
	return n
}

func sovStructmsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStructmsg(x uint64) (n int) {
	return sovStructmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddFrdSNInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFrdSNInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFrdSNInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotSeeDynamic", wireType)
			}
			m.NotSeeDynamic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotSeeDynamic |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetSn", wireType)
			}
			m.SetSn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetSn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlagInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlagInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlagInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgKickAdmin", wireType)
			}
			m.GrpMsgKickAdmin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpMsgKickAdmin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgHiddenGrp", wireType)
			}
			m.GrpMsgHiddenGrp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpMsgHiddenGrp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgWordingDown", wireType)
			}
			m.GrpMsgWordingDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpMsgWordingDown |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrdMsgGetBusiCard", wireType)
			}
			m.FrdMsgGetBusiCard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrdMsgGetBusiCard |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgGetOfficialAccount", wireType)
			}
			m.GrpMsgGetOfficialAccount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpMsgGetOfficialAccount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgGetPayInGroup", wireType)
			}
			m.GrpMsgGetPayInGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpMsgGetPayInGroup |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrdMsgDiscuss2ManyChat", wireType)
			}
			m.FrdMsgDiscuss2ManyChat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrdMsgDiscuss2ManyChat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgNotAllowJoinGrpInviteNotFrd", wireType)
			}
			m.GrpMsgNotAllowJoinGrpInviteNotFrd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpMsgNotAllowJoinGrpInviteNotFrd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrdMsgNeedWaitingMsg", wireType)
			}
			m.FrdMsgNeedWaitingMsg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrdMsgNeedWaitingMsg |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrdMsgUint32NeedAllUnreadMsg", wireType)
			}
			m.FrdMsgUint32NeedAllUnreadMsg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrdMsgUint32NeedAllUnreadMsg |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgNeedAutoAdminWording", wireType)
			}
			m.GrpMsgNeedAutoAdminWording = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpMsgNeedAutoAdminWording |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgGetTransferGroupMsgFlag", wireType)
			}
			m.GrpMsgGetTransferGroupMsgFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpMsgGetTransferGroupMsgFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgGetQuitPayGroupMsgFlag", wireType)
			}
			m.GrpMsgGetQuitPayGroupMsgFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpMsgGetQuitPayGroupMsgFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgSupportInviteAutoJoin", wireType)
			}
			m.GrpMsgSupportInviteAutoJoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpMsgSupportInviteAutoJoin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgMaskInviteAutoJoin", wireType)
			}
			m.GrpMsgMaskInviteAutoJoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpMsgMaskInviteAutoJoin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgGetDisbandedByAdmin", wireType)
			}
			m.GrpMsgGetDisbandedByAdmin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpMsgGetDisbandedByAdmin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgGetC2CInviteJoinGroup", wireType)
			}
			m.GrpMsgGetC2CInviteJoinGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpMsgGetC2CInviteJoinGroup |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgJointFriend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgJointFriend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBlacklist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgBlacklist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupAuthType", wireType)
			}
			m.GroupAuthType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupAuthType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayAction", wireType)
			}
			m.DisplayAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayAction |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgAlert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgAlert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDetailAlert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgDetailAlert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOtherAdminDone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgOtherAdminDone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppPrivilegeFlag", wireType)
			}
			m.AppPrivilegeFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppPrivilegeFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInviteExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInviteExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInviteExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcType", wireType)
			}
			m.SrcType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcCode", wireType)
			}
			m.SrcCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitState", wireType)
			}
			m.WaitState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPayGroupExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayGroupExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayGroupExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinGrpTime", wireType)
			}
			m.JoinGrpTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinGrpTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuitGrpTime", wireType)
			}
			m.QuitGrpTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuitGrpTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqNextSystemMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqNextSystemMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqNextSystemMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgNum", wireType)
			}
			m.MsgNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingFriendSeq", wireType)
			}
			m.FollowingFriendSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowingFriendSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingGroupSeq", wireType)
			}
			m.FollowingGroupSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowingGroupSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checktype", wireType)
			}
			m.Checktype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checktype |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag == nil {
				m.Flag = &FlagInfo{}
			}
			if err := m.Flag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendMsgTypeFlag", wireType)
			}
			m.FriendMsgTypeFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendMsgTypeFlag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSystemMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSystemMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSystemMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgNum", wireType)
			}
			m.MsgNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFriendSeq", wireType)
			}
			m.LatestFriendSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestFriendSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestGroupSeq", wireType)
			}
			m.LatestGroupSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestGroupSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSystemMsgAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSystemMsgAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSystemMsgAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSeq", wireType)
			}
			m.MsgSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqUin", wireType)
			}
			m.ReqUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqUin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcId", wireType)
			}
			m.SrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubSrcId", wireType)
			}
			m.SubSrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubSrcId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMsgType", wireType)
			}
			m.GroupMsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupMsgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionInfo == nil {
				m.ActionInfo = &SystemMsgActionInfo{}
			}
			if err := m.ActionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSystemMsgNew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSystemMsgNew: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSystemMsgNew: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgNum", wireType)
			}
			m.MsgNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFriendSeq", wireType)
			}
			m.LatestFriendSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestFriendSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestGroupSeq", wireType)
			}
			m.LatestGroupSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestGroupSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checktype", wireType)
			}
			m.Checktype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checktype |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flag == nil {
				m.Flag = &FlagInfo{}
			}
			if err := m.Flag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGetFrdRibbon", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGetFrdRibbon = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGetGrpRibbon", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGetGrpRibbon = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendMsgTypeFlag", wireType)
			}
			m.FriendMsgTypeFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendMsgTypeFlag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqSystemMsgRead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqSystemMsgRead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqSystemMsgRead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFriendSeq", wireType)
			}
			m.LatestFriendSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestFriendSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestGroupSeq", wireType)
			}
			m.LatestGroupSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestGroupSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checktype", wireType)
			}
			m.Checktype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checktype |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RspHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RspHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RspHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgFail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgFail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RspNextSystemMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RspNextSystemMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RspNextSystemMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RspHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &StructMsg{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingFriendSeq", wireType)
			}
			m.FollowingFriendSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowingFriendSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingGroupSeq", wireType)
			}
			m.FollowingGroupSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowingGroupSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checktype", wireType)
			}
			m.Checktype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checktype |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndecidForQim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UndecidForQim = append(m.UndecidForQim[:0], dAtA[iNdEx:postIndex]...)
			if m.UndecidForQim == nil {
				m.UndecidForQim = []byte{}
			}
			iNdEx = postIndex
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnReadCount3", wireType)
			}
			m.UnReadCount3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnReadCount3 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RspSystemMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RspSystemMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RspSystemMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RspHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &StructMsg{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFriendSeq", wireType)
			}
			m.LatestFriendSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestFriendSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestGroupSeq", wireType)
			}
			m.LatestGroupSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestGroupSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingFriendSeq", wireType)
			}
			m.FollowingFriendSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowingFriendSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingGroupSeq", wireType)
			}
			m.FollowingGroupSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowingGroupSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDisplay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgDisplay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RspSystemMsgAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RspSystemMsgAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RspSystemMsgAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RspHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDetail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgDetail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgInvalidDecided", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgInvalidDecided = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemarkResult", wireType)
			}
			m.RemarkResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemarkResult |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RspSystemMsgNew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RspSystemMsgNew: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RspSystemMsgNew: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RspHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadFriendCount", wireType)
			}
			m.UnreadFriendCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadFriendCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadGroupCount", wireType)
			}
			m.UnreadGroupCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadGroupCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFriendSeq", wireType)
			}
			m.LatestFriendSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestFriendSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestGroupSeq", wireType)
			}
			m.LatestGroupSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestGroupSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingFriendSeq", wireType)
			}
			m.FollowingFriendSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowingFriendSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingGroupSeq", wireType)
			}
			m.FollowingGroupSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowingGroupSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friendmsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friendmsgs = append(m.Friendmsgs, &StructMsg{})
			if err := m.Friendmsgs[len(m.Friendmsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groupmsgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groupmsgs = append(m.Groupmsgs, &StructMsg{})
			if err := m.Groupmsgs[len(m.Groupmsgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgRibbonFriend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgRibbonFriend == nil {
				m.MsgRibbonFriend = &StructMsg{}
			}
			if err := m.MsgRibbonFriend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgRibbonGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgRibbonGroup == nil {
				m.MsgRibbonGroup = &StructMsg{}
			}
			if err := m.MsgRibbonGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDisplay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgDisplay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpMsgDisplay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrpMsgDisplay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Over", wireType)
			}
			m.Over = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Over |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checktype", wireType)
			}
			m.Checktype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checktype |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndecidForQim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UndecidForQim = append(m.UndecidForQim[:0], dAtA[iNdEx:postIndex]...)
			if m.UndecidForQim == nil {
				m.UndecidForQim = []byte{}
			}
			iNdEx = postIndex
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnReadCount3", wireType)
			}
			m.UnReadCount3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnReadCount3 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RspSystemMsgRead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RspSystemMsgRead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RspSystemMsgRead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &RspHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checktype", wireType)
			}
			m.Checktype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checktype |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StructMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StructMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StructMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSeq", wireType)
			}
			m.MsgSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTime", wireType)
			}
			m.MsgTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqUin", wireType)
			}
			m.ReqUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqUin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadFlag", wireType)
			}
			m.UnreadFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &SystemMsg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDescribe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgDescribe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgAdditional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgAdditional = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDecided", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgDecided = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcId", wireType)
			}
			m.SrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubSrcId", wireType)
			}
			m.SubSrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubSrcId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &SystemMsgAction{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionUin", wireType)
			}
			m.ActionUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionUin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMsgType", wireType)
			}
			m.GroupMsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupMsgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInviterRole", wireType)
			}
			m.GroupInviterRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupInviterRole |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FriendInfo == nil {
				m.FriendInfo = &FriendInfo{}
			}
			if err := m.FriendInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupInfo == nil {
				m.GroupInfo = &SGroupInfo{}
			}
			if err := m.GroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorUin", wireType)
			}
			m.ActorUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorUin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgActorDescribe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgActorDescribe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgAdditionalList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgAdditionalList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			m.Relation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Relation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reqsubtype", wireType)
			}
			m.Reqsubtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reqsubtype |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloneUin", wireType)
			}
			m.CloneUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CloneUin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscussUin", wireType)
			}
			m.DiscussUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscussUin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EimGroupId", wireType)
			}
			m.EimGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EimGroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgInviteExtinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgInviteExtinfo == nil {
				m.MsgInviteExtinfo = &MsgInviteExt{}
			}
			if err := m.MsgInviteExtinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgPayGroupExtinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgPayGroupExtinfo == nil {
				m.MsgPayGroupExtinfo = &MsgPayGroupExt{}
			}
			if err := m.MsgPayGroupExtinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceFlag", wireType)
			}
			m.SourceFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameNick", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameNick = append(m.GameNick[:0], dAtA[iNdEx:postIndex]...)
			if m.GameNick == nil {
				m.GameNick = []byte{}
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameMsg = append(m.GameMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.GameMsg == nil {
				m.GameMsg = []byte{}
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupFlagext3", wireType)
			}
			m.GroupFlagext3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupFlagext3 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOwnerUin", wireType)
			}
			m.GroupOwnerUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupOwnerUin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubtFlag", wireType)
			}
			m.DoubtFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoubtFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarningTips", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WarningTips = append(m.WarningTips[:0], dAtA[iNdEx:postIndex]...)
			if m.WarningTips == nil {
				m.WarningTips = []byte{}
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameMore", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameMore = append(m.NameMore[:0], dAtA[iNdEx:postIndex]...)
			if m.NameMore == nil {
				m.NameMore = []byte{}
			}
			iNdEx = postIndex
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqUinFaceid", wireType)
			}
			m.ReqUinFaceid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqUinFaceid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqUinNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqUinNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionUinNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionUinNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgQna", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgQna = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDetail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgDetail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupExtFlag", wireType)
			}
			m.GroupExtFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupExtFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorUinNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorUinNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PicUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloneUinNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloneUinNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqUinBusinessCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqUinBusinessCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EimGroupIdName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EimGroupIdName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqUinPreRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqUinPreRemark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionUinQqNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionUinQqNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionUinRemark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionUinRemark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqUinGender", wireType)
			}
			m.ReqUinGender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqUinGender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqUinAge", wireType)
			}
			m.ReqUinAge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqUinAge |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C2CInviteJoinGroupFlag", wireType)
			}
			m.C2CInviteJoinGroupFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C2CInviteJoinGroupFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardSwitch", wireType)
			}
			m.CardSwitch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardSwitch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemMsgAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemMsgAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemMsgAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionInfo == nil {
				m.ActionInfo = &SystemMsgActionInfo{}
			}
			if err := m.ActionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemMsgActionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemMsgActionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemMsgActionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Blacklist = bool(v != 0)
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFrdSNInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStructmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddFrdSNInfo == nil {
				m.AddFrdSNInfo = &AddFrdSNInfo{}
			}
			if err := m.AddFrdSNInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStructmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStructmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStructmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStructmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStructmsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStructmsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStructmsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStructmsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStructmsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStructmsg = fmt.Errorf("proto: unexpected end of group")
)
