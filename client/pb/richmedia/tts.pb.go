// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/pb/richmedia/tts.proto

package richmedia

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TtsRspBody struct {
	RetCode        uint32          `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`
	SessionId      string          `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	OutSeq         uint32          `protobuf:"varint,3,opt,name=out_seq,json=outSeq,proto3" json:"out_seq,omitempty"`
	VoiceData      []*TtsVoiceItem `protobuf:"bytes,4,rep,name=voice_data,json=voiceData,proto3" json:"voice_data,omitempty"`
	Islast         bool            `protobuf:"varint,5,opt,name=islast,proto3" json:"islast,omitempty"`
	PcmSampleRate  uint32          `protobuf:"varint,6,opt,name=pcm_sample_rate,json=pcmSampleRate,proto3" json:"pcm_sample_rate,omitempty"`
	OpusSampleRate uint32          `protobuf:"varint,7,opt,name=opus_sample_rate,json=opusSampleRate,proto3" json:"opus_sample_rate,omitempty"`
	OpusChannels   uint32          `protobuf:"varint,8,opt,name=opus_channels,json=opusChannels,proto3" json:"opus_channels,omitempty"`
	OpusBitRate    uint32          `protobuf:"varint,9,opt,name=opus_bit_rate,json=opusBitRate,proto3" json:"opus_bit_rate,omitempty"`
	OpusFrameSize  uint32          `protobuf:"varint,10,opt,name=opus_frame_size,json=opusFrameSize,proto3" json:"opus_frame_size,omitempty"`
}

func (m *TtsRspBody) Reset()         { *m = TtsRspBody{} }
func (m *TtsRspBody) String() string { return proto.CompactTextString(m) }
func (*TtsRspBody) ProtoMessage()    {}
func (*TtsRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc4fc1b6fe173600, []int{0}
}
func (m *TtsRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TtsRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TtsRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TtsRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TtsRspBody.Merge(m, src)
}
func (m *TtsRspBody) XXX_Size() int {
	return m.Size()
}
func (m *TtsRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_TtsRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_TtsRspBody proto.InternalMessageInfo

func (m *TtsRspBody) GetRetCode() uint32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *TtsRspBody) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *TtsRspBody) GetOutSeq() uint32 {
	if m != nil {
		return m.OutSeq
	}
	return 0
}

func (m *TtsRspBody) GetVoiceData() []*TtsVoiceItem {
	if m != nil {
		return m.VoiceData
	}
	return nil
}

func (m *TtsRspBody) GetIslast() bool {
	if m != nil {
		return m.Islast
	}
	return false
}

func (m *TtsRspBody) GetPcmSampleRate() uint32 {
	if m != nil {
		return m.PcmSampleRate
	}
	return 0
}

func (m *TtsRspBody) GetOpusSampleRate() uint32 {
	if m != nil {
		return m.OpusSampleRate
	}
	return 0
}

func (m *TtsRspBody) GetOpusChannels() uint32 {
	if m != nil {
		return m.OpusChannels
	}
	return 0
}

func (m *TtsRspBody) GetOpusBitRate() uint32 {
	if m != nil {
		return m.OpusBitRate
	}
	return 0
}

func (m *TtsRspBody) GetOpusFrameSize() uint32 {
	if m != nil {
		return m.OpusFrameSize
	}
	return 0
}

type TtsVoiceItem struct {
	Voice []byte `protobuf:"bytes,1,opt,name=voice,proto3" json:"voice,omitempty"`
	Seq   uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *TtsVoiceItem) Reset()         { *m = TtsVoiceItem{} }
func (m *TtsVoiceItem) String() string { return proto.CompactTextString(m) }
func (*TtsVoiceItem) ProtoMessage()    {}
func (*TtsVoiceItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc4fc1b6fe173600, []int{1}
}
func (m *TtsVoiceItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TtsVoiceItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TtsVoiceItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TtsVoiceItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TtsVoiceItem.Merge(m, src)
}
func (m *TtsVoiceItem) XXX_Size() int {
	return m.Size()
}
func (m *TtsVoiceItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TtsVoiceItem.DiscardUnknown(m)
}

var xxx_messageInfo_TtsVoiceItem proto.InternalMessageInfo

func (m *TtsVoiceItem) GetVoice() []byte {
	if m != nil {
		return m.Voice
	}
	return nil
}

func (m *TtsVoiceItem) GetSeq() uint32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func init() {
	proto.RegisterType((*TtsRspBody)(nil), "TtsRspBody")
	proto.RegisterType((*TtsVoiceItem)(nil), "TtsVoiceItem")
}

func init() { proto.RegisterFile("client/pb/richmedia/tts.proto", fileDescriptor_cc4fc1b6fe173600) }

var fileDescriptor_cc4fc1b6fe173600 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x41, 0xab, 0xda, 0x40,
	0x10, 0xc7, 0x8d, 0xd6, 0x68, 0x46, 0x53, 0x65, 0x29, 0xed, 0xf6, 0x60, 0x08, 0x96, 0x4a, 0x0e,
	0x45, 0xa1, 0x85, 0x5e, 0x7a, 0xd3, 0x52, 0xf0, 0x1a, 0xa5, 0x87, 0x5e, 0xc2, 0x9a, 0x4c, 0x71,
	0x21, 0xc9, 0xc6, 0xec, 0x58, 0xa8, 0x9f, 0xa2, 0x1f, 0xab, 0x47, 0x8f, 0x3d, 0x16, 0xbd, 0xbc,
	0x8f, 0xf1, 0xd8, 0x35, 0x3c, 0x7c, 0xb7, 0x9d, 0x1f, 0xbf, 0xfd, 0xef, 0xce, 0x0c, 0x4c, 0xd2,
	0x5c, 0x62, 0x49, 0x8b, 0x6a, 0xb7, 0xa8, 0x65, 0xba, 0x2f, 0x30, 0x93, 0x62, 0x41, 0xa4, 0xe7,
	0x55, 0xad, 0x48, 0x4d, 0x1f, 0xda, 0x00, 0x5b, 0xd2, 0xb1, 0xae, 0x96, 0x2a, 0xfb, 0xcd, 0xde,
	0x42, 0xbf, 0x46, 0x4a, 0x52, 0x95, 0x21, 0x77, 0x42, 0x27, 0xf2, 0xe3, 0x5e, 0x8d, 0xb4, 0x52,
	0x19, 0xb2, 0x09, 0x80, 0x46, 0xad, 0xa5, 0x2a, 0x13, 0x99, 0xf1, 0x76, 0xe8, 0x44, 0x5e, 0xec,
	0x35, 0x64, 0x9d, 0xb1, 0x37, 0xd0, 0x53, 0x47, 0x4a, 0x34, 0x1e, 0x78, 0xc7, 0x5e, 0x74, 0xd5,
	0x91, 0x36, 0x78, 0x60, 0x1f, 0x00, 0x7e, 0x29, 0x99, 0x62, 0x92, 0x09, 0x12, 0xfc, 0x45, 0xd8,
	0x89, 0x06, 0x1f, 0xfd, 0xf9, 0x96, 0xf4, 0x77, 0x43, 0xd7, 0x84, 0x45, 0xec, 0x59, 0xe1, 0xab,
	0x20, 0xc1, 0x5e, 0x83, 0x2b, 0x75, 0x2e, 0x34, 0xf1, 0x6e, 0xe8, 0x44, 0xfd, 0xb8, 0xa9, 0xd8,
	0x0c, 0x46, 0x55, 0x5a, 0x24, 0x5a, 0x14, 0x55, 0x8e, 0x49, 0x2d, 0x08, 0xb9, 0x6b, 0x9f, 0xf1,
	0xab, 0xb4, 0xd8, 0x58, 0x1a, 0x0b, 0x42, 0x16, 0xc1, 0x58, 0x55, 0x47, 0xfd, 0x4c, 0xec, 0x59,
	0xf1, 0xa5, 0xe1, 0x77, 0xe6, 0x3b, 0xf0, 0xad, 0x99, 0xee, 0x45, 0x59, 0x62, 0xae, 0x79, 0xdf,
	0x6a, 0x43, 0x03, 0x57, 0x0d, 0x63, 0xd3, 0x46, 0xda, 0x49, 0xba, 0x65, 0x79, 0x56, 0x1a, 0x18,
	0xb8, 0x94, 0x64, 0x83, 0x66, 0x30, 0xb2, 0xce, 0xcf, 0x5a, 0x14, 0x98, 0x68, 0x79, 0x42, 0x0e,
	0xb7, 0xaf, 0x19, 0xfc, 0xcd, 0xd0, 0x8d, 0x3c, 0xe1, 0xf4, 0x33, 0x0c, 0xef, 0xbb, 0x66, 0xaf,
	0xa0, 0x6b, 0xfb, 0xb6, 0x83, 0x1e, 0xc6, 0xb7, 0x82, 0x8d, 0xa1, 0x63, 0x66, 0xd8, 0xb6, 0x09,
	0xe6, 0xb8, 0x7c, 0xff, 0xf7, 0x12, 0x38, 0xe7, 0x4b, 0xe0, 0xfc, 0xbf, 0x04, 0xce, 0x9f, 0x6b,
	0xd0, 0x3a, 0x5f, 0x83, 0xd6, 0xbf, 0x6b, 0xd0, 0xfa, 0x31, 0x98, 0x7f, 0x79, 0xda, 0xe9, 0xce,
	0xb5, 0x0b, 0xfd, 0xf4, 0x18, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x7c, 0x9d, 0x32, 0xf1, 0x01, 0x00,
	0x00,
}

func (m *TtsRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TtsRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TtsRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OpusFrameSize != 0 {
		i = encodeVarintTts(dAtA, i, uint64(m.OpusFrameSize))
		i--
		dAtA[i] = 0x50
	}
	if m.OpusBitRate != 0 {
		i = encodeVarintTts(dAtA, i, uint64(m.OpusBitRate))
		i--
		dAtA[i] = 0x48
	}
	if m.OpusChannels != 0 {
		i = encodeVarintTts(dAtA, i, uint64(m.OpusChannels))
		i--
		dAtA[i] = 0x40
	}
	if m.OpusSampleRate != 0 {
		i = encodeVarintTts(dAtA, i, uint64(m.OpusSampleRate))
		i--
		dAtA[i] = 0x38
	}
	if m.PcmSampleRate != 0 {
		i = encodeVarintTts(dAtA, i, uint64(m.PcmSampleRate))
		i--
		dAtA[i] = 0x30
	}
	if m.Islast {
		i--
		if m.Islast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.VoiceData) > 0 {
		for iNdEx := len(m.VoiceData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoiceData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.OutSeq != 0 {
		i = encodeVarintTts(dAtA, i, uint64(m.OutSeq))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintTts(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != 0 {
		i = encodeVarintTts(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TtsVoiceItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TtsVoiceItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TtsVoiceItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintTts(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Voice) > 0 {
		i -= len(m.Voice)
		copy(dAtA[i:], m.Voice)
		i = encodeVarintTts(dAtA, i, uint64(len(m.Voice)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTts(dAtA []byte, offset int, v uint64) int {
	offset -= sovTts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TtsRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovTts(uint64(m.RetCode))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovTts(uint64(l))
	}
	if m.OutSeq != 0 {
		n += 1 + sovTts(uint64(m.OutSeq))
	}
	if len(m.VoiceData) > 0 {
		for _, e := range m.VoiceData {
			l = e.Size()
			n += 1 + l + sovTts(uint64(l))
		}
	}
	if m.Islast {
		n += 2
	}
	if m.PcmSampleRate != 0 {
		n += 1 + sovTts(uint64(m.PcmSampleRate))
	}
	if m.OpusSampleRate != 0 {
		n += 1 + sovTts(uint64(m.OpusSampleRate))
	}
	if m.OpusChannels != 0 {
		n += 1 + sovTts(uint64(m.OpusChannels))
	}
	if m.OpusBitRate != 0 {
		n += 1 + sovTts(uint64(m.OpusBitRate))
	}
	if m.OpusFrameSize != 0 {
		n += 1 + sovTts(uint64(m.OpusFrameSize))
	}
	return n
}

func (m *TtsVoiceItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Voice)
	if l > 0 {
		n += 1 + l + sovTts(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovTts(uint64(m.Seq))
	}
	return n
}

func sovTts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTts(x uint64) (n int) {
	return sovTts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TtsRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TtsRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TtsRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutSeq", wireType)
			}
			m.OutSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoiceData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoiceData = append(m.VoiceData, &TtsVoiceItem{})
			if err := m.VoiceData[len(m.VoiceData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Islast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Islast = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcmSampleRate", wireType)
			}
			m.PcmSampleRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PcmSampleRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpusSampleRate", wireType)
			}
			m.OpusSampleRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpusSampleRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpusChannels", wireType)
			}
			m.OpusChannels = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpusChannels |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpusBitRate", wireType)
			}
			m.OpusBitRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpusBitRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpusFrameSize", wireType)
			}
			m.OpusFrameSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpusFrameSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TtsVoiceItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TtsVoiceItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TtsVoiceItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTts
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voice = append(m.Voice[:0], dAtA[iNdEx:postIndex]...)
			if m.Voice == nil {
				m.Voice = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTts = fmt.Errorf("proto: unexpected end of group")
)
