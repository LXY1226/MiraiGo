// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: longmsg.proto

package longmsg

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LongMsgDeleteReq struct {
	MsgResid []byte `protobuf:"bytes,1,opt,name=msgResid,proto3" json:"msgResid,omitempty"`
	MsgType  int32  `protobuf:"varint,2,opt,name=msgType,proto3" json:"msgType,omitempty"`
}

func (m *LongMsgDeleteReq) Reset()         { *m = LongMsgDeleteReq{} }
func (m *LongMsgDeleteReq) String() string { return proto.CompactTextString(m) }
func (*LongMsgDeleteReq) ProtoMessage()    {}
func (*LongMsgDeleteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f334bf675ed058d, []int{0}
}
func (m *LongMsgDeleteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LongMsgDeleteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LongMsgDeleteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LongMsgDeleteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongMsgDeleteReq.Merge(m, src)
}
func (m *LongMsgDeleteReq) XXX_Size() int {
	return m.Size()
}
func (m *LongMsgDeleteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LongMsgDeleteReq.DiscardUnknown(m)
}

var xxx_messageInfo_LongMsgDeleteReq proto.InternalMessageInfo

func (m *LongMsgDeleteReq) GetMsgResid() []byte {
	if m != nil {
		return m.MsgResid
	}
	return nil
}

func (m *LongMsgDeleteReq) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

type LongMsgDeleteRsp struct {
	Result   int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	MsgResid []byte `protobuf:"bytes,2,opt,name=msgResid,proto3" json:"msgResid,omitempty"`
}

func (m *LongMsgDeleteRsp) Reset()         { *m = LongMsgDeleteRsp{} }
func (m *LongMsgDeleteRsp) String() string { return proto.CompactTextString(m) }
func (*LongMsgDeleteRsp) ProtoMessage()    {}
func (*LongMsgDeleteRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f334bf675ed058d, []int{1}
}
func (m *LongMsgDeleteRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LongMsgDeleteRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LongMsgDeleteRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LongMsgDeleteRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongMsgDeleteRsp.Merge(m, src)
}
func (m *LongMsgDeleteRsp) XXX_Size() int {
	return m.Size()
}
func (m *LongMsgDeleteRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LongMsgDeleteRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LongMsgDeleteRsp proto.InternalMessageInfo

func (m *LongMsgDeleteRsp) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *LongMsgDeleteRsp) GetMsgResid() []byte {
	if m != nil {
		return m.MsgResid
	}
	return nil
}

type LongMsgDownReq struct {
	SrcUin    int32  `protobuf:"varint,1,opt,name=srcUin,proto3" json:"srcUin,omitempty"`
	MsgResid  []byte `protobuf:"bytes,2,opt,name=msgResid,proto3" json:"msgResid,omitempty"`
	MsgType   int32  `protobuf:"varint,3,opt,name=msgType,proto3" json:"msgType,omitempty"`
	NeedCache int32  `protobuf:"varint,4,opt,name=needCache,proto3" json:"needCache,omitempty"`
}

func (m *LongMsgDownReq) Reset()         { *m = LongMsgDownReq{} }
func (m *LongMsgDownReq) String() string { return proto.CompactTextString(m) }
func (*LongMsgDownReq) ProtoMessage()    {}
func (*LongMsgDownReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f334bf675ed058d, []int{2}
}
func (m *LongMsgDownReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LongMsgDownReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LongMsgDownReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LongMsgDownReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongMsgDownReq.Merge(m, src)
}
func (m *LongMsgDownReq) XXX_Size() int {
	return m.Size()
}
func (m *LongMsgDownReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LongMsgDownReq.DiscardUnknown(m)
}

var xxx_messageInfo_LongMsgDownReq proto.InternalMessageInfo

func (m *LongMsgDownReq) GetSrcUin() int32 {
	if m != nil {
		return m.SrcUin
	}
	return 0
}

func (m *LongMsgDownReq) GetMsgResid() []byte {
	if m != nil {
		return m.MsgResid
	}
	return nil
}

func (m *LongMsgDownReq) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *LongMsgDownReq) GetNeedCache() int32 {
	if m != nil {
		return m.NeedCache
	}
	return 0
}

type LongMsgDownRsp struct {
	Result     int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	MsgResid   []byte `protobuf:"bytes,2,opt,name=msgResid,proto3" json:"msgResid,omitempty"`
	MsgContent []byte `protobuf:"bytes,3,opt,name=msgContent,proto3" json:"msgContent,omitempty"`
}

func (m *LongMsgDownRsp) Reset()         { *m = LongMsgDownRsp{} }
func (m *LongMsgDownRsp) String() string { return proto.CompactTextString(m) }
func (*LongMsgDownRsp) ProtoMessage()    {}
func (*LongMsgDownRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f334bf675ed058d, []int{3}
}
func (m *LongMsgDownRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LongMsgDownRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LongMsgDownRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LongMsgDownRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongMsgDownRsp.Merge(m, src)
}
func (m *LongMsgDownRsp) XXX_Size() int {
	return m.Size()
}
func (m *LongMsgDownRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LongMsgDownRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LongMsgDownRsp proto.InternalMessageInfo

func (m *LongMsgDownRsp) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *LongMsgDownRsp) GetMsgResid() []byte {
	if m != nil {
		return m.MsgResid
	}
	return nil
}

func (m *LongMsgDownRsp) GetMsgContent() []byte {
	if m != nil {
		return m.MsgContent
	}
	return nil
}

type LongMsgUpReq struct {
	MsgType    int32  `protobuf:"varint,1,opt,name=msgType,proto3" json:"msgType,omitempty"`
	DstUin     int64  `protobuf:"varint,2,opt,name=dstUin,proto3" json:"dstUin,omitempty"`
	MsgId      int32  `protobuf:"varint,3,opt,name=msgId,proto3" json:"msgId,omitempty"`
	MsgContent []byte `protobuf:"bytes,4,opt,name=msgContent,proto3" json:"msgContent,omitempty"`
	StoreType  int32  `protobuf:"varint,5,opt,name=storeType,proto3" json:"storeType,omitempty"`
	MsgUkey    []byte `protobuf:"bytes,6,opt,name=msgUkey,proto3" json:"msgUkey,omitempty"`
	NeedCache  int32  `protobuf:"varint,7,opt,name=needCache,proto3" json:"needCache,omitempty"`
}

func (m *LongMsgUpReq) Reset()         { *m = LongMsgUpReq{} }
func (m *LongMsgUpReq) String() string { return proto.CompactTextString(m) }
func (*LongMsgUpReq) ProtoMessage()    {}
func (*LongMsgUpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f334bf675ed058d, []int{4}
}
func (m *LongMsgUpReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LongMsgUpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LongMsgUpReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LongMsgUpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongMsgUpReq.Merge(m, src)
}
func (m *LongMsgUpReq) XXX_Size() int {
	return m.Size()
}
func (m *LongMsgUpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LongMsgUpReq.DiscardUnknown(m)
}

var xxx_messageInfo_LongMsgUpReq proto.InternalMessageInfo

func (m *LongMsgUpReq) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *LongMsgUpReq) GetDstUin() int64 {
	if m != nil {
		return m.DstUin
	}
	return 0
}

func (m *LongMsgUpReq) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *LongMsgUpReq) GetMsgContent() []byte {
	if m != nil {
		return m.MsgContent
	}
	return nil
}

func (m *LongMsgUpReq) GetStoreType() int32 {
	if m != nil {
		return m.StoreType
	}
	return 0
}

func (m *LongMsgUpReq) GetMsgUkey() []byte {
	if m != nil {
		return m.MsgUkey
	}
	return nil
}

func (m *LongMsgUpReq) GetNeedCache() int32 {
	if m != nil {
		return m.NeedCache
	}
	return 0
}

type LongMsgUpRsp struct {
	Result   int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	MsgId    int32  `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`
	MsgResid []byte `protobuf:"bytes,3,opt,name=msgResid,proto3" json:"msgResid,omitempty"`
}

func (m *LongMsgUpRsp) Reset()         { *m = LongMsgUpRsp{} }
func (m *LongMsgUpRsp) String() string { return proto.CompactTextString(m) }
func (*LongMsgUpRsp) ProtoMessage()    {}
func (*LongMsgUpRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f334bf675ed058d, []int{5}
}
func (m *LongMsgUpRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LongMsgUpRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LongMsgUpRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LongMsgUpRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongMsgUpRsp.Merge(m, src)
}
func (m *LongMsgUpRsp) XXX_Size() int {
	return m.Size()
}
func (m *LongMsgUpRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LongMsgUpRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LongMsgUpRsp proto.InternalMessageInfo

func (m *LongMsgUpRsp) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *LongMsgUpRsp) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *LongMsgUpRsp) GetMsgResid() []byte {
	if m != nil {
		return m.MsgResid
	}
	return nil
}

type LongReqBody struct {
	Subcmd       int32               `protobuf:"varint,1,opt,name=subcmd,proto3" json:"subcmd,omitempty"`
	TermType     int32               `protobuf:"varint,2,opt,name=termType,proto3" json:"termType,omitempty"`
	PlatformType int32               `protobuf:"varint,3,opt,name=platformType,proto3" json:"platformType,omitempty"`
	MsgUpReq     []*LongMsgUpReq     `protobuf:"bytes,4,rep,name=msgUpReq,proto3" json:"msgUpReq,omitempty"`
	MsgDownReq   []*LongMsgDownReq   `protobuf:"bytes,5,rep,name=msgDownReq,proto3" json:"msgDownReq,omitempty"`
	MsgDelReq    []*LongMsgDeleteReq `protobuf:"bytes,6,rep,name=msgDelReq,proto3" json:"msgDelReq,omitempty"`
	AgentType    int32               `protobuf:"varint,10,opt,name=agentType,proto3" json:"agentType,omitempty"`
}

func (m *LongReqBody) Reset()         { *m = LongReqBody{} }
func (m *LongReqBody) String() string { return proto.CompactTextString(m) }
func (*LongReqBody) ProtoMessage()    {}
func (*LongReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f334bf675ed058d, []int{6}
}
func (m *LongReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LongReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LongReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LongReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongReqBody.Merge(m, src)
}
func (m *LongReqBody) XXX_Size() int {
	return m.Size()
}
func (m *LongReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_LongReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_LongReqBody proto.InternalMessageInfo

func (m *LongReqBody) GetSubcmd() int32 {
	if m != nil {
		return m.Subcmd
	}
	return 0
}

func (m *LongReqBody) GetTermType() int32 {
	if m != nil {
		return m.TermType
	}
	return 0
}

func (m *LongReqBody) GetPlatformType() int32 {
	if m != nil {
		return m.PlatformType
	}
	return 0
}

func (m *LongReqBody) GetMsgUpReq() []*LongMsgUpReq {
	if m != nil {
		return m.MsgUpReq
	}
	return nil
}

func (m *LongReqBody) GetMsgDownReq() []*LongMsgDownReq {
	if m != nil {
		return m.MsgDownReq
	}
	return nil
}

func (m *LongReqBody) GetMsgDelReq() []*LongMsgDeleteReq {
	if m != nil {
		return m.MsgDelReq
	}
	return nil
}

func (m *LongReqBody) GetAgentType() int32 {
	if m != nil {
		return m.AgentType
	}
	return 0
}

type LongRspBody struct {
	Subcmd     int32               `protobuf:"varint,1,opt,name=subcmd,proto3" json:"subcmd,omitempty"`
	MsgUpRsp   []*LongMsgUpRsp     `protobuf:"bytes,2,rep,name=msgUpRsp,proto3" json:"msgUpRsp,omitempty"`
	MsgDownRsp []*LongMsgDownRsp   `protobuf:"bytes,3,rep,name=msgDownRsp,proto3" json:"msgDownRsp,omitempty"`
	MsgDelRsp  []*LongMsgDeleteRsp `protobuf:"bytes,4,rep,name=msgDelRsp,proto3" json:"msgDelRsp,omitempty"`
}

func (m *LongRspBody) Reset()         { *m = LongRspBody{} }
func (m *LongRspBody) String() string { return proto.CompactTextString(m) }
func (*LongRspBody) ProtoMessage()    {}
func (*LongRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f334bf675ed058d, []int{7}
}
func (m *LongRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LongRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LongRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LongRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LongRspBody.Merge(m, src)
}
func (m *LongRspBody) XXX_Size() int {
	return m.Size()
}
func (m *LongRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_LongRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_LongRspBody proto.InternalMessageInfo

func (m *LongRspBody) GetSubcmd() int32 {
	if m != nil {
		return m.Subcmd
	}
	return 0
}

func (m *LongRspBody) GetMsgUpRsp() []*LongMsgUpRsp {
	if m != nil {
		return m.MsgUpRsp
	}
	return nil
}

func (m *LongRspBody) GetMsgDownRsp() []*LongMsgDownRsp {
	if m != nil {
		return m.MsgDownRsp
	}
	return nil
}

func (m *LongRspBody) GetMsgDelRsp() []*LongMsgDeleteRsp {
	if m != nil {
		return m.MsgDelRsp
	}
	return nil
}

func init() {
	proto.RegisterType((*LongMsgDeleteReq)(nil), "LongMsgDeleteReq")
	proto.RegisterType((*LongMsgDeleteRsp)(nil), "LongMsgDeleteRsp")
	proto.RegisterType((*LongMsgDownReq)(nil), "LongMsgDownReq")
	proto.RegisterType((*LongMsgDownRsp)(nil), "LongMsgDownRsp")
	proto.RegisterType((*LongMsgUpReq)(nil), "LongMsgUpReq")
	proto.RegisterType((*LongMsgUpRsp)(nil), "LongMsgUpRsp")
	proto.RegisterType((*LongReqBody)(nil), "LongReqBody")
	proto.RegisterType((*LongRspBody)(nil), "LongRspBody")
}

func init() { proto.RegisterFile("longmsg.proto", fileDescriptor_3f334bf675ed058d) }

var fileDescriptor_3f334bf675ed058d = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xae, 0x93, 0x26, 0x4b, 0xbd, 0x5d, 0x7e, 0x2c, 0x54, 0x59, 0x08, 0x45, 0x55, 0xb8, 0x94,
	0x4b, 0x56, 0x82, 0x23, 0xb7, 0x5d, 0x84, 0x40, 0x82, 0x8b, 0x45, 0x25, 0xc4, 0xad, 0xdb, 0x18,
	0xb3, 0xa2, 0x89, 0xbd, 0x19, 0xaf, 0x50, 0x25, 0x1e, 0x62, 0x9f, 0x85, 0xa7, 0xe0, 0xc0, 0x61,
	0x8f, 0x1c, 0x51, 0xfb, 0x22, 0xc8, 0x8e, 0xeb, 0x3a, 0x01, 0xf5, 0xc0, 0xf1, 0x9b, 0x99, 0xcc,
	0xf7, 0x93, 0x49, 0xf0, 0xc9, 0x4a, 0xd6, 0xa2, 0x02, 0x51, 0xa8, 0x46, 0x6a, 0x99, 0xbf, 0xc6,
	0xf7, 0xdf, 0xca, 0x5a, 0xbc, 0x03, 0xf1, 0x92, 0xaf, 0xb8, 0xe6, 0x8c, 0x5f, 0x91, 0x47, 0xf8,
	0x4e, 0x05, 0x82, 0x71, 0xb8, 0x2c, 0x29, 0x9a, 0xa2, 0xd9, 0x98, 0x79, 0x4c, 0x28, 0x3e, 0xaa,
	0x40, 0xbc, 0x5f, 0x2b, 0x4e, 0xa3, 0x29, 0x9a, 0x25, 0x6c, 0x07, 0xf3, 0x57, 0xfd, 0x4d, 0xa0,
	0xc8, 0x04, 0xa7, 0x0d, 0x87, 0xeb, 0x95, 0xb6, 0x7b, 0x12, 0xe6, 0x50, 0x87, 0x21, 0xea, 0x32,
	0xe4, 0xdf, 0xf0, 0xdd, 0xdd, 0x1e, 0xf9, 0xb5, 0x36, 0x7a, 0x26, 0x38, 0x85, 0x66, 0x39, 0xbf,
	0xac, 0x77, 0x5b, 0x5a, 0x74, 0x68, 0x4b, 0xa8, 0x33, 0xee, 0xe8, 0x24, 0x8f, 0xf1, 0xa8, 0xe6,
	0xbc, 0x3c, 0x5f, 0x2c, 0x3f, 0x73, 0x3a, 0xb4, 0xbd, 0x7d, 0x21, 0x2f, 0xbb, 0xec, 0xff, 0xe7,
	0x81, 0x64, 0x18, 0x57, 0x20, 0xce, 0x65, 0xad, 0x79, 0xad, 0xad, 0x80, 0x31, 0x0b, 0x2a, 0xf9,
	0x4f, 0x84, 0xc7, 0x8e, 0x66, 0xae, 0x8c, 0xc5, 0x40, 0x2e, 0xea, 0xca, 0x9d, 0xe0, 0xb4, 0x04,
	0x6d, 0xcc, 0x1b, 0x92, 0x98, 0x39, 0x44, 0x1e, 0xe2, 0xa4, 0x02, 0xf1, 0xa6, 0x74, 0xf6, 0x5a,
	0xd0, 0x23, 0x1e, 0xf6, 0x89, 0x8d, 0x79, 0xd0, 0xb2, 0xe1, 0x96, 0x29, 0x69, 0xcd, 0xfb, 0x82,
	0x53, 0x31, 0xff, 0xc2, 0xd7, 0x34, 0xb5, 0x8f, 0xee, 0x60, 0x37, 0xb4, 0xa3, 0x7e, 0x68, 0x1f,
	0x42, 0x37, 0x07, 0x22, 0xf3, 0x9a, 0xa3, 0x50, 0x73, 0x18, 0x64, 0xdc, 0x3b, 0x86, 0x9b, 0x08,
	0x1f, 0x9b, 0xd5, 0x8c, 0x5f, 0x9d, 0xc9, 0x72, 0x6d, 0x4f, 0xe1, 0xfa, 0x62, 0x59, 0x95, 0xfe,
	0x14, 0x2c, 0x32, 0x3b, 0x34, 0x6f, 0xaa, 0xe0, 0x2e, 0x3d, 0x26, 0x39, 0x1e, 0xab, 0xd5, 0x42,
	0x7f, 0x92, 0xae, 0xdf, 0x06, 0xd6, 0xa9, 0x91, 0xa7, 0x56, 0x83, 0x7d, 0x17, 0x74, 0x38, 0x8d,
	0x67, 0xc7, 0xcf, 0x4e, 0x8a, 0xf0, 0x05, 0x31, 0xdf, 0x26, 0xa7, 0x36, 0x62, 0x77, 0x9b, 0x34,
	0xb1, 0xc3, 0xf7, 0x8a, 0xee, 0xc9, 0xb2, 0x60, 0x84, 0x9c, 0xe2, 0x51, 0x65, 0x3f, 0x0a, 0x33,
	0x9f, 0xda, 0xf9, 0x07, 0x45, 0xff, 0xa3, 0x63, 0xfb, 0x19, 0x13, 0xf6, 0x42, 0xf0, 0x5a, 0x5b,
	0xb5, 0xb8, 0x0d, 0xdb, 0x17, 0xf2, 0xef, 0xc8, 0x45, 0x02, 0xea, 0x60, 0x24, 0xde, 0x12, 0x28,
	0x1a, 0xfd, 0x65, 0x09, 0x14, 0xf3, 0xed, 0xd0, 0x12, 0x28, 0x1a, 0xff, 0xc3, 0x12, 0x28, 0x16,
	0x8c, 0x04, 0x96, 0x40, 0xb9, 0xbc, 0xfa, 0x96, 0x40, 0xb1, 0xfd, 0xcc, 0xd9, 0x93, 0x1f, 0x9b,
	0x0c, 0xdd, 0x6e, 0x32, 0xf4, 0x7b, 0x93, 0xa1, 0x9b, 0x6d, 0x36, 0xb8, 0xdd, 0x66, 0x83, 0x5f,
	0xdb, 0x6c, 0xf0, 0x71, 0x54, 0xbc, 0x70, 0x7f, 0xa4, 0x8b, 0xd4, 0xfe, 0x92, 0x9e, 0xff, 0x09,
	0x00, 0x00, 0xff, 0xff, 0xf9, 0x79, 0x43, 0xa9, 0xa3, 0x04, 0x00, 0x00,
}

func (m *LongMsgDeleteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LongMsgDeleteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LongMsgDeleteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgType != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MsgResid) > 0 {
		i -= len(m.MsgResid)
		copy(dAtA[i:], m.MsgResid)
		i = encodeVarintLongmsg(dAtA, i, uint64(len(m.MsgResid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LongMsgDeleteRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LongMsgDeleteRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LongMsgDeleteRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgResid) > 0 {
		i -= len(m.MsgResid)
		copy(dAtA[i:], m.MsgResid)
		i = encodeVarintLongmsg(dAtA, i, uint64(len(m.MsgResid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LongMsgDownReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LongMsgDownReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LongMsgDownReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NeedCache != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.NeedCache))
		i--
		dAtA[i] = 0x20
	}
	if m.MsgType != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MsgResid) > 0 {
		i -= len(m.MsgResid)
		copy(dAtA[i:], m.MsgResid)
		i = encodeVarintLongmsg(dAtA, i, uint64(len(m.MsgResid)))
		i--
		dAtA[i] = 0x12
	}
	if m.SrcUin != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.SrcUin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LongMsgDownRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LongMsgDownRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LongMsgDownRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgContent) > 0 {
		i -= len(m.MsgContent)
		copy(dAtA[i:], m.MsgContent)
		i = encodeVarintLongmsg(dAtA, i, uint64(len(m.MsgContent)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MsgResid) > 0 {
		i -= len(m.MsgResid)
		copy(dAtA[i:], m.MsgResid)
		i = encodeVarintLongmsg(dAtA, i, uint64(len(m.MsgResid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LongMsgUpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LongMsgUpReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LongMsgUpReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NeedCache != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.NeedCache))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MsgUkey) > 0 {
		i -= len(m.MsgUkey)
		copy(dAtA[i:], m.MsgUkey)
		i = encodeVarintLongmsg(dAtA, i, uint64(len(m.MsgUkey)))
		i--
		dAtA[i] = 0x32
	}
	if m.StoreType != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.StoreType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MsgContent) > 0 {
		i -= len(m.MsgContent)
		copy(dAtA[i:], m.MsgContent)
		i = encodeVarintLongmsg(dAtA, i, uint64(len(m.MsgContent)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgId != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x18
	}
	if m.DstUin != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.DstUin))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgType != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LongMsgUpRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LongMsgUpRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LongMsgUpRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgResid) > 0 {
		i -= len(m.MsgResid)
		copy(dAtA[i:], m.MsgResid)
		i = encodeVarintLongmsg(dAtA, i, uint64(len(m.MsgResid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MsgId != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.Result != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LongReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LongReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LongReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AgentType != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.AgentType))
		i--
		dAtA[i] = 0x50
	}
	if len(m.MsgDelReq) > 0 {
		for iNdEx := len(m.MsgDelReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgDelReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLongmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MsgDownReq) > 0 {
		for iNdEx := len(m.MsgDownReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgDownReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLongmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MsgUpReq) > 0 {
		for iNdEx := len(m.MsgUpReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgUpReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLongmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PlatformType != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.PlatformType))
		i--
		dAtA[i] = 0x18
	}
	if m.TermType != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.TermType))
		i--
		dAtA[i] = 0x10
	}
	if m.Subcmd != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.Subcmd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LongRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LongRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LongRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgDelRsp) > 0 {
		for iNdEx := len(m.MsgDelRsp) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgDelRsp[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLongmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MsgDownRsp) > 0 {
		for iNdEx := len(m.MsgDownRsp) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgDownRsp[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLongmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MsgUpRsp) > 0 {
		for iNdEx := len(m.MsgUpRsp) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgUpRsp[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLongmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Subcmd != 0 {
		i = encodeVarintLongmsg(dAtA, i, uint64(m.Subcmd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLongmsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovLongmsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LongMsgDeleteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgResid)
	if l > 0 {
		n += 1 + l + sovLongmsg(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sovLongmsg(uint64(m.MsgType))
	}
	return n
}

func (m *LongMsgDeleteRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovLongmsg(uint64(m.Result))
	}
	l = len(m.MsgResid)
	if l > 0 {
		n += 1 + l + sovLongmsg(uint64(l))
	}
	return n
}

func (m *LongMsgDownReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcUin != 0 {
		n += 1 + sovLongmsg(uint64(m.SrcUin))
	}
	l = len(m.MsgResid)
	if l > 0 {
		n += 1 + l + sovLongmsg(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sovLongmsg(uint64(m.MsgType))
	}
	if m.NeedCache != 0 {
		n += 1 + sovLongmsg(uint64(m.NeedCache))
	}
	return n
}

func (m *LongMsgDownRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovLongmsg(uint64(m.Result))
	}
	l = len(m.MsgResid)
	if l > 0 {
		n += 1 + l + sovLongmsg(uint64(l))
	}
	l = len(m.MsgContent)
	if l > 0 {
		n += 1 + l + sovLongmsg(uint64(l))
	}
	return n
}

func (m *LongMsgUpReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgType != 0 {
		n += 1 + sovLongmsg(uint64(m.MsgType))
	}
	if m.DstUin != 0 {
		n += 1 + sovLongmsg(uint64(m.DstUin))
	}
	if m.MsgId != 0 {
		n += 1 + sovLongmsg(uint64(m.MsgId))
	}
	l = len(m.MsgContent)
	if l > 0 {
		n += 1 + l + sovLongmsg(uint64(l))
	}
	if m.StoreType != 0 {
		n += 1 + sovLongmsg(uint64(m.StoreType))
	}
	l = len(m.MsgUkey)
	if l > 0 {
		n += 1 + l + sovLongmsg(uint64(l))
	}
	if m.NeedCache != 0 {
		n += 1 + sovLongmsg(uint64(m.NeedCache))
	}
	return n
}

func (m *LongMsgUpRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovLongmsg(uint64(m.Result))
	}
	if m.MsgId != 0 {
		n += 1 + sovLongmsg(uint64(m.MsgId))
	}
	l = len(m.MsgResid)
	if l > 0 {
		n += 1 + l + sovLongmsg(uint64(l))
	}
	return n
}

func (m *LongReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subcmd != 0 {
		n += 1 + sovLongmsg(uint64(m.Subcmd))
	}
	if m.TermType != 0 {
		n += 1 + sovLongmsg(uint64(m.TermType))
	}
	if m.PlatformType != 0 {
		n += 1 + sovLongmsg(uint64(m.PlatformType))
	}
	if len(m.MsgUpReq) > 0 {
		for _, e := range m.MsgUpReq {
			l = e.Size()
			n += 1 + l + sovLongmsg(uint64(l))
		}
	}
	if len(m.MsgDownReq) > 0 {
		for _, e := range m.MsgDownReq {
			l = e.Size()
			n += 1 + l + sovLongmsg(uint64(l))
		}
	}
	if len(m.MsgDelReq) > 0 {
		for _, e := range m.MsgDelReq {
			l = e.Size()
			n += 1 + l + sovLongmsg(uint64(l))
		}
	}
	if m.AgentType != 0 {
		n += 1 + sovLongmsg(uint64(m.AgentType))
	}
	return n
}

func (m *LongRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subcmd != 0 {
		n += 1 + sovLongmsg(uint64(m.Subcmd))
	}
	if len(m.MsgUpRsp) > 0 {
		for _, e := range m.MsgUpRsp {
			l = e.Size()
			n += 1 + l + sovLongmsg(uint64(l))
		}
	}
	if len(m.MsgDownRsp) > 0 {
		for _, e := range m.MsgDownRsp {
			l = e.Size()
			n += 1 + l + sovLongmsg(uint64(l))
		}
	}
	if len(m.MsgDelRsp) > 0 {
		for _, e := range m.MsgDelRsp {
			l = e.Size()
			n += 1 + l + sovLongmsg(uint64(l))
		}
	}
	return n
}

func sovLongmsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLongmsg(x uint64) (n int) {
	return sovLongmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LongMsgDeleteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLongmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LongMsgDeleteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LongMsgDeleteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgResid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgResid = append(m.MsgResid[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgResid == nil {
				m.MsgResid = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLongmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LongMsgDeleteRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLongmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LongMsgDeleteRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LongMsgDeleteRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgResid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgResid = append(m.MsgResid[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgResid == nil {
				m.MsgResid = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLongmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LongMsgDownReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLongmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LongMsgDownReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LongMsgDownReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcUin", wireType)
			}
			m.SrcUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcUin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgResid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgResid = append(m.MsgResid[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgResid == nil {
				m.MsgResid = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedCache", wireType)
			}
			m.NeedCache = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedCache |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLongmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LongMsgDownRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLongmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LongMsgDownRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LongMsgDownRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgResid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgResid = append(m.MsgResid[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgResid == nil {
				m.MsgResid = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgContent = append(m.MsgContent[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgContent == nil {
				m.MsgContent = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLongmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LongMsgUpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLongmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LongMsgUpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LongMsgUpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstUin", wireType)
			}
			m.DstUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstUin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgContent = append(m.MsgContent[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgContent == nil {
				m.MsgContent = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreType", wireType)
			}
			m.StoreType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgUkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgUkey = append(m.MsgUkey[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgUkey == nil {
				m.MsgUkey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedCache", wireType)
			}
			m.NeedCache = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedCache |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLongmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LongMsgUpRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLongmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LongMsgUpRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LongMsgUpRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgResid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgResid = append(m.MsgResid[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgResid == nil {
				m.MsgResid = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLongmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LongReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLongmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LongReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LongReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subcmd", wireType)
			}
			m.Subcmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subcmd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermType", wireType)
			}
			m.TermType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TermType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformType", wireType)
			}
			m.PlatformType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatformType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgUpReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgUpReq = append(m.MsgUpReq, &LongMsgUpReq{})
			if err := m.MsgUpReq[len(m.MsgUpReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDownReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgDownReq = append(m.MsgDownReq, &LongMsgDownReq{})
			if err := m.MsgDownReq[len(m.MsgDownReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDelReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgDelReq = append(m.MsgDelReq, &LongMsgDeleteReq{})
			if err := m.MsgDelReq[len(m.MsgDelReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentType", wireType)
			}
			m.AgentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLongmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LongRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLongmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LongRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LongRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subcmd", wireType)
			}
			m.Subcmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subcmd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgUpRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgUpRsp = append(m.MsgUpRsp, &LongMsgUpRsp{})
			if err := m.MsgUpRsp[len(m.MsgUpRsp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDownRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgDownRsp = append(m.MsgDownRsp, &LongMsgDownRsp{})
			if err := m.MsgDownRsp[len(m.MsgDownRsp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDelRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLongmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLongmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgDelRsp = append(m.MsgDelRsp, &LongMsgDeleteRsp{})
			if err := m.MsgDelRsp[len(m.MsgDelRsp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLongmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLongmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLongmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLongmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLongmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLongmsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLongmsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLongmsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLongmsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLongmsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLongmsg = fmt.Errorf("proto: unexpected end of group")
)
