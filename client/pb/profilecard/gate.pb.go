// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/pb/profilecard/gate.proto

package profilecard

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GateCommTaskInfo struct {
	Appid    int32  `protobuf:"varint,1,opt,name=appid" json:"appid"`
	TaskData []byte `protobuf:"bytes,2,opt,name=taskData" json:"taskData"`
}

func (m *GateCommTaskInfo) Reset()         { *m = GateCommTaskInfo{} }
func (m *GateCommTaskInfo) String() string { return proto.CompactTextString(m) }
func (*GateCommTaskInfo) ProtoMessage()    {}
func (*GateCommTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa82069ef87010, []int{0}
}
func (m *GateCommTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GateCommTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GateCommTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GateCommTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GateCommTaskInfo.Merge(m, src)
}
func (m *GateCommTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *GateCommTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GateCommTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GateCommTaskInfo proto.InternalMessageInfo

func (m *GateCommTaskInfo) GetAppid() int32 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *GateCommTaskInfo) GetTaskData() []byte {
	if m != nil {
		return m.TaskData
	}
	return nil
}

type GateGetGiftListReq struct {
	Uin int32 `protobuf:"varint,1,opt,name=uin" json:"uin"`
}

func (m *GateGetGiftListReq) Reset()         { *m = GateGetGiftListReq{} }
func (m *GateGetGiftListReq) String() string { return proto.CompactTextString(m) }
func (*GateGetGiftListReq) ProtoMessage()    {}
func (*GateGetGiftListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa82069ef87010, []int{1}
}
func (m *GateGetGiftListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GateGetGiftListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GateGetGiftListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GateGetGiftListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GateGetGiftListReq.Merge(m, src)
}
func (m *GateGetGiftListReq) XXX_Size() int {
	return m.Size()
}
func (m *GateGetGiftListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GateGetGiftListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GateGetGiftListReq proto.InternalMessageInfo

func (m *GateGetGiftListReq) GetUin() int32 {
	if m != nil {
		return m.Uin
	}
	return 0
}

type GateGetGiftListRsp struct {
	GiftUrl   []string `protobuf:"bytes,1,rep,name=giftUrl" json:"giftUrl,omitempty"`
	CustomUrl string   `protobuf:"bytes,2,opt,name=customUrl" json:"customUrl"`
	Desc      string   `protobuf:"bytes,3,opt,name=desc" json:"desc"`
	IsOn      bool     `protobuf:"varint,4,opt,name=isOn" json:"isOn"`
}

func (m *GateGetGiftListRsp) Reset()         { *m = GateGetGiftListRsp{} }
func (m *GateGetGiftListRsp) String() string { return proto.CompactTextString(m) }
func (*GateGetGiftListRsp) ProtoMessage()    {}
func (*GateGetGiftListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa82069ef87010, []int{2}
}
func (m *GateGetGiftListRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GateGetGiftListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GateGetGiftListRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GateGetGiftListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GateGetGiftListRsp.Merge(m, src)
}
func (m *GateGetGiftListRsp) XXX_Size() int {
	return m.Size()
}
func (m *GateGetGiftListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GateGetGiftListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GateGetGiftListRsp proto.InternalMessageInfo

func (m *GateGetGiftListRsp) GetGiftUrl() []string {
	if m != nil {
		return m.GiftUrl
	}
	return nil
}

func (m *GateGetGiftListRsp) GetCustomUrl() string {
	if m != nil {
		return m.CustomUrl
	}
	return ""
}

func (m *GateGetGiftListRsp) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *GateGetGiftListRsp) GetIsOn() bool {
	if m != nil {
		return m.IsOn
	}
	return false
}

type GateGetVipCareReq struct {
	Uin int64 `protobuf:"varint,1,opt,name=uin" json:"uin"`
}

func (m *GateGetVipCareReq) Reset()         { *m = GateGetVipCareReq{} }
func (m *GateGetVipCareReq) String() string { return proto.CompactTextString(m) }
func (*GateGetVipCareReq) ProtoMessage()    {}
func (*GateGetVipCareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa82069ef87010, []int{3}
}
func (m *GateGetVipCareReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GateGetVipCareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GateGetVipCareReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GateGetVipCareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GateGetVipCareReq.Merge(m, src)
}
func (m *GateGetVipCareReq) XXX_Size() int {
	return m.Size()
}
func (m *GateGetVipCareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GateGetVipCareReq.DiscardUnknown(m)
}

var xxx_messageInfo_GateGetVipCareReq proto.InternalMessageInfo

func (m *GateGetVipCareReq) GetUin() int64 {
	if m != nil {
		return m.Uin
	}
	return 0
}

type GateGetVipCareRsp struct {
	Buss   int32 `protobuf:"varint,1,opt,name=buss" json:"buss"`
	Notice int32 `protobuf:"varint,2,opt,name=notice" json:"notice"`
}

func (m *GateGetVipCareRsp) Reset()         { *m = GateGetVipCareRsp{} }
func (m *GateGetVipCareRsp) String() string { return proto.CompactTextString(m) }
func (*GateGetVipCareRsp) ProtoMessage()    {}
func (*GateGetVipCareRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa82069ef87010, []int{4}
}
func (m *GateGetVipCareRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GateGetVipCareRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GateGetVipCareRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GateGetVipCareRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GateGetVipCareRsp.Merge(m, src)
}
func (m *GateGetVipCareRsp) XXX_Size() int {
	return m.Size()
}
func (m *GateGetVipCareRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GateGetVipCareRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GateGetVipCareRsp proto.InternalMessageInfo

func (m *GateGetVipCareRsp) GetBuss() int32 {
	if m != nil {
		return m.Buss
	}
	return 0
}

func (m *GateGetVipCareRsp) GetNotice() int32 {
	if m != nil {
		return m.Notice
	}
	return 0
}

type GateOidbFlagInfo struct {
	Fieled     int32  `protobuf:"varint,1,opt,name=fieled" json:"fieled"`
	ByetsValue []byte `protobuf:"bytes,2,opt,name=byetsValue" json:"byetsValue"`
}

func (m *GateOidbFlagInfo) Reset()         { *m = GateOidbFlagInfo{} }
func (m *GateOidbFlagInfo) String() string { return proto.CompactTextString(m) }
func (*GateOidbFlagInfo) ProtoMessage()    {}
func (*GateOidbFlagInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa82069ef87010, []int{5}
}
func (m *GateOidbFlagInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GateOidbFlagInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GateOidbFlagInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GateOidbFlagInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GateOidbFlagInfo.Merge(m, src)
}
func (m *GateOidbFlagInfo) XXX_Size() int {
	return m.Size()
}
func (m *GateOidbFlagInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GateOidbFlagInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GateOidbFlagInfo proto.InternalMessageInfo

func (m *GateOidbFlagInfo) GetFieled() int32 {
	if m != nil {
		return m.Fieled
	}
	return 0
}

func (m *GateOidbFlagInfo) GetByetsValue() []byte {
	if m != nil {
		return m.ByetsValue
	}
	return nil
}

type GatePrivilegeBaseInfoReq struct {
	UReqUin int64 `protobuf:"varint,1,opt,name=uReqUin" json:"uReqUin"`
}

func (m *GatePrivilegeBaseInfoReq) Reset()         { *m = GatePrivilegeBaseInfoReq{} }
func (m *GatePrivilegeBaseInfoReq) String() string { return proto.CompactTextString(m) }
func (*GatePrivilegeBaseInfoReq) ProtoMessage()    {}
func (*GatePrivilegeBaseInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa82069ef87010, []int{6}
}
func (m *GatePrivilegeBaseInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatePrivilegeBaseInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatePrivilegeBaseInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatePrivilegeBaseInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatePrivilegeBaseInfoReq.Merge(m, src)
}
func (m *GatePrivilegeBaseInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GatePrivilegeBaseInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GatePrivilegeBaseInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GatePrivilegeBaseInfoReq proto.InternalMessageInfo

func (m *GatePrivilegeBaseInfoReq) GetUReqUin() int64 {
	if m != nil {
		return m.UReqUin
	}
	return 0
}

type GatePrivilegeBaseInfoRsp struct {
	Msg        []byte               `protobuf:"bytes,1,opt,name=msg" json:"msg"`
	JumpUrl    []byte               `protobuf:"bytes,2,opt,name=jumpUrl" json:"jumpUrl"`
	VOpenPriv  []*GatePrivilegeInfo `protobuf:"bytes,3,rep,name=vOpenPriv" json:"vOpenPriv,omitempty"`
	VClosePriv []*GatePrivilegeInfo `protobuf:"bytes,4,rep,name=vClosePriv" json:"vClosePriv,omitempty"`
	UIsGrayUsr int32                `protobuf:"varint,5,opt,name=uIsGrayUsr" json:"uIsGrayUsr"`
}

func (m *GatePrivilegeBaseInfoRsp) Reset()         { *m = GatePrivilegeBaseInfoRsp{} }
func (m *GatePrivilegeBaseInfoRsp) String() string { return proto.CompactTextString(m) }
func (*GatePrivilegeBaseInfoRsp) ProtoMessage()    {}
func (*GatePrivilegeBaseInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa82069ef87010, []int{7}
}
func (m *GatePrivilegeBaseInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatePrivilegeBaseInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatePrivilegeBaseInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatePrivilegeBaseInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatePrivilegeBaseInfoRsp.Merge(m, src)
}
func (m *GatePrivilegeBaseInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *GatePrivilegeBaseInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GatePrivilegeBaseInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GatePrivilegeBaseInfoRsp proto.InternalMessageInfo

func (m *GatePrivilegeBaseInfoRsp) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *GatePrivilegeBaseInfoRsp) GetJumpUrl() []byte {
	if m != nil {
		return m.JumpUrl
	}
	return nil
}

func (m *GatePrivilegeBaseInfoRsp) GetVOpenPriv() []*GatePrivilegeInfo {
	if m != nil {
		return m.VOpenPriv
	}
	return nil
}

func (m *GatePrivilegeBaseInfoRsp) GetVClosePriv() []*GatePrivilegeInfo {
	if m != nil {
		return m.VClosePriv
	}
	return nil
}

func (m *GatePrivilegeBaseInfoRsp) GetUIsGrayUsr() int32 {
	if m != nil {
		return m.UIsGrayUsr
	}
	return 0
}

type GatePrivilegeInfo struct {
	IType         int32  `protobuf:"varint,1,opt,name=iType" json:"iType"`
	ISort         int32  `protobuf:"varint,2,opt,name=iSort" json:"iSort"`
	IFeeType      int32  `protobuf:"varint,3,opt,name=iFeeType" json:"iFeeType"`
	ILevel        int32  `protobuf:"varint,4,opt,name=iLevel" json:"iLevel"`
	IFlag         int32  `protobuf:"varint,5,opt,name=iFlag" json:"iFlag"`
	IconUrl       []byte `protobuf:"bytes,6,opt,name=iconUrl" json:"iconUrl"`
	DeluxeIconUrl []byte `protobuf:"bytes,7,opt,name=deluxeIconUrl" json:"deluxeIconUrl"`
	JumpUrl       []byte `protobuf:"bytes,8,opt,name=jumpUrl" json:"jumpUrl"`
	IIsBig        int32  `protobuf:"varint,9,opt,name=iIsBig" json:"iIsBig"`
}

func (m *GatePrivilegeInfo) Reset()         { *m = GatePrivilegeInfo{} }
func (m *GatePrivilegeInfo) String() string { return proto.CompactTextString(m) }
func (*GatePrivilegeInfo) ProtoMessage()    {}
func (*GatePrivilegeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa82069ef87010, []int{8}
}
func (m *GatePrivilegeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatePrivilegeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatePrivilegeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatePrivilegeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatePrivilegeInfo.Merge(m, src)
}
func (m *GatePrivilegeInfo) XXX_Size() int {
	return m.Size()
}
func (m *GatePrivilegeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GatePrivilegeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GatePrivilegeInfo proto.InternalMessageInfo

func (m *GatePrivilegeInfo) GetIType() int32 {
	if m != nil {
		return m.IType
	}
	return 0
}

func (m *GatePrivilegeInfo) GetISort() int32 {
	if m != nil {
		return m.ISort
	}
	return 0
}

func (m *GatePrivilegeInfo) GetIFeeType() int32 {
	if m != nil {
		return m.IFeeType
	}
	return 0
}

func (m *GatePrivilegeInfo) GetILevel() int32 {
	if m != nil {
		return m.ILevel
	}
	return 0
}

func (m *GatePrivilegeInfo) GetIFlag() int32 {
	if m != nil {
		return m.IFlag
	}
	return 0
}

func (m *GatePrivilegeInfo) GetIconUrl() []byte {
	if m != nil {
		return m.IconUrl
	}
	return nil
}

func (m *GatePrivilegeInfo) GetDeluxeIconUrl() []byte {
	if m != nil {
		return m.DeluxeIconUrl
	}
	return nil
}

func (m *GatePrivilegeInfo) GetJumpUrl() []byte {
	if m != nil {
		return m.JumpUrl
	}
	return nil
}

func (m *GatePrivilegeInfo) GetIIsBig() int32 {
	if m != nil {
		return m.IIsBig
	}
	return 0
}

type GateVaProfileGateReq struct {
	UCmd           int32                     `protobuf:"varint,1,opt,name=uCmd" json:"uCmd"`
	StPrivilegeReq *GatePrivilegeBaseInfoReq `protobuf:"bytes,2,opt,name=stPrivilegeReq" json:"stPrivilegeReq,omitempty"`
	StGiftReq      *GateGetGiftListReq       `protobuf:"bytes,3,opt,name=stGiftReq" json:"stGiftReq,omitempty"`
	TaskItem       []*GateCommTaskInfo       `protobuf:"bytes,4,rep,name=taskItem" json:"taskItem,omitempty"`
	OidbFlag       []*GateOidbFlagInfo       `protobuf:"bytes,5,rep,name=oidbFlag" json:"oidbFlag,omitempty"`
	StVipCare      *GateGetVipCareReq        `protobuf:"bytes,6,opt,name=stVipCare" json:"stVipCare,omitempty"`
}

func (m *GateVaProfileGateReq) Reset()         { *m = GateVaProfileGateReq{} }
func (m *GateVaProfileGateReq) String() string { return proto.CompactTextString(m) }
func (*GateVaProfileGateReq) ProtoMessage()    {}
func (*GateVaProfileGateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa82069ef87010, []int{9}
}
func (m *GateVaProfileGateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GateVaProfileGateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GateVaProfileGateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GateVaProfileGateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GateVaProfileGateReq.Merge(m, src)
}
func (m *GateVaProfileGateReq) XXX_Size() int {
	return m.Size()
}
func (m *GateVaProfileGateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GateVaProfileGateReq.DiscardUnknown(m)
}

var xxx_messageInfo_GateVaProfileGateReq proto.InternalMessageInfo

func (m *GateVaProfileGateReq) GetUCmd() int32 {
	if m != nil {
		return m.UCmd
	}
	return 0
}

func (m *GateVaProfileGateReq) GetStPrivilegeReq() *GatePrivilegeBaseInfoReq {
	if m != nil {
		return m.StPrivilegeReq
	}
	return nil
}

func (m *GateVaProfileGateReq) GetStGiftReq() *GateGetGiftListReq {
	if m != nil {
		return m.StGiftReq
	}
	return nil
}

func (m *GateVaProfileGateReq) GetTaskItem() []*GateCommTaskInfo {
	if m != nil {
		return m.TaskItem
	}
	return nil
}

func (m *GateVaProfileGateReq) GetOidbFlag() []*GateOidbFlagInfo {
	if m != nil {
		return m.OidbFlag
	}
	return nil
}

func (m *GateVaProfileGateReq) GetStVipCare() *GateGetVipCareReq {
	if m != nil {
		return m.StVipCare
	}
	return nil
}

type GateQidInfoItem struct {
	Qid     string `protobuf:"bytes,1,opt,name=qid" json:"qid"`
	Url     string `protobuf:"bytes,2,opt,name=url" json:"url"`
	Color   string `protobuf:"bytes,3,opt,name=color" json:"color"`
	LogoUrl string `protobuf:"bytes,4,opt,name=logoUrl" json:"logoUrl"`
}

func (m *GateQidInfoItem) Reset()         { *m = GateQidInfoItem{} }
func (m *GateQidInfoItem) String() string { return proto.CompactTextString(m) }
func (*GateQidInfoItem) ProtoMessage()    {}
func (*GateQidInfoItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa82069ef87010, []int{10}
}
func (m *GateQidInfoItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GateQidInfoItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GateQidInfoItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GateQidInfoItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GateQidInfoItem.Merge(m, src)
}
func (m *GateQidInfoItem) XXX_Size() int {
	return m.Size()
}
func (m *GateQidInfoItem) XXX_DiscardUnknown() {
	xxx_messageInfo_GateQidInfoItem.DiscardUnknown(m)
}

var xxx_messageInfo_GateQidInfoItem proto.InternalMessageInfo

func (m *GateQidInfoItem) GetQid() string {
	if m != nil {
		return m.Qid
	}
	return ""
}

func (m *GateQidInfoItem) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *GateQidInfoItem) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *GateQidInfoItem) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

type GateVaProfileGateRsp struct {
	IRetCode       int32                     `protobuf:"varint,1,opt,name=iRetCode" json:"iRetCode"`
	SRetMsg        []byte                    `protobuf:"bytes,2,opt,name=sRetMsg" json:"sRetMsg"`
	StPrivilegeRsp *GatePrivilegeBaseInfoRsp `protobuf:"bytes,3,opt,name=stPrivilegeRsp" json:"stPrivilegeRsp,omitempty"`
	StGiftRsp      *GateGetGiftListRsp       `protobuf:"bytes,4,opt,name=stGiftRsp" json:"stGiftRsp,omitempty"`
	TaskItem       []*GateCommTaskInfo       `protobuf:"bytes,5,rep,name=taskItem" json:"taskItem,omitempty"`
	OidbFlag       []*GateOidbFlagInfo       `protobuf:"bytes,6,rep,name=oidbFlag" json:"oidbFlag,omitempty"`
	StVipCare      *GateGetVipCareRsp        `protobuf:"bytes,7,opt,name=stVipCare" json:"stVipCare,omitempty"`
	QidInfo        *GateQidInfoItem          `protobuf:"bytes,9,opt,name=qidInfo" json:"qidInfo,omitempty"`
}

func (m *GateVaProfileGateRsp) Reset()         { *m = GateVaProfileGateRsp{} }
func (m *GateVaProfileGateRsp) String() string { return proto.CompactTextString(m) }
func (*GateVaProfileGateRsp) ProtoMessage()    {}
func (*GateVaProfileGateRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa82069ef87010, []int{11}
}
func (m *GateVaProfileGateRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GateVaProfileGateRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GateVaProfileGateRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GateVaProfileGateRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GateVaProfileGateRsp.Merge(m, src)
}
func (m *GateVaProfileGateRsp) XXX_Size() int {
	return m.Size()
}
func (m *GateVaProfileGateRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GateVaProfileGateRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GateVaProfileGateRsp proto.InternalMessageInfo

func (m *GateVaProfileGateRsp) GetIRetCode() int32 {
	if m != nil {
		return m.IRetCode
	}
	return 0
}

func (m *GateVaProfileGateRsp) GetSRetMsg() []byte {
	if m != nil {
		return m.SRetMsg
	}
	return nil
}

func (m *GateVaProfileGateRsp) GetStPrivilegeRsp() *GatePrivilegeBaseInfoRsp {
	if m != nil {
		return m.StPrivilegeRsp
	}
	return nil
}

func (m *GateVaProfileGateRsp) GetStGiftRsp() *GateGetGiftListRsp {
	if m != nil {
		return m.StGiftRsp
	}
	return nil
}

func (m *GateVaProfileGateRsp) GetTaskItem() []*GateCommTaskInfo {
	if m != nil {
		return m.TaskItem
	}
	return nil
}

func (m *GateVaProfileGateRsp) GetOidbFlag() []*GateOidbFlagInfo {
	if m != nil {
		return m.OidbFlag
	}
	return nil
}

func (m *GateVaProfileGateRsp) GetStVipCare() *GateGetVipCareRsp {
	if m != nil {
		return m.StVipCare
	}
	return nil
}

func (m *GateVaProfileGateRsp) GetQidInfo() *GateQidInfoItem {
	if m != nil {
		return m.QidInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*GateCommTaskInfo)(nil), "GateCommTaskInfo")
	proto.RegisterType((*GateGetGiftListReq)(nil), "GateGetGiftListReq")
	proto.RegisterType((*GateGetGiftListRsp)(nil), "GateGetGiftListRsp")
	proto.RegisterType((*GateGetVipCareReq)(nil), "GateGetVipCareReq")
	proto.RegisterType((*GateGetVipCareRsp)(nil), "GateGetVipCareRsp")
	proto.RegisterType((*GateOidbFlagInfo)(nil), "GateOidbFlagInfo")
	proto.RegisterType((*GatePrivilegeBaseInfoReq)(nil), "GatePrivilegeBaseInfoReq")
	proto.RegisterType((*GatePrivilegeBaseInfoRsp)(nil), "GatePrivilegeBaseInfoRsp")
	proto.RegisterType((*GatePrivilegeInfo)(nil), "GatePrivilegeInfo")
	proto.RegisterType((*GateVaProfileGateReq)(nil), "GateVaProfileGateReq")
	proto.RegisterType((*GateQidInfoItem)(nil), "GateQidInfoItem")
	proto.RegisterType((*GateVaProfileGateRsp)(nil), "GateVaProfileGateRsp")
}

func init() { proto.RegisterFile("client/pb/profilecard/gate.proto", fileDescriptor_11aa82069ef87010) }

var fileDescriptor_11aa82069ef87010 = []byte{
	// 807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xbf, 0x6e, 0xdb, 0x48,
	0x10, 0xc6, 0x45, 0x53, 0x7f, 0xac, 0xf5, 0xf9, 0xce, 0xde, 0x3b, 0x18, 0xbc, 0x83, 0xa1, 0x13,
	0x88, 0x03, 0x4e, 0x70, 0x12, 0x39, 0x51, 0x99, 0x54, 0x91, 0x02, 0x0b, 0x42, 0x1c, 0xd8, 0x61,
	0x6c, 0x15, 0xe9, 0x28, 0x69, 0x45, 0x6c, 0x4c, 0x69, 0x57, 0xdc, 0xa5, 0x10, 0x17, 0x69, 0x53,
	0xa4, 0xca, 0xab, 0xa4, 0xc9, 0x33, 0xb8, 0x74, 0x99, 0xca, 0x08, 0xec, 0x17, 0x09, 0x66, 0x49,
	0x4a, 0xbb, 0xb4, 0x54, 0xb8, 0xd4, 0x6f, 0xbe, 0x9d, 0x1d, 0xce, 0x37, 0x3b, 0x42, 0xf5, 0x61,
	0x48, 0xc9, 0x54, 0x1e, 0xf2, 0xc1, 0x21, 0x8f, 0xd8, 0x98, 0x86, 0x64, 0xe8, 0x47, 0xa3, 0xc3,
	0xc0, 0x97, 0xa4, 0xc9, 0x23, 0x26, 0x99, 0x7b, 0x8a, 0x76, 0xba, 0xbe, 0x24, 0x1d, 0x36, 0x99,
	0x9c, 0xf9, 0xe2, 0xa2, 0x37, 0x1d, 0x33, 0xfc, 0x0f, 0x2a, 0xf9, 0x9c, 0xd3, 0x91, 0x63, 0xd5,
	0xad, 0x46, 0xa9, 0x5d, 0xbc, 0xba, 0xf9, 0xb7, 0xe0, 0x25, 0x08, 0xd7, 0xd1, 0xa6, 0xf4, 0xc5,
	0xc5, 0x2b, 0x5f, 0xfa, 0xce, 0x46, 0xdd, 0x6a, 0xfc, 0x96, 0x86, 0x17, 0xd4, 0x7d, 0x8c, 0x30,
	0x64, 0xec, 0x12, 0xd9, 0xa5, 0x63, 0x79, 0x4c, 0x85, 0xf4, 0xc8, 0x0c, 0xef, 0x21, 0x3b, 0xa6,
	0x53, 0x23, 0x23, 0x00, 0xf7, 0xb3, 0x75, 0x5f, 0x2e, 0x38, 0x76, 0x50, 0x25, 0xa0, 0x63, 0x79,
	0x1e, 0x85, 0x8e, 0x55, 0xb7, 0x1b, 0x55, 0x2f, 0xfb, 0x89, 0x5d, 0x54, 0x1d, 0xc6, 0x42, 0xb2,
	0x09, 0xc4, 0xa0, 0x82, 0x6a, 0x9a, 0x6e, 0x89, 0xb1, 0x83, 0x8a, 0x23, 0x22, 0x86, 0x8e, 0xad,
	0x85, 0x15, 0x81, 0x08, 0x15, 0x27, 0x53, 0xa7, 0x58, 0xb7, 0x1a, 0x9b, 0x59, 0x04, 0x88, 0xfb,
	0x08, 0xed, 0xa6, 0x75, 0xf4, 0x29, 0xef, 0xf8, 0x11, 0xc9, 0x55, 0x6d, 0xeb, 0x55, 0xbf, 0xbe,
	0x27, 0x56, 0x35, 0x17, 0x07, 0xb1, 0x10, 0xc6, 0x37, 0x2a, 0x82, 0xf7, 0x51, 0x79, 0xca, 0x24,
	0x1d, 0x12, 0x55, 0x70, 0x16, 0x4b, 0x99, 0xdb, 0x4f, 0x2c, 0x38, 0xa1, 0xa3, 0xc1, 0x51, 0xe8,
	0x07, 0xca, 0x82, 0x7d, 0x54, 0x1e, 0x53, 0x12, 0x12, 0xd3, 0x83, 0x94, 0xe1, 0xff, 0x10, 0x1a,
	0x5c, 0x12, 0x29, 0xfa, 0x7e, 0x18, 0x13, 0xc3, 0x06, 0x8d, 0xbb, 0xcf, 0x91, 0x03, 0x79, 0x4f,
	0x23, 0x3a, 0xa7, 0x21, 0x09, 0x48, 0xdb, 0x17, 0x04, 0x92, 0xc3, 0x87, 0xd5, 0x50, 0x25, 0xf6,
	0xc8, 0xec, 0x3c, 0xf7, 0x71, 0x19, 0x74, 0x6f, 0xac, 0x75, 0x87, 0x05, 0x87, 0xae, 0x4c, 0x44,
	0xa0, 0x0e, 0x66, 0xf7, 0x02, 0x80, 0xa4, 0x1f, 0xe2, 0x09, 0xcf, 0x8c, 0xc9, 0x62, 0x19, 0xc4,
	0x4f, 0x51, 0x75, 0x7e, 0xc2, 0xc9, 0x14, 0x92, 0x3a, 0x76, 0xdd, 0x6e, 0x6c, 0xb5, 0x70, 0xd3,
	0xb8, 0x45, 0xdd, 0xb0, 0x14, 0xe1, 0x16, 0x42, 0xf3, 0x4e, 0xc8, 0x84, 0x52, 0x38, 0xc5, 0xb5,
	0x47, 0x34, 0x15, 0x34, 0x27, 0xee, 0x89, 0x6e, 0xe4, 0x5f, 0x9e, 0x8b, 0xc8, 0x29, 0x69, 0xed,
	0xd3, 0xb8, 0xfb, 0x6d, 0x23, 0xb1, 0xd0, 0xc8, 0x03, 0x93, 0x4f, 0xcf, 0x2e, 0x39, 0x31, 0x27,
	0x5f, 0x21, 0x15, 0x7b, 0xc7, 0x22, 0x69, 0x78, 0x98, 0x20, 0x78, 0x15, 0xf4, 0x88, 0x10, 0x75,
	0xd4, 0xd6, 0xc2, 0x0b, 0x0a, 0x86, 0xd2, 0x63, 0x32, 0x27, 0xa1, 0x1a, 0xbd, 0x85, 0xa1, 0x09,
	0x53, 0xb9, 0xc1, 0x7b, 0xa3, 0xdc, 0x04, 0x41, 0x57, 0xe9, 0x90, 0x4d, 0xa1, 0xab, 0x65, 0xbd,
	0xab, 0x29, 0xc4, 0x07, 0x68, 0x7b, 0x44, 0xc2, 0xf8, 0x23, 0xe9, 0xa5, 0xaa, 0x8a, 0xa6, 0x32,
	0x43, 0xba, 0x43, 0x9b, 0xab, 0x1c, 0x82, 0x2a, 0x7b, 0xa2, 0x4d, 0x03, 0xa7, 0x6a, 0x54, 0xa9,
	0x98, 0xfb, 0x7d, 0x03, 0xfd, 0x05, 0x3d, 0xeb, 0xfb, 0xa7, 0xc9, 0x32, 0x81, 0x1f, 0x30, 0x4d,
	0x0e, 0x2a, 0xc6, 0x9d, 0x89, 0x39, 0xab, 0x8a, 0xe0, 0x97, 0xe8, 0x77, 0x21, 0x17, 0x3d, 0xf6,
	0xc8, 0x4c, 0x75, 0x6f, 0xab, 0xf5, 0x77, 0x73, 0xdd, 0x68, 0x7a, 0xb9, 0x03, 0xf8, 0x19, 0xaa,
	0x0a, 0xb5, 0x1b, 0xe0, 0xb4, 0xad, 0x4e, 0xff, 0xd9, 0xbc, 0xbf, 0x61, 0xbc, 0xa5, 0x0a, 0x3f,
	0x49, 0x96, 0x54, 0x4f, 0x92, 0x49, 0x3a, 0x34, 0xbb, 0xcd, 0xfc, 0x96, 0xf3, 0x16, 0x12, 0x90,
	0xb3, 0xf4, 0xf1, 0x39, 0x25, 0x4d, 0xae, 0xbf, 0x48, 0x6f, 0x21, 0x81, 0x31, 0x16, 0xd9, 0xbb,
	0x57, 0x96, 0x64, 0x33, 0x69, 0xec, 0x0e, 0x6f, 0x29, 0x72, 0x3f, 0xa1, 0x3f, 0x20, 0xfe, 0x96,
	0x8e, 0x20, 0x95, 0xba, 0x73, 0x0f, 0xd9, 0xb3, 0x74, 0xc3, 0x66, 0x1b, 0x0a, 0x80, 0xda, 0x38,
	0xb9, 0xc5, 0x06, 0x00, 0x26, 0x64, 0xc8, 0x42, 0x16, 0x19, 0x3b, 0x2d, 0x41, 0xe0, 0x6a, 0xc8,
	0x02, 0x06, 0xae, 0x16, 0xb5, 0x68, 0x06, 0xdd, 0x2f, 0xf6, 0x2a, 0xdf, 0x04, 0x57, 0x63, 0xeb,
	0x11, 0xd9, 0x61, 0x23, 0x73, 0xe2, 0x17, 0x14, 0x52, 0x0b, 0x8f, 0xc8, 0x37, 0x22, 0x30, 0x9f,
	0x74, 0x0a, 0xf3, 0xfe, 0x0a, 0x9e, 0x3a, 0xb4, 0xce, 0x5f, 0xc1, 0xbd, 0xdc, 0x01, 0xcd, 0x5f,
	0xc1, 0x55, 0xfd, 0xab, 0xfc, 0x15, 0xdc, 0x5b, 0xaa, 0x0c, 0x7f, 0x4b, 0x0f, 0xf3, 0xb7, 0xfc,
	0x40, 0x7f, 0x2b, 0xab, 0xfd, 0x4d, 0xea, 0x49, 0x7f, 0xe1, 0x03, 0x54, 0x99, 0x25, 0xde, 0xaa,
	0x77, 0xb3, 0xd5, 0xda, 0x69, 0xe6, 0xfc, 0xf6, 0x32, 0x41, 0xfb, 0xff, 0xab, 0xdb, 0x9a, 0x75,
	0x7d, 0x5b, 0xb3, 0x7e, 0xde, 0xd6, 0xac, 0xaf, 0x77, 0xb5, 0xc2, 0xf5, 0x5d, 0xad, 0xf0, 0xe3,
	0xae, 0x56, 0x78, 0xbf, 0xdd, 0x7c, 0xa1, 0xfd, 0x49, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x06,
	0x89, 0x5f, 0x66, 0xbc, 0x07, 0x00, 0x00,
}

func (m *GateCommTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateCommTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GateCommTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskData != nil {
		i -= len(m.TaskData)
		copy(dAtA[i:], m.TaskData)
		i = encodeVarintGate(dAtA, i, uint64(len(m.TaskData)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintGate(dAtA, i, uint64(m.Appid))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GateGetGiftListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateGetGiftListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GateGetGiftListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGate(dAtA, i, uint64(m.Uin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GateGetGiftListRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateGetGiftListRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GateGetGiftListRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.IsOn {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i -= len(m.Desc)
	copy(dAtA[i:], m.Desc)
	i = encodeVarintGate(dAtA, i, uint64(len(m.Desc)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.CustomUrl)
	copy(dAtA[i:], m.CustomUrl)
	i = encodeVarintGate(dAtA, i, uint64(len(m.CustomUrl)))
	i--
	dAtA[i] = 0x12
	if len(m.GiftUrl) > 0 {
		for iNdEx := len(m.GiftUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GiftUrl[iNdEx])
			copy(dAtA[i:], m.GiftUrl[iNdEx])
			i = encodeVarintGate(dAtA, i, uint64(len(m.GiftUrl[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GateGetVipCareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateGetVipCareReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GateGetVipCareReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGate(dAtA, i, uint64(m.Uin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GateGetVipCareRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateGetVipCareRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GateGetVipCareRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGate(dAtA, i, uint64(m.Notice))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGate(dAtA, i, uint64(m.Buss))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GateOidbFlagInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateOidbFlagInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GateOidbFlagInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ByetsValue != nil {
		i -= len(m.ByetsValue)
		copy(dAtA[i:], m.ByetsValue)
		i = encodeVarintGate(dAtA, i, uint64(len(m.ByetsValue)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintGate(dAtA, i, uint64(m.Fieled))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GatePrivilegeBaseInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatePrivilegeBaseInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatePrivilegeBaseInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGate(dAtA, i, uint64(m.UReqUin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GatePrivilegeBaseInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatePrivilegeBaseInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatePrivilegeBaseInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGate(dAtA, i, uint64(m.UIsGrayUsr))
	i--
	dAtA[i] = 0x28
	if len(m.VClosePriv) > 0 {
		for iNdEx := len(m.VClosePriv) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VClosePriv[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.VOpenPriv) > 0 {
		for iNdEx := len(m.VOpenPriv) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VOpenPriv[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.JumpUrl != nil {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintGate(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Msg != nil {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintGate(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatePrivilegeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatePrivilegeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatePrivilegeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGate(dAtA, i, uint64(m.IIsBig))
	i--
	dAtA[i] = 0x48
	if m.JumpUrl != nil {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintGate(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x42
	}
	if m.DeluxeIconUrl != nil {
		i -= len(m.DeluxeIconUrl)
		copy(dAtA[i:], m.DeluxeIconUrl)
		i = encodeVarintGate(dAtA, i, uint64(len(m.DeluxeIconUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if m.IconUrl != nil {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintGate(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x32
	}
	i = encodeVarintGate(dAtA, i, uint64(m.IFlag))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGate(dAtA, i, uint64(m.ILevel))
	i--
	dAtA[i] = 0x20
	i = encodeVarintGate(dAtA, i, uint64(m.IFeeType))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGate(dAtA, i, uint64(m.ISort))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGate(dAtA, i, uint64(m.IType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GateVaProfileGateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateVaProfileGateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GateVaProfileGateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StVipCare != nil {
		{
			size, err := m.StVipCare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.OidbFlag) > 0 {
		for iNdEx := len(m.OidbFlag) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OidbFlag[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TaskItem) > 0 {
		for iNdEx := len(m.TaskItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.StGiftReq != nil {
		{
			size, err := m.StGiftReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StPrivilegeReq != nil {
		{
			size, err := m.StPrivilegeReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintGate(dAtA, i, uint64(m.UCmd))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GateQidInfoItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateQidInfoItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GateQidInfoItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.LogoUrl)
	copy(dAtA[i:], m.LogoUrl)
	i = encodeVarintGate(dAtA, i, uint64(len(m.LogoUrl)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Color)
	copy(dAtA[i:], m.Color)
	i = encodeVarintGate(dAtA, i, uint64(len(m.Color)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Url)
	copy(dAtA[i:], m.Url)
	i = encodeVarintGate(dAtA, i, uint64(len(m.Url)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Qid)
	copy(dAtA[i:], m.Qid)
	i = encodeVarintGate(dAtA, i, uint64(len(m.Qid)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GateVaProfileGateRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateVaProfileGateRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GateVaProfileGateRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QidInfo != nil {
		{
			size, err := m.QidInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.StVipCare != nil {
		{
			size, err := m.StVipCare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OidbFlag) > 0 {
		for iNdEx := len(m.OidbFlag) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OidbFlag[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TaskItem) > 0 {
		for iNdEx := len(m.TaskItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.StGiftRsp != nil {
		{
			size, err := m.StGiftRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StPrivilegeRsp != nil {
		{
			size, err := m.StPrivilegeRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SRetMsg != nil {
		i -= len(m.SRetMsg)
		copy(dAtA[i:], m.SRetMsg)
		i = encodeVarintGate(dAtA, i, uint64(len(m.SRetMsg)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintGate(dAtA, i, uint64(m.IRetCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintGate(dAtA []byte, offset int, v uint64) int {
	offset -= sovGate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GateCommTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGate(uint64(m.Appid))
	if m.TaskData != nil {
		l = len(m.TaskData)
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateGetGiftListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGate(uint64(m.Uin))
	return n
}

func (m *GateGetGiftListRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GiftUrl) > 0 {
		for _, s := range m.GiftUrl {
			l = len(s)
			n += 1 + l + sovGate(uint64(l))
		}
	}
	l = len(m.CustomUrl)
	n += 1 + l + sovGate(uint64(l))
	l = len(m.Desc)
	n += 1 + l + sovGate(uint64(l))
	n += 2
	return n
}

func (m *GateGetVipCareReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGate(uint64(m.Uin))
	return n
}

func (m *GateGetVipCareRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGate(uint64(m.Buss))
	n += 1 + sovGate(uint64(m.Notice))
	return n
}

func (m *GateOidbFlagInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGate(uint64(m.Fieled))
	if m.ByetsValue != nil {
		l = len(m.ByetsValue)
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GatePrivilegeBaseInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGate(uint64(m.UReqUin))
	return n
}

func (m *GatePrivilegeBaseInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = len(m.Msg)
		n += 1 + l + sovGate(uint64(l))
	}
	if m.JumpUrl != nil {
		l = len(m.JumpUrl)
		n += 1 + l + sovGate(uint64(l))
	}
	if len(m.VOpenPriv) > 0 {
		for _, e := range m.VOpenPriv {
			l = e.Size()
			n += 1 + l + sovGate(uint64(l))
		}
	}
	if len(m.VClosePriv) > 0 {
		for _, e := range m.VClosePriv {
			l = e.Size()
			n += 1 + l + sovGate(uint64(l))
		}
	}
	n += 1 + sovGate(uint64(m.UIsGrayUsr))
	return n
}

func (m *GatePrivilegeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGate(uint64(m.IType))
	n += 1 + sovGate(uint64(m.ISort))
	n += 1 + sovGate(uint64(m.IFeeType))
	n += 1 + sovGate(uint64(m.ILevel))
	n += 1 + sovGate(uint64(m.IFlag))
	if m.IconUrl != nil {
		l = len(m.IconUrl)
		n += 1 + l + sovGate(uint64(l))
	}
	if m.DeluxeIconUrl != nil {
		l = len(m.DeluxeIconUrl)
		n += 1 + l + sovGate(uint64(l))
	}
	if m.JumpUrl != nil {
		l = len(m.JumpUrl)
		n += 1 + l + sovGate(uint64(l))
	}
	n += 1 + sovGate(uint64(m.IIsBig))
	return n
}

func (m *GateVaProfileGateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGate(uint64(m.UCmd))
	if m.StPrivilegeReq != nil {
		l = m.StPrivilegeReq.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if m.StGiftReq != nil {
		l = m.StGiftReq.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if len(m.TaskItem) > 0 {
		for _, e := range m.TaskItem {
			l = e.Size()
			n += 1 + l + sovGate(uint64(l))
		}
	}
	if len(m.OidbFlag) > 0 {
		for _, e := range m.OidbFlag {
			l = e.Size()
			n += 1 + l + sovGate(uint64(l))
		}
	}
	if m.StVipCare != nil {
		l = m.StVipCare.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateQidInfoItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Qid)
	n += 1 + l + sovGate(uint64(l))
	l = len(m.Url)
	n += 1 + l + sovGate(uint64(l))
	l = len(m.Color)
	n += 1 + l + sovGate(uint64(l))
	l = len(m.LogoUrl)
	n += 1 + l + sovGate(uint64(l))
	return n
}

func (m *GateVaProfileGateRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGate(uint64(m.IRetCode))
	if m.SRetMsg != nil {
		l = len(m.SRetMsg)
		n += 1 + l + sovGate(uint64(l))
	}
	if m.StPrivilegeRsp != nil {
		l = m.StPrivilegeRsp.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if m.StGiftRsp != nil {
		l = m.StGiftRsp.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if len(m.TaskItem) > 0 {
		for _, e := range m.TaskItem {
			l = e.Size()
			n += 1 + l + sovGate(uint64(l))
		}
	}
	if len(m.OidbFlag) > 0 {
		for _, e := range m.OidbFlag {
			l = e.Size()
			n += 1 + l + sovGate(uint64(l))
		}
	}
	if m.StVipCare != nil {
		l = m.StVipCare.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if m.QidInfo != nil {
		l = m.QidInfo.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func sovGate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGate(x uint64) (n int) {
	return sovGate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GateCommTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateCommTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateCommTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appid", wireType)
			}
			m.Appid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Appid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskData = append(m.TaskData[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskData == nil {
				m.TaskData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateGetGiftListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateGetGiftListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateGetGiftListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			m.Uin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateGetGiftListRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateGetGiftListRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateGetGiftListRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftUrl = append(m.GiftUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOn = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateGetVipCareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateGetVipCareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateGetVipCareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			m.Uin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateGetVipCareRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateGetVipCareRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateGetVipCareRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buss", wireType)
			}
			m.Buss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Buss |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			m.Notice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Notice |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateOidbFlagInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateOidbFlagInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateOidbFlagInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fieled", wireType)
			}
			m.Fieled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fieled |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByetsValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ByetsValue = append(m.ByetsValue[:0], dAtA[iNdEx:postIndex]...)
			if m.ByetsValue == nil {
				m.ByetsValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatePrivilegeBaseInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatePrivilegeBaseInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatePrivilegeBaseInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UReqUin", wireType)
			}
			m.UReqUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UReqUin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatePrivilegeBaseInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatePrivilegeBaseInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatePrivilegeBaseInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = append(m.JumpUrl[:0], dAtA[iNdEx:postIndex]...)
			if m.JumpUrl == nil {
				m.JumpUrl = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOpenPriv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VOpenPriv = append(m.VOpenPriv, &GatePrivilegeInfo{})
			if err := m.VOpenPriv[len(m.VOpenPriv)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VClosePriv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VClosePriv = append(m.VClosePriv, &GatePrivilegeInfo{})
			if err := m.VClosePriv[len(m.VClosePriv)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UIsGrayUsr", wireType)
			}
			m.UIsGrayUsr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UIsGrayUsr |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatePrivilegeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatePrivilegeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatePrivilegeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IType", wireType)
			}
			m.IType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISort", wireType)
			}
			m.ISort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ISort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IFeeType", wireType)
			}
			m.IFeeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IFeeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ILevel", wireType)
			}
			m.ILevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ILevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IFlag", wireType)
			}
			m.IFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = append(m.IconUrl[:0], dAtA[iNdEx:postIndex]...)
			if m.IconUrl == nil {
				m.IconUrl = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeluxeIconUrl", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeluxeIconUrl = append(m.DeluxeIconUrl[:0], dAtA[iNdEx:postIndex]...)
			if m.DeluxeIconUrl == nil {
				m.DeluxeIconUrl = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = append(m.JumpUrl[:0], dAtA[iNdEx:postIndex]...)
			if m.JumpUrl == nil {
				m.JumpUrl = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IIsBig", wireType)
			}
			m.IIsBig = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IIsBig |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateVaProfileGateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateVaProfileGateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateVaProfileGateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UCmd", wireType)
			}
			m.UCmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UCmd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StPrivilegeReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StPrivilegeReq == nil {
				m.StPrivilegeReq = &GatePrivilegeBaseInfoReq{}
			}
			if err := m.StPrivilegeReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StGiftReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StGiftReq == nil {
				m.StGiftReq = &GateGetGiftListReq{}
			}
			if err := m.StGiftReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskItem = append(m.TaskItem, &GateCommTaskInfo{})
			if err := m.TaskItem[len(m.TaskItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OidbFlag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OidbFlag = append(m.OidbFlag, &GateOidbFlagInfo{})
			if err := m.OidbFlag[len(m.OidbFlag)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StVipCare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StVipCare == nil {
				m.StVipCare = &GateGetVipCareReq{}
			}
			if err := m.StVipCare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateQidInfoItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateQidInfoItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateQidInfoItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateVaProfileGateRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateVaProfileGateRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateVaProfileGateRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IRetCode", wireType)
			}
			m.IRetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IRetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SRetMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SRetMsg = append(m.SRetMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.SRetMsg == nil {
				m.SRetMsg = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StPrivilegeRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StPrivilegeRsp == nil {
				m.StPrivilegeRsp = &GatePrivilegeBaseInfoRsp{}
			}
			if err := m.StPrivilegeRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StGiftRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StGiftRsp == nil {
				m.StGiftRsp = &GateGetGiftListRsp{}
			}
			if err := m.StGiftRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskItem = append(m.TaskItem, &GateCommTaskInfo{})
			if err := m.TaskItem[len(m.TaskItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OidbFlag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OidbFlag = append(m.OidbFlag, &GateOidbFlagInfo{})
			if err := m.OidbFlag[len(m.OidbFlag)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StVipCare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StVipCare == nil {
				m.StVipCare = &GateGetVipCareRsp{}
			}
			if err := m.StVipCare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QidInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QidInfo == nil {
				m.QidInfo = &GateQidInfoItem{}
			}
			if err := m.QidInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGate = fmt.Errorf("proto: unexpected end of group")
)
