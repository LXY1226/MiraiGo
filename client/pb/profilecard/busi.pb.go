// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/pb/profilecard/busi.proto

package profilecard

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BusiColor struct {
	R int32 `protobuf:"varint,1,opt,name=r" json:"r"`
	G int32 `protobuf:"varint,2,opt,name=g" json:"g"`
	B int32 `protobuf:"varint,3,opt,name=b" json:"b"`
}

func (m *BusiColor) Reset()         { *m = BusiColor{} }
func (m *BusiColor) String() string { return proto.CompactTextString(m) }
func (*BusiColor) ProtoMessage()    {}
func (*BusiColor) Descriptor() ([]byte, []int) {
	return fileDescriptor_5260ceb7ff7dd59c, []int{0}
}
func (m *BusiColor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusiColor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusiColor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusiColor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusiColor.Merge(m, src)
}
func (m *BusiColor) XXX_Size() int {
	return m.Size()
}
func (m *BusiColor) XXX_DiscardUnknown() {
	xxx_messageInfo_BusiColor.DiscardUnknown(m)
}

var xxx_messageInfo_BusiColor proto.InternalMessageInfo

func (m *BusiColor) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *BusiColor) GetG() int32 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *BusiColor) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type BusiComm struct {
	Ver            int32         `protobuf:"varint,1,opt,name=ver" json:"ver"`
	Seq            int32         `protobuf:"varint,2,opt,name=seq" json:"seq"`
	Fromuin        int64         `protobuf:"varint,3,opt,name=fromuin" json:"fromuin"`
	Touin          int64         `protobuf:"varint,4,opt,name=touin" json:"touin"`
	Service        int32         `protobuf:"varint,5,opt,name=service" json:"service"`
	SessionType    int32         `protobuf:"varint,6,opt,name=sessionType" json:"sessionType"`
	SessionKey     []byte        `protobuf:"bytes,7,opt,name=sessionKey" json:"sessionKey"`
	ClientIp       int32         `protobuf:"varint,8,opt,name=clientIp" json:"clientIp"`
	Display        *BusiUi       `protobuf:"bytes,9,opt,name=display" json:"display,omitempty"`
	Result         int32         `protobuf:"varint,10,opt,name=result" json:"result"`
	ErrMsg         string        `protobuf:"bytes,11,opt,name=errMsg" json:"errMsg"`
	Platform       int32         `protobuf:"varint,12,opt,name=platform" json:"platform"`
	Qqver          string        `protobuf:"bytes,13,opt,name=qqver" json:"qqver"`
	Build          int32         `protobuf:"varint,14,opt,name=build" json:"build"`
	MsgLoginSig    *BusiLoginSig `protobuf:"bytes,15,opt,name=msgLoginSig" json:"msgLoginSig,omitempty"`
	Version        int32         `protobuf:"varint,17,opt,name=version" json:"version"`
	MsgUinInfo     *BusiUinInfo  `protobuf:"bytes,18,opt,name=msgUinInfo" json:"msgUinInfo,omitempty"`
	MsgRichDisplay *BusiRichUi   `protobuf:"bytes,19,opt,name=msgRichDisplay" json:"msgRichDisplay,omitempty"`
}

func (m *BusiComm) Reset()         { *m = BusiComm{} }
func (m *BusiComm) String() string { return proto.CompactTextString(m) }
func (*BusiComm) ProtoMessage()    {}
func (*BusiComm) Descriptor() ([]byte, []int) {
	return fileDescriptor_5260ceb7ff7dd59c, []int{1}
}
func (m *BusiComm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusiComm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusiComm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusiComm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusiComm.Merge(m, src)
}
func (m *BusiComm) XXX_Size() int {
	return m.Size()
}
func (m *BusiComm) XXX_DiscardUnknown() {
	xxx_messageInfo_BusiComm.DiscardUnknown(m)
}

var xxx_messageInfo_BusiComm proto.InternalMessageInfo

func (m *BusiComm) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *BusiComm) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *BusiComm) GetFromuin() int64 {
	if m != nil {
		return m.Fromuin
	}
	return 0
}

func (m *BusiComm) GetTouin() int64 {
	if m != nil {
		return m.Touin
	}
	return 0
}

func (m *BusiComm) GetService() int32 {
	if m != nil {
		return m.Service
	}
	return 0
}

func (m *BusiComm) GetSessionType() int32 {
	if m != nil {
		return m.SessionType
	}
	return 0
}

func (m *BusiComm) GetSessionKey() []byte {
	if m != nil {
		return m.SessionKey
	}
	return nil
}

func (m *BusiComm) GetClientIp() int32 {
	if m != nil {
		return m.ClientIp
	}
	return 0
}

func (m *BusiComm) GetDisplay() *BusiUi {
	if m != nil {
		return m.Display
	}
	return nil
}

func (m *BusiComm) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *BusiComm) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *BusiComm) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *BusiComm) GetQqver() string {
	if m != nil {
		return m.Qqver
	}
	return ""
}

func (m *BusiComm) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *BusiComm) GetMsgLoginSig() *BusiLoginSig {
	if m != nil {
		return m.MsgLoginSig
	}
	return nil
}

func (m *BusiComm) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BusiComm) GetMsgUinInfo() *BusiUinInfo {
	if m != nil {
		return m.MsgUinInfo
	}
	return nil
}

func (m *BusiComm) GetMsgRichDisplay() *BusiRichUi {
	if m != nil {
		return m.MsgRichDisplay
	}
	return nil
}

type BusiCommonReq struct {
	ServiceCmd string               `protobuf:"bytes,1,opt,name=serviceCmd" json:"serviceCmd"`
	VcReq      *BusiVisitorCountReq `protobuf:"bytes,2,opt,name=vcReq" json:"vcReq,omitempty"`
	HrReq      *BusiHideRecordsReq  `protobuf:"bytes,3,opt,name=hrReq" json:"hrReq,omitempty"`
}

func (m *BusiCommonReq) Reset()         { *m = BusiCommonReq{} }
func (m *BusiCommonReq) String() string { return proto.CompactTextString(m) }
func (*BusiCommonReq) ProtoMessage()    {}
func (*BusiCommonReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5260ceb7ff7dd59c, []int{2}
}
func (m *BusiCommonReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusiCommonReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusiCommonReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusiCommonReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusiCommonReq.Merge(m, src)
}
func (m *BusiCommonReq) XXX_Size() int {
	return m.Size()
}
func (m *BusiCommonReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BusiCommonReq.DiscardUnknown(m)
}

var xxx_messageInfo_BusiCommonReq proto.InternalMessageInfo

func (m *BusiCommonReq) GetServiceCmd() string {
	if m != nil {
		return m.ServiceCmd
	}
	return ""
}

func (m *BusiCommonReq) GetVcReq() *BusiVisitorCountReq {
	if m != nil {
		return m.VcReq
	}
	return nil
}

func (m *BusiCommonReq) GetHrReq() *BusiHideRecordsReq {
	if m != nil {
		return m.HrReq
	}
	return nil
}

type BusiDetailRecord struct {
	Fuin     int32 `protobuf:"varint,1,opt,name=fuin" json:"fuin"`
	Source   int32 `protobuf:"varint,2,opt,name=source" json:"source"`
	Vtime    int32 `protobuf:"varint,3,opt,name=vtime" json:"vtime"`
	Mod      int32 `protobuf:"varint,4,opt,name=mod" json:"mod"`
	HideFlag int32 `protobuf:"varint,5,opt,name=hideFlag" json:"hideFlag"`
}

func (m *BusiDetailRecord) Reset()         { *m = BusiDetailRecord{} }
func (m *BusiDetailRecord) String() string { return proto.CompactTextString(m) }
func (*BusiDetailRecord) ProtoMessage()    {}
func (*BusiDetailRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_5260ceb7ff7dd59c, []int{3}
}
func (m *BusiDetailRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusiDetailRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusiDetailRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusiDetailRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusiDetailRecord.Merge(m, src)
}
func (m *BusiDetailRecord) XXX_Size() int {
	return m.Size()
}
func (m *BusiDetailRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_BusiDetailRecord.DiscardUnknown(m)
}

var xxx_messageInfo_BusiDetailRecord proto.InternalMessageInfo

func (m *BusiDetailRecord) GetFuin() int32 {
	if m != nil {
		return m.Fuin
	}
	return 0
}

func (m *BusiDetailRecord) GetSource() int32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *BusiDetailRecord) GetVtime() int32 {
	if m != nil {
		return m.Vtime
	}
	return 0
}

func (m *BusiDetailRecord) GetMod() int32 {
	if m != nil {
		return m.Mod
	}
	return 0
}

func (m *BusiDetailRecord) GetHideFlag() int32 {
	if m != nil {
		return m.HideFlag
	}
	return 0
}

type BusiHideRecordsReq struct {
	Huin    int32               `protobuf:"varint,1,opt,name=huin" json:"huin"`
	Fuin    int32               `protobuf:"varint,2,opt,name=fuin" json:"fuin"`
	Records []*BusiDetailRecord `protobuf:"bytes,3,rep,name=records" json:"records,omitempty"`
}

func (m *BusiHideRecordsReq) Reset()         { *m = BusiHideRecordsReq{} }
func (m *BusiHideRecordsReq) String() string { return proto.CompactTextString(m) }
func (*BusiHideRecordsReq) ProtoMessage()    {}
func (*BusiHideRecordsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5260ceb7ff7dd59c, []int{4}
}
func (m *BusiHideRecordsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusiHideRecordsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusiHideRecordsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusiHideRecordsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusiHideRecordsReq.Merge(m, src)
}
func (m *BusiHideRecordsReq) XXX_Size() int {
	return m.Size()
}
func (m *BusiHideRecordsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BusiHideRecordsReq.DiscardUnknown(m)
}

var xxx_messageInfo_BusiHideRecordsReq proto.InternalMessageInfo

func (m *BusiHideRecordsReq) GetHuin() int32 {
	if m != nil {
		return m.Huin
	}
	return 0
}

func (m *BusiHideRecordsReq) GetFuin() int32 {
	if m != nil {
		return m.Fuin
	}
	return 0
}

func (m *BusiHideRecordsReq) GetRecords() []*BusiDetailRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type BusiLabel struct {
	Name        []byte     `protobuf:"bytes,1,opt,name=name" json:"name"`
	EnumType    int32      `protobuf:"varint,2,opt,name=enumType" json:"enumType"`
	TextColor   *BusiColor `protobuf:"bytes,3,opt,name=textColor" json:"textColor,omitempty"`
	EdgingColor *BusiColor `protobuf:"bytes,4,opt,name=edgingColor" json:"edgingColor,omitempty"`
	LabelAttr   int32      `protobuf:"varint,5,opt,name=labelAttr" json:"labelAttr"`
	LabelType   int32      `protobuf:"varint,6,opt,name=labelType" json:"labelType"`
}

func (m *BusiLabel) Reset()         { *m = BusiLabel{} }
func (m *BusiLabel) String() string { return proto.CompactTextString(m) }
func (*BusiLabel) ProtoMessage()    {}
func (*BusiLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_5260ceb7ff7dd59c, []int{5}
}
func (m *BusiLabel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusiLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusiLabel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusiLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusiLabel.Merge(m, src)
}
func (m *BusiLabel) XXX_Size() int {
	return m.Size()
}
func (m *BusiLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_BusiLabel.DiscardUnknown(m)
}

var xxx_messageInfo_BusiLabel proto.InternalMessageInfo

func (m *BusiLabel) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *BusiLabel) GetEnumType() int32 {
	if m != nil {
		return m.EnumType
	}
	return 0
}

func (m *BusiLabel) GetTextColor() *BusiColor {
	if m != nil {
		return m.TextColor
	}
	return nil
}

func (m *BusiLabel) GetEdgingColor() *BusiColor {
	if m != nil {
		return m.EdgingColor
	}
	return nil
}

func (m *BusiLabel) GetLabelAttr() int32 {
	if m != nil {
		return m.LabelAttr
	}
	return 0
}

func (m *BusiLabel) GetLabelType() int32 {
	if m != nil {
		return m.LabelType
	}
	return 0
}

type BusiLoginSig struct {
	Type  int32  `protobuf:"varint,1,opt,name=type" json:"type"`
	Sig   []byte `protobuf:"bytes,2,opt,name=sig" json:"sig"`
	Appid int32  `protobuf:"varint,3,opt,name=appid" json:"appid"`
}

func (m *BusiLoginSig) Reset()         { *m = BusiLoginSig{} }
func (m *BusiLoginSig) String() string { return proto.CompactTextString(m) }
func (*BusiLoginSig) ProtoMessage()    {}
func (*BusiLoginSig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5260ceb7ff7dd59c, []int{6}
}
func (m *BusiLoginSig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusiLoginSig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusiLoginSig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusiLoginSig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusiLoginSig.Merge(m, src)
}
func (m *BusiLoginSig) XXX_Size() int {
	return m.Size()
}
func (m *BusiLoginSig) XXX_DiscardUnknown() {
	xxx_messageInfo_BusiLoginSig.DiscardUnknown(m)
}

var xxx_messageInfo_BusiLoginSig proto.InternalMessageInfo

func (m *BusiLoginSig) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BusiLoginSig) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *BusiLoginSig) GetAppid() int32 {
	if m != nil {
		return m.Appid
	}
	return 0
}

type BusiRichUi struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name"`
	ServiceUrl string `protobuf:"bytes,2,opt,name=serviceUrl" json:"serviceUrl"`
}

func (m *BusiRichUi) Reset()         { *m = BusiRichUi{} }
func (m *BusiRichUi) String() string { return proto.CompactTextString(m) }
func (*BusiRichUi) ProtoMessage()    {}
func (*BusiRichUi) Descriptor() ([]byte, []int) {
	return fileDescriptor_5260ceb7ff7dd59c, []int{7}
}
func (m *BusiRichUi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusiRichUi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusiRichUi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusiRichUi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusiRichUi.Merge(m, src)
}
func (m *BusiRichUi) XXX_Size() int {
	return m.Size()
}
func (m *BusiRichUi) XXX_DiscardUnknown() {
	xxx_messageInfo_BusiRichUi.DiscardUnknown(m)
}

var xxx_messageInfo_BusiRichUi proto.InternalMessageInfo

func (m *BusiRichUi) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BusiRichUi) GetServiceUrl() string {
	if m != nil {
		return m.ServiceUrl
	}
	return ""
}

type BusiUi struct {
	Url     string `protobuf:"bytes,1,opt,name=url" json:"url"`
	Title   string `protobuf:"bytes,2,opt,name=title" json:"title"`
	Content string `protobuf:"bytes,3,opt,name=content" json:"content"`
	JumpUrl string `protobuf:"bytes,4,opt,name=jumpUrl" json:"jumpUrl"`
}

func (m *BusiUi) Reset()         { *m = BusiUi{} }
func (m *BusiUi) String() string { return proto.CompactTextString(m) }
func (*BusiUi) ProtoMessage()    {}
func (*BusiUi) Descriptor() ([]byte, []int) {
	return fileDescriptor_5260ceb7ff7dd59c, []int{8}
}
func (m *BusiUi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusiUi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusiUi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusiUi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusiUi.Merge(m, src)
}
func (m *BusiUi) XXX_Size() int {
	return m.Size()
}
func (m *BusiUi) XXX_DiscardUnknown() {
	xxx_messageInfo_BusiUi.DiscardUnknown(m)
}

var xxx_messageInfo_BusiUi proto.InternalMessageInfo

func (m *BusiUi) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *BusiUi) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BusiUi) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *BusiUi) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

type BusiUinInfo struct {
	Int64Longitude int64 `protobuf:"varint,1,opt,name=int64Longitude" json:"int64Longitude"`
	Int64Latitude  int64 `protobuf:"varint,2,opt,name=int64Latitude" json:"int64Latitude"`
}

func (m *BusiUinInfo) Reset()         { *m = BusiUinInfo{} }
func (m *BusiUinInfo) String() string { return proto.CompactTextString(m) }
func (*BusiUinInfo) ProtoMessage()    {}
func (*BusiUinInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5260ceb7ff7dd59c, []int{9}
}
func (m *BusiUinInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusiUinInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusiUinInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusiUinInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusiUinInfo.Merge(m, src)
}
func (m *BusiUinInfo) XXX_Size() int {
	return m.Size()
}
func (m *BusiUinInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BusiUinInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BusiUinInfo proto.InternalMessageInfo

func (m *BusiUinInfo) GetInt64Longitude() int64 {
	if m != nil {
		return m.Int64Longitude
	}
	return 0
}

func (m *BusiUinInfo) GetInt64Latitude() int64 {
	if m != nil {
		return m.Int64Latitude
	}
	return 0
}

type BusiVisitorCountReq struct {
	Requireuin int32 `protobuf:"varint,1,opt,name=requireuin" json:"requireuin"`
	Operuin    int32 `protobuf:"varint,2,opt,name=operuin" json:"operuin"`
	Mod        int32 `protobuf:"varint,3,opt,name=mod" json:"mod"`
	ReportFlag int32 `protobuf:"varint,4,opt,name=reportFlag" json:"reportFlag"`
}

func (m *BusiVisitorCountReq) Reset()         { *m = BusiVisitorCountReq{} }
func (m *BusiVisitorCountReq) String() string { return proto.CompactTextString(m) }
func (*BusiVisitorCountReq) ProtoMessage()    {}
func (*BusiVisitorCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5260ceb7ff7dd59c, []int{10}
}
func (m *BusiVisitorCountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusiVisitorCountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusiVisitorCountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusiVisitorCountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusiVisitorCountReq.Merge(m, src)
}
func (m *BusiVisitorCountReq) XXX_Size() int {
	return m.Size()
}
func (m *BusiVisitorCountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BusiVisitorCountReq.DiscardUnknown(m)
}

var xxx_messageInfo_BusiVisitorCountReq proto.InternalMessageInfo

func (m *BusiVisitorCountReq) GetRequireuin() int32 {
	if m != nil {
		return m.Requireuin
	}
	return 0
}

func (m *BusiVisitorCountReq) GetOperuin() int32 {
	if m != nil {
		return m.Operuin
	}
	return 0
}

func (m *BusiVisitorCountReq) GetMod() int32 {
	if m != nil {
		return m.Mod
	}
	return 0
}

func (m *BusiVisitorCountReq) GetReportFlag() int32 {
	if m != nil {
		return m.ReportFlag
	}
	return 0
}

type BusiVisitorCountRsp struct {
	Requireuin int32 `protobuf:"varint,1,opt,name=requireuin" json:"requireuin"`
	TotalLike  int32 `protobuf:"varint,2,opt,name=totalLike" json:"totalLike"`
	TotalView  int32 `protobuf:"varint,3,opt,name=totalView" json:"totalView"`
	HotValue   int32 `protobuf:"varint,4,opt,name=hotValue" json:"hotValue"`
	RedValue   int32 `protobuf:"varint,5,opt,name=redValue" json:"redValue"`
	HotDiff    int32 `protobuf:"varint,6,opt,name=hotDiff" json:"hotDiff"`
}

func (m *BusiVisitorCountRsp) Reset()         { *m = BusiVisitorCountRsp{} }
func (m *BusiVisitorCountRsp) String() string { return proto.CompactTextString(m) }
func (*BusiVisitorCountRsp) ProtoMessage()    {}
func (*BusiVisitorCountRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5260ceb7ff7dd59c, []int{11}
}
func (m *BusiVisitorCountRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusiVisitorCountRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusiVisitorCountRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusiVisitorCountRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusiVisitorCountRsp.Merge(m, src)
}
func (m *BusiVisitorCountRsp) XXX_Size() int {
	return m.Size()
}
func (m *BusiVisitorCountRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_BusiVisitorCountRsp.DiscardUnknown(m)
}

var xxx_messageInfo_BusiVisitorCountRsp proto.InternalMessageInfo

func (m *BusiVisitorCountRsp) GetRequireuin() int32 {
	if m != nil {
		return m.Requireuin
	}
	return 0
}

func (m *BusiVisitorCountRsp) GetTotalLike() int32 {
	if m != nil {
		return m.TotalLike
	}
	return 0
}

func (m *BusiVisitorCountRsp) GetTotalView() int32 {
	if m != nil {
		return m.TotalView
	}
	return 0
}

func (m *BusiVisitorCountRsp) GetHotValue() int32 {
	if m != nil {
		return m.HotValue
	}
	return 0
}

func (m *BusiVisitorCountRsp) GetRedValue() int32 {
	if m != nil {
		return m.RedValue
	}
	return 0
}

func (m *BusiVisitorCountRsp) GetHotDiff() int32 {
	if m != nil {
		return m.HotDiff
	}
	return 0
}

func init() {
	proto.RegisterType((*BusiColor)(nil), "BusiColor")
	proto.RegisterType((*BusiComm)(nil), "BusiComm")
	proto.RegisterType((*BusiCommonReq)(nil), "BusiCommonReq")
	proto.RegisterType((*BusiDetailRecord)(nil), "BusiDetailRecord")
	proto.RegisterType((*BusiHideRecordsReq)(nil), "BusiHideRecordsReq")
	proto.RegisterType((*BusiLabel)(nil), "BusiLabel")
	proto.RegisterType((*BusiLoginSig)(nil), "BusiLoginSig")
	proto.RegisterType((*BusiRichUi)(nil), "BusiRichUi")
	proto.RegisterType((*BusiUi)(nil), "BusiUi")
	proto.RegisterType((*BusiUinInfo)(nil), "BusiUinInfo")
	proto.RegisterType((*BusiVisitorCountReq)(nil), "BusiVisitorCountReq")
	proto.RegisterType((*BusiVisitorCountRsp)(nil), "BusiVisitorCountRsp")
}

func init() { proto.RegisterFile("client/pb/profilecard/busi.proto", fileDescriptor_5260ceb7ff7dd59c) }

var fileDescriptor_5260ceb7ff7dd59c = []byte{
	// 933 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0xc1, 0x6e, 0xf3, 0x44,
	0x10, 0xc7, 0xeb, 0x26, 0x69, 0x9a, 0x49, 0x52, 0xf8, 0xb6, 0x08, 0x59, 0x08, 0x85, 0x60, 0x21,
	0x08, 0x1f, 0x55, 0x2a, 0x15, 0xc4, 0x85, 0x13, 0x6d, 0x05, 0x7c, 0x22, 0x5c, 0x0c, 0xe9, 0x01,
	0x71, 0x71, 0xe2, 0x8d, 0xb3, 0x60, 0x7b, 0x9d, 0xf5, 0x3a, 0x50, 0x89, 0x47, 0xe0, 0xc0, 0x95,
	0x1b, 0x8f, 0xf3, 0x1d, 0x7b, 0xe4, 0x84, 0x50, 0x7b, 0xe0, 0x01, 0x78, 0x01, 0x34, 0xbb, 0x5e,
	0x67, 0x37, 0xe1, 0xc0, 0x31, 0xbf, 0xf9, 0xef, 0x78, 0x76, 0x66, 0xff, 0xa3, 0xc0, 0x78, 0x99,
	0x32, 0x9a, 0xcb, 0xcb, 0x62, 0x71, 0x59, 0x08, 0xbe, 0x62, 0x29, 0x5d, 0x46, 0x22, 0xbe, 0x5c,
	0x54, 0x25, 0x9b, 0x16, 0x82, 0x4b, 0x1e, 0x7c, 0x0e, 0xbd, 0xeb, 0xaa, 0x64, 0x37, 0x3c, 0xe5,
	0x82, 0x10, 0xf0, 0x84, 0xef, 0x8d, 0xbd, 0x49, 0xe7, 0xba, 0xfd, 0xf2, 0xcf, 0xb7, 0x8e, 0x42,
	0x4f, 0xb1, 0xc4, 0x3f, 0xb6, 0x59, 0x82, 0x6c, 0xe1, 0xb7, 0x6c, 0xb6, 0x08, 0xfe, 0x69, 0xc3,
	0xa9, 0xce, 0x94, 0x65, 0xe4, 0x75, 0x68, 0x6d, 0xa9, 0x9b, 0x0a, 0x01, 0xf2, 0x92, 0x6e, 0x9c,
	0x74, 0x08, 0xc8, 0x08, 0xba, 0x2b, 0xc1, 0xb3, 0x8a, 0xe5, 0x2a, 0x6d, 0xab, 0x8e, 0x19, 0x48,
	0xde, 0x80, 0x8e, 0xe4, 0x18, 0x6d, 0x5b, 0x51, 0x8d, 0xf0, 0x6c, 0x49, 0xc5, 0x96, 0x2d, 0xa9,
	0xdf, 0xb1, 0xf2, 0x1a, 0x48, 0xde, 0x85, 0x7e, 0x49, 0xcb, 0x92, 0xf1, 0xfc, 0x9b, 0xfb, 0x82,
	0xfa, 0x27, 0x96, 0xc6, 0x0e, 0x90, 0x77, 0x00, 0xea, 0x9f, 0x5f, 0xd2, 0x7b, 0xbf, 0x3b, 0xf6,
	0x26, 0x83, 0x5a, 0x66, 0x71, 0x32, 0x86, 0x53, 0xdd, 0xd3, 0x17, 0x85, 0x7f, 0x6a, 0xa5, 0x6a,
	0x28, 0x79, 0x1b, 0xba, 0x31, 0x2b, 0x8b, 0x34, 0xba, 0xf7, 0x7b, 0x63, 0x6f, 0xd2, 0xbf, 0xea,
	0x4e, 0xb1, 0x2f, 0x73, 0x16, 0x1a, 0x4e, 0xde, 0x84, 0x13, 0x41, 0xcb, 0x2a, 0x95, 0x3e, 0x58,
	0x29, 0x6a, 0x86, 0x51, 0x2a, 0xc4, 0x57, 0x65, 0xe2, 0xf7, 0xc7, 0xde, 0xa4, 0x67, 0xa2, 0x9a,
	0x61, 0x01, 0x45, 0x1a, 0xc9, 0x15, 0x17, 0x99, 0x3f, 0xb0, 0x0b, 0x30, 0x14, 0x9b, 0xb5, 0xd9,
	0x60, 0xfb, 0x87, 0xd6, 0x71, 0x8d, 0x30, 0xb6, 0xa8, 0x58, 0x1a, 0xfb, 0x67, 0xd6, 0x51, 0x8d,
	0xc8, 0x25, 0xf4, 0xb3, 0x32, 0x99, 0xf1, 0x84, 0xe5, 0x5f, 0xb3, 0xc4, 0x7f, 0x45, 0x15, 0x3f,
	0x54, 0xc5, 0x1b, 0x18, 0xda, 0x0a, 0xec, 0xfc, 0x96, 0x0a, 0xec, 0x8c, 0xff, 0xcc, 0xee, 0x7c,
	0x0d, 0xc9, 0x05, 0x40, 0x56, 0x26, 0x73, 0x96, 0xbf, 0xc8, 0x57, 0xdc, 0x27, 0x2a, 0xdf, 0xa0,
	0x6e, 0x86, 0x62, 0xa1, 0x15, 0x27, 0x1f, 0xc2, 0x59, 0x56, 0x26, 0x21, 0x5b, 0xae, 0x6f, 0xeb,
	0xf6, 0x9d, 0xab, 0x13, 0x7d, 0x75, 0x02, 0xf9, 0x9c, 0x85, 0x7b, 0x92, 0xe0, 0x17, 0x0f, 0x86,
	0xe6, 0xd5, 0xf1, 0x3c, 0xa4, 0x1b, 0x3d, 0x46, 0x35, 0xf9, 0x9b, 0x2c, 0x56, 0x2f, 0xb0, 0xb7,
	0x1b, 0xa3, 0xe1, 0xe4, 0x39, 0x74, 0xb6, 0xcb, 0xb0, 0x7e, 0x8a, 0xfd, 0xab, 0xd7, 0xd4, 0x37,
	0xee, 0x58, 0xc9, 0x24, 0x17, 0x37, 0xbc, 0xca, 0x65, 0x48, 0x37, 0xa1, 0x96, 0x90, 0xf7, 0xa1,
	0xb3, 0x16, 0xa8, 0x6d, 0x29, 0xed, 0xb9, 0xd2, 0x7e, 0xc1, 0x62, 0x1a, 0xd2, 0x25, 0x17, 0x71,
	0xa9, 0xa4, 0x4a, 0x11, 0xfc, 0xee, 0xc1, 0xab, 0x18, 0xbd, 0xa5, 0x32, 0x62, 0xa9, 0x8e, 0x13,
	0x1f, 0xda, 0x2b, 0x7c, 0xbb, 0xb6, 0x1b, 0x14, 0xc1, 0x49, 0x97, 0xbc, 0x12, 0x4b, 0xea, 0x38,
	0xa2, 0x66, 0x38, 0xab, 0xad, 0x64, 0x19, 0x75, 0x9c, 0xa6, 0x11, 0x1a, 0x29, 0xe3, 0xb1, 0xb2,
	0x43, 0x63, 0xa4, 0x8c, 0xc7, 0xf8, 0x3a, 0xd6, 0x2c, 0xa6, 0x9f, 0xa5, 0x51, 0xe2, 0xb8, 0xa1,
	0xa1, 0x41, 0x05, 0xe4, 0xb0, 0x7e, 0xac, 0x71, 0x7d, 0x50, 0x23, 0x92, 0xa6, 0xfa, 0xe3, 0x83,
	0xea, 0x3f, 0x80, 0xae, 0xd0, 0x19, 0xfc, 0xd6, 0xb8, 0x35, 0xe9, 0x5f, 0x3d, 0x9b, 0xee, 0xdf,
	0x3d, 0x34, 0x8a, 0xe0, 0x6f, 0x4f, 0x2f, 0x9a, 0x59, 0xb4, 0xa0, 0x29, 0x26, 0xcd, 0xa3, 0x8c,
	0xaa, 0xcf, 0x19, 0x97, 0x29, 0x82, 0x17, 0xa0, 0x79, 0x95, 0x29, 0xab, 0xda, 0x9f, 0x6c, 0x28,
	0x99, 0x40, 0x4f, 0xd2, 0x9f, 0xa4, 0xda, 0x58, 0xf5, 0x48, 0x60, 0xda, 0xec, 0xb0, 0x70, 0x17,
	0x24, 0x17, 0xd0, 0xa7, 0x71, 0xc2, 0xf2, 0x44, 0x6b, 0xdb, 0x07, 0x5a, 0x3b, 0x4c, 0x02, 0xe8,
	0xa5, 0x58, 0xdc, 0xa7, 0x52, 0x0a, 0xa7, 0x77, 0x3b, 0xdc, 0x68, 0x0e, 0x36, 0xc9, 0x0e, 0x07,
	0xdf, 0xc1, 0xc0, 0xb6, 0x0c, 0xde, 0x55, 0xa2, 0xdc, 0x69, 0x2d, 0x12, 0xb5, 0x0d, 0x99, 0x5e,
	0xae, 0x83, 0x66, 0x1b, 0xb2, 0x04, 0x07, 0x1f, 0x15, 0x05, 0x8b, 0xdd, 0xc1, 0x2b, 0x14, 0xcc,
	0x00, 0x76, 0x76, 0x70, 0xfa, 0xd8, 0x73, 0xfa, 0xb8, 0xb3, 0xc1, 0x5c, 0xa4, 0xea, 0x13, 0xfb,
	0x36, 0x98, 0x8b, 0x34, 0xf8, 0x19, 0x4e, 0xb4, 0x1d, 0xb1, 0x96, 0x4a, 0xa4, 0x4e, 0x22, 0x04,
	0x6a, 0xf3, 0x32, 0x99, 0x52, 0x27, 0x85, 0x46, 0xe8, 0xff, 0x25, 0xcf, 0x25, 0xcd, 0xa5, 0xaa,
	0xd4, 0x44, 0x0d, 0xc4, 0xf8, 0xf7, 0x55, 0x56, 0x60, 0x01, 0x6d, 0x3b, 0x5e, 0xc3, 0x20, 0x81,
	0xbe, 0xb5, 0x0c, 0xc8, 0x05, 0x9c, 0xb1, 0x5c, 0x7e, 0xfc, 0xd1, 0x8c, 0xe7, 0x09, 0x93, 0x55,
	0xac, 0xaf, 0x65, 0xb6, 0xfd, 0x5e, 0x8c, 0x3c, 0x87, 0xa1, 0x26, 0x91, 0xd4, 0xe2, 0x63, 0x4b,
	0xec, 0x86, 0x82, 0xdf, 0x3c, 0x38, 0xff, 0x0f, 0x83, 0x63, 0x93, 0x04, 0xdd, 0x54, 0x4c, 0xd0,
	0xfd, 0xb7, 0x6f, 0x71, 0xbc, 0x06, 0x2f, 0xa8, 0xd8, 0x37, 0x81, 0x81, 0xc6, 0x8b, 0xad, 0x7d,
	0x2f, 0xaa, 0xec, 0x05, 0x17, 0x52, 0xb9, 0xb1, 0xed, 0x66, 0x37, 0x1c, 0x8d, 0x71, 0x58, 0x5b,
	0x59, 0xfc, 0xcf, 0xda, 0x02, 0xe8, 0x49, 0x2e, 0xa3, 0x74, 0xc6, 0x7e, 0x70, 0xfd, 0xb2, 0xc3,
	0x8d, 0xe6, 0x8e, 0xd1, 0x1f, 0x9d, 0x2a, 0x77, 0x58, 0xed, 0x0d, 0x2e, 0xef, 0xa2, 0xb4, 0xa2,
	0x4e, 0xa5, 0x0d, 0x45, 0x85, 0xa0, 0xb1, 0x56, 0x38, 0x9b, 0xc5, 0x50, 0xec, 0xd3, 0x9a, 0xcb,
	0x5b, 0xb6, 0x5a, 0x39, 0xd6, 0x30, 0xf0, 0xfa, 0xbd, 0x97, 0x8f, 0x23, 0xef, 0xe1, 0x71, 0xe4,
	0xfd, 0xf5, 0x38, 0xf2, 0x7e, 0x7d, 0x1a, 0x1d, 0x3d, 0x3c, 0x8d, 0x8e, 0xfe, 0x78, 0x1a, 0x1d,
	0x7d, 0x3b, 0x9c, 0x7e, 0x62, 0xfd, 0x3d, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0x60, 0xbe, 0x60,
	0xf8, 0xb6, 0x08, 0x00, 0x00,
}

func (m *BusiColor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusiColor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusiColor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintBusi(dAtA, i, uint64(m.B))
	i--
	dAtA[i] = 0x18
	i = encodeVarintBusi(dAtA, i, uint64(m.G))
	i--
	dAtA[i] = 0x10
	i = encodeVarintBusi(dAtA, i, uint64(m.R))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *BusiComm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusiComm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusiComm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgRichDisplay != nil {
		{
			size, err := m.MsgRichDisplay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBusi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.MsgUinInfo != nil {
		{
			size, err := m.MsgUinInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBusi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	i = encodeVarintBusi(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	if m.MsgLoginSig != nil {
		{
			size, err := m.MsgLoginSig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBusi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	i = encodeVarintBusi(dAtA, i, uint64(m.Build))
	i--
	dAtA[i] = 0x70
	i -= len(m.Qqver)
	copy(dAtA[i:], m.Qqver)
	i = encodeVarintBusi(dAtA, i, uint64(len(m.Qqver)))
	i--
	dAtA[i] = 0x6a
	i = encodeVarintBusi(dAtA, i, uint64(m.Platform))
	i--
	dAtA[i] = 0x60
	i -= len(m.ErrMsg)
	copy(dAtA[i:], m.ErrMsg)
	i = encodeVarintBusi(dAtA, i, uint64(len(m.ErrMsg)))
	i--
	dAtA[i] = 0x5a
	i = encodeVarintBusi(dAtA, i, uint64(m.Result))
	i--
	dAtA[i] = 0x50
	if m.Display != nil {
		{
			size, err := m.Display.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBusi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	i = encodeVarintBusi(dAtA, i, uint64(m.ClientIp))
	i--
	dAtA[i] = 0x40
	if m.SessionKey != nil {
		i -= len(m.SessionKey)
		copy(dAtA[i:], m.SessionKey)
		i = encodeVarintBusi(dAtA, i, uint64(len(m.SessionKey)))
		i--
		dAtA[i] = 0x3a
	}
	i = encodeVarintBusi(dAtA, i, uint64(m.SessionType))
	i--
	dAtA[i] = 0x30
	i = encodeVarintBusi(dAtA, i, uint64(m.Service))
	i--
	dAtA[i] = 0x28
	i = encodeVarintBusi(dAtA, i, uint64(m.Touin))
	i--
	dAtA[i] = 0x20
	i = encodeVarintBusi(dAtA, i, uint64(m.Fromuin))
	i--
	dAtA[i] = 0x18
	i = encodeVarintBusi(dAtA, i, uint64(m.Seq))
	i--
	dAtA[i] = 0x10
	i = encodeVarintBusi(dAtA, i, uint64(m.Ver))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *BusiCommonReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusiCommonReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusiCommonReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HrReq != nil {
		{
			size, err := m.HrReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBusi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VcReq != nil {
		{
			size, err := m.VcReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBusi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.ServiceCmd)
	copy(dAtA[i:], m.ServiceCmd)
	i = encodeVarintBusi(dAtA, i, uint64(len(m.ServiceCmd)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BusiDetailRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusiDetailRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusiDetailRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintBusi(dAtA, i, uint64(m.HideFlag))
	i--
	dAtA[i] = 0x28
	i = encodeVarintBusi(dAtA, i, uint64(m.Mod))
	i--
	dAtA[i] = 0x20
	i = encodeVarintBusi(dAtA, i, uint64(m.Vtime))
	i--
	dAtA[i] = 0x18
	i = encodeVarintBusi(dAtA, i, uint64(m.Source))
	i--
	dAtA[i] = 0x10
	i = encodeVarintBusi(dAtA, i, uint64(m.Fuin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *BusiHideRecordsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusiHideRecordsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusiHideRecordsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBusi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintBusi(dAtA, i, uint64(m.Fuin))
	i--
	dAtA[i] = 0x10
	i = encodeVarintBusi(dAtA, i, uint64(m.Huin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *BusiLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusiLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusiLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintBusi(dAtA, i, uint64(m.LabelType))
	i--
	dAtA[i] = 0x30
	i = encodeVarintBusi(dAtA, i, uint64(m.LabelAttr))
	i--
	dAtA[i] = 0x28
	if m.EdgingColor != nil {
		{
			size, err := m.EdgingColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBusi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TextColor != nil {
		{
			size, err := m.TextColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBusi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintBusi(dAtA, i, uint64(m.EnumType))
	i--
	dAtA[i] = 0x10
	if m.Name != nil {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBusi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BusiLoginSig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusiLoginSig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusiLoginSig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintBusi(dAtA, i, uint64(m.Appid))
	i--
	dAtA[i] = 0x18
	if m.Sig != nil {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintBusi(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintBusi(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *BusiRichUi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusiRichUi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusiRichUi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ServiceUrl)
	copy(dAtA[i:], m.ServiceUrl)
	i = encodeVarintBusi(dAtA, i, uint64(len(m.ServiceUrl)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintBusi(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BusiUi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusiUi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusiUi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.JumpUrl)
	copy(dAtA[i:], m.JumpUrl)
	i = encodeVarintBusi(dAtA, i, uint64(len(m.JumpUrl)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Content)
	copy(dAtA[i:], m.Content)
	i = encodeVarintBusi(dAtA, i, uint64(len(m.Content)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Title)
	copy(dAtA[i:], m.Title)
	i = encodeVarintBusi(dAtA, i, uint64(len(m.Title)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Url)
	copy(dAtA[i:], m.Url)
	i = encodeVarintBusi(dAtA, i, uint64(len(m.Url)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BusiUinInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusiUinInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusiUinInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintBusi(dAtA, i, uint64(m.Int64Latitude))
	i--
	dAtA[i] = 0x10
	i = encodeVarintBusi(dAtA, i, uint64(m.Int64Longitude))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *BusiVisitorCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusiVisitorCountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusiVisitorCountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintBusi(dAtA, i, uint64(m.ReportFlag))
	i--
	dAtA[i] = 0x20
	i = encodeVarintBusi(dAtA, i, uint64(m.Mod))
	i--
	dAtA[i] = 0x18
	i = encodeVarintBusi(dAtA, i, uint64(m.Operuin))
	i--
	dAtA[i] = 0x10
	i = encodeVarintBusi(dAtA, i, uint64(m.Requireuin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *BusiVisitorCountRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusiVisitorCountRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusiVisitorCountRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintBusi(dAtA, i, uint64(m.HotDiff))
	i--
	dAtA[i] = 0x30
	i = encodeVarintBusi(dAtA, i, uint64(m.RedValue))
	i--
	dAtA[i] = 0x28
	i = encodeVarintBusi(dAtA, i, uint64(m.HotValue))
	i--
	dAtA[i] = 0x20
	i = encodeVarintBusi(dAtA, i, uint64(m.TotalView))
	i--
	dAtA[i] = 0x18
	i = encodeVarintBusi(dAtA, i, uint64(m.TotalLike))
	i--
	dAtA[i] = 0x10
	i = encodeVarintBusi(dAtA, i, uint64(m.Requireuin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintBusi(dAtA []byte, offset int, v uint64) int {
	offset -= sovBusi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BusiColor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBusi(uint64(m.R))
	n += 1 + sovBusi(uint64(m.G))
	n += 1 + sovBusi(uint64(m.B))
	return n
}

func (m *BusiComm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBusi(uint64(m.Ver))
	n += 1 + sovBusi(uint64(m.Seq))
	n += 1 + sovBusi(uint64(m.Fromuin))
	n += 1 + sovBusi(uint64(m.Touin))
	n += 1 + sovBusi(uint64(m.Service))
	n += 1 + sovBusi(uint64(m.SessionType))
	if m.SessionKey != nil {
		l = len(m.SessionKey)
		n += 1 + l + sovBusi(uint64(l))
	}
	n += 1 + sovBusi(uint64(m.ClientIp))
	if m.Display != nil {
		l = m.Display.Size()
		n += 1 + l + sovBusi(uint64(l))
	}
	n += 1 + sovBusi(uint64(m.Result))
	l = len(m.ErrMsg)
	n += 1 + l + sovBusi(uint64(l))
	n += 1 + sovBusi(uint64(m.Platform))
	l = len(m.Qqver)
	n += 1 + l + sovBusi(uint64(l))
	n += 1 + sovBusi(uint64(m.Build))
	if m.MsgLoginSig != nil {
		l = m.MsgLoginSig.Size()
		n += 1 + l + sovBusi(uint64(l))
	}
	n += 2 + sovBusi(uint64(m.Version))
	if m.MsgUinInfo != nil {
		l = m.MsgUinInfo.Size()
		n += 2 + l + sovBusi(uint64(l))
	}
	if m.MsgRichDisplay != nil {
		l = m.MsgRichDisplay.Size()
		n += 2 + l + sovBusi(uint64(l))
	}
	return n
}

func (m *BusiCommonReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceCmd)
	n += 1 + l + sovBusi(uint64(l))
	if m.VcReq != nil {
		l = m.VcReq.Size()
		n += 1 + l + sovBusi(uint64(l))
	}
	if m.HrReq != nil {
		l = m.HrReq.Size()
		n += 1 + l + sovBusi(uint64(l))
	}
	return n
}

func (m *BusiDetailRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBusi(uint64(m.Fuin))
	n += 1 + sovBusi(uint64(m.Source))
	n += 1 + sovBusi(uint64(m.Vtime))
	n += 1 + sovBusi(uint64(m.Mod))
	n += 1 + sovBusi(uint64(m.HideFlag))
	return n
}

func (m *BusiHideRecordsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBusi(uint64(m.Huin))
	n += 1 + sovBusi(uint64(m.Fuin))
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovBusi(uint64(l))
		}
	}
	return n
}

func (m *BusiLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(m.Name)
		n += 1 + l + sovBusi(uint64(l))
	}
	n += 1 + sovBusi(uint64(m.EnumType))
	if m.TextColor != nil {
		l = m.TextColor.Size()
		n += 1 + l + sovBusi(uint64(l))
	}
	if m.EdgingColor != nil {
		l = m.EdgingColor.Size()
		n += 1 + l + sovBusi(uint64(l))
	}
	n += 1 + sovBusi(uint64(m.LabelAttr))
	n += 1 + sovBusi(uint64(m.LabelType))
	return n
}

func (m *BusiLoginSig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBusi(uint64(m.Type))
	if m.Sig != nil {
		l = len(m.Sig)
		n += 1 + l + sovBusi(uint64(l))
	}
	n += 1 + sovBusi(uint64(m.Appid))
	return n
}

func (m *BusiRichUi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovBusi(uint64(l))
	l = len(m.ServiceUrl)
	n += 1 + l + sovBusi(uint64(l))
	return n
}

func (m *BusiUi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	n += 1 + l + sovBusi(uint64(l))
	l = len(m.Title)
	n += 1 + l + sovBusi(uint64(l))
	l = len(m.Content)
	n += 1 + l + sovBusi(uint64(l))
	l = len(m.JumpUrl)
	n += 1 + l + sovBusi(uint64(l))
	return n
}

func (m *BusiUinInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBusi(uint64(m.Int64Longitude))
	n += 1 + sovBusi(uint64(m.Int64Latitude))
	return n
}

func (m *BusiVisitorCountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBusi(uint64(m.Requireuin))
	n += 1 + sovBusi(uint64(m.Operuin))
	n += 1 + sovBusi(uint64(m.Mod))
	n += 1 + sovBusi(uint64(m.ReportFlag))
	return n
}

func (m *BusiVisitorCountRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBusi(uint64(m.Requireuin))
	n += 1 + sovBusi(uint64(m.TotalLike))
	n += 1 + sovBusi(uint64(m.TotalView))
	n += 1 + sovBusi(uint64(m.HotValue))
	n += 1 + sovBusi(uint64(m.RedValue))
	n += 1 + sovBusi(uint64(m.HotDiff))
	return n
}

func sovBusi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBusi(x uint64) (n int) {
	return sovBusi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BusiColor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusiColor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusiColor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			m.R = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.R |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			m.G = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.G |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			m.B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.B |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBusi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusiComm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusiComm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusiComm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromuin", wireType)
			}
			m.Fromuin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fromuin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Touin", wireType)
			}
			m.Touin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Touin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			m.Service = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Service |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionType", wireType)
			}
			m.SessionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionKey = append(m.SessionKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionKey == nil {
				m.SessionKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			m.ClientIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Display", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Display == nil {
				m.Display = &BusiUi{}
			}
			if err := m.Display.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qqver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qqver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgLoginSig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgLoginSig == nil {
				m.MsgLoginSig = &BusiLoginSig{}
			}
			if err := m.MsgLoginSig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgUinInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgUinInfo == nil {
				m.MsgUinInfo = &BusiUinInfo{}
			}
			if err := m.MsgUinInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgRichDisplay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgRichDisplay == nil {
				m.MsgRichDisplay = &BusiRichUi{}
			}
			if err := m.MsgRichDisplay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusiCommonReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusiCommonReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusiCommonReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceCmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceCmd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VcReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VcReq == nil {
				m.VcReq = &BusiVisitorCountReq{}
			}
			if err := m.VcReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HrReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HrReq == nil {
				m.HrReq = &BusiHideRecordsReq{}
			}
			if err := m.HrReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusiDetailRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusiDetailRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusiDetailRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fuin", wireType)
			}
			m.Fuin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fuin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vtime", wireType)
			}
			m.Vtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vtime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mod", wireType)
			}
			m.Mod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideFlag", wireType)
			}
			m.HideFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HideFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBusi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusiHideRecordsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusiHideRecordsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusiHideRecordsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Huin", wireType)
			}
			m.Huin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Huin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fuin", wireType)
			}
			m.Fuin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fuin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &BusiDetailRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusiLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusiLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusiLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnumType", wireType)
			}
			m.EnumType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnumType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TextColor == nil {
				m.TextColor = &BusiColor{}
			}
			if err := m.TextColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgingColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EdgingColor == nil {
				m.EdgingColor = &BusiColor{}
			}
			if err := m.EdgingColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelAttr", wireType)
			}
			m.LabelAttr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelAttr |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelType", wireType)
			}
			m.LabelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBusi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusiLoginSig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusiLoginSig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusiLoginSig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appid", wireType)
			}
			m.Appid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Appid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBusi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusiRichUi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusiRichUi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusiRichUi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusiUi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusiUi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusiUi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBusi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBusi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBusi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusiUinInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusiUinInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusiUinInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Longitude", wireType)
			}
			m.Int64Longitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64Longitude |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Latitude", wireType)
			}
			m.Int64Latitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64Latitude |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBusi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusiVisitorCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusiVisitorCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusiVisitorCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requireuin", wireType)
			}
			m.Requireuin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Requireuin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operuin", wireType)
			}
			m.Operuin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operuin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mod", wireType)
			}
			m.Mod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportFlag", wireType)
			}
			m.ReportFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBusi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusiVisitorCountRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBusi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusiVisitorCountRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusiVisitorCountRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requireuin", wireType)
			}
			m.Requireuin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Requireuin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLike", wireType)
			}
			m.TotalLike = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLike |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalView", wireType)
			}
			m.TotalView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalView |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotValue", wireType)
			}
			m.HotValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HotValue |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedValue", wireType)
			}
			m.RedValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedValue |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotDiff", wireType)
			}
			m.HotDiff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HotDiff |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBusi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBusi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBusi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBusi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBusi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBusi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBusi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBusi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBusi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBusi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBusi = fmt.Errorf("proto: unexpected end of group")
)
