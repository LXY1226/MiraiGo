// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oidb0x88d.proto

package oidb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type D88DGroupHeadPortraitInfo struct {
	PicId uint32 `protobuf:"varint,1,opt,name=picId" json:"picId"`
}

func (m *D88DGroupHeadPortraitInfo) Reset()         { *m = D88DGroupHeadPortraitInfo{} }
func (m *D88DGroupHeadPortraitInfo) String() string { return proto.CompactTextString(m) }
func (*D88DGroupHeadPortraitInfo) ProtoMessage()    {}
func (*D88DGroupHeadPortraitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5f3d5280584d888, []int{0}
}
func (m *D88DGroupHeadPortraitInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D88DGroupHeadPortraitInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D88DGroupHeadPortraitInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D88DGroupHeadPortraitInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D88DGroupHeadPortraitInfo.Merge(m, src)
}
func (m *D88DGroupHeadPortraitInfo) XXX_Size() int {
	return m.Size()
}
func (m *D88DGroupHeadPortraitInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_D88DGroupHeadPortraitInfo.DiscardUnknown(m)
}

var xxx_messageInfo_D88DGroupHeadPortraitInfo proto.InternalMessageInfo

func (m *D88DGroupHeadPortraitInfo) GetPicId() uint32 {
	if m != nil {
		return m.PicId
	}
	return 0
}

type D88DGroupHeadPortrait struct {
	PicCount            uint32                       `protobuf:"varint,1,opt,name=picCount" json:"picCount"`
	MsgInfo             []*D88DGroupHeadPortraitInfo `protobuf:"bytes,2,rep,name=msgInfo" json:"msgInfo,omitempty"`
	DefaultId           uint32                       `protobuf:"varint,3,opt,name=defaultId" json:"defaultId"`
	VerifyingPicCnt     uint32                       `protobuf:"varint,4,opt,name=verifyingPicCnt" json:"verifyingPicCnt"`
	MsgVerifyingPicInfo []*D88DGroupHeadPortraitInfo `protobuf:"bytes,5,rep,name=msgVerifyingPicInfo" json:"msgVerifyingPicInfo,omitempty"`
}

func (m *D88DGroupHeadPortrait) Reset()         { *m = D88DGroupHeadPortrait{} }
func (m *D88DGroupHeadPortrait) String() string { return proto.CompactTextString(m) }
func (*D88DGroupHeadPortrait) ProtoMessage()    {}
func (*D88DGroupHeadPortrait) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5f3d5280584d888, []int{1}
}
func (m *D88DGroupHeadPortrait) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D88DGroupHeadPortrait) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D88DGroupHeadPortrait.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D88DGroupHeadPortrait) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D88DGroupHeadPortrait.Merge(m, src)
}
func (m *D88DGroupHeadPortrait) XXX_Size() int {
	return m.Size()
}
func (m *D88DGroupHeadPortrait) XXX_DiscardUnknown() {
	xxx_messageInfo_D88DGroupHeadPortrait.DiscardUnknown(m)
}

var xxx_messageInfo_D88DGroupHeadPortrait proto.InternalMessageInfo

func (m *D88DGroupHeadPortrait) GetPicCount() uint32 {
	if m != nil {
		return m.PicCount
	}
	return 0
}

func (m *D88DGroupHeadPortrait) GetMsgInfo() []*D88DGroupHeadPortraitInfo {
	if m != nil {
		return m.MsgInfo
	}
	return nil
}

func (m *D88DGroupHeadPortrait) GetDefaultId() uint32 {
	if m != nil {
		return m.DefaultId
	}
	return 0
}

func (m *D88DGroupHeadPortrait) GetVerifyingPicCnt() uint32 {
	if m != nil {
		return m.VerifyingPicCnt
	}
	return 0
}

func (m *D88DGroupHeadPortrait) GetMsgVerifyingPicInfo() []*D88DGroupHeadPortraitInfo {
	if m != nil {
		return m.MsgVerifyingPicInfo
	}
	return nil
}

type D88DGroupExInfoOnly struct {
	TribeId          uint32 `protobuf:"varint,1,opt,name=tribeId" json:"tribeId"`
	MoneyForAddGroup uint32 `protobuf:"varint,2,opt,name=moneyForAddGroup" json:"moneyForAddGroup"`
}

func (m *D88DGroupExInfoOnly) Reset()         { *m = D88DGroupExInfoOnly{} }
func (m *D88DGroupExInfoOnly) String() string { return proto.CompactTextString(m) }
func (*D88DGroupExInfoOnly) ProtoMessage()    {}
func (*D88DGroupExInfoOnly) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5f3d5280584d888, []int{2}
}
func (m *D88DGroupExInfoOnly) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D88DGroupExInfoOnly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D88DGroupExInfoOnly.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D88DGroupExInfoOnly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D88DGroupExInfoOnly.Merge(m, src)
}
func (m *D88DGroupExInfoOnly) XXX_Size() int {
	return m.Size()
}
func (m *D88DGroupExInfoOnly) XXX_DiscardUnknown() {
	xxx_messageInfo_D88DGroupExInfoOnly.DiscardUnknown(m)
}

var xxx_messageInfo_D88DGroupExInfoOnly proto.InternalMessageInfo

func (m *D88DGroupExInfoOnly) GetTribeId() uint32 {
	if m != nil {
		return m.TribeId
	}
	return 0
}

func (m *D88DGroupExInfoOnly) GetMoneyForAddGroup() uint32 {
	if m != nil {
		return m.MoneyForAddGroup
	}
	return 0
}

type D88DGroupInfo struct {
	GroupOwner              uint64                 `protobuf:"varint,1,opt,name=groupOwner" json:"groupOwner"`
	GroupCreateTime         uint32                 `protobuf:"varint,2,opt,name=groupCreateTime" json:"groupCreateTime"`
	GroupFlag               uint32                 `protobuf:"varint,3,opt,name=groupFlag" json:"groupFlag"`
	GroupFlagExt            uint32                 `protobuf:"varint,4,opt,name=groupFlagExt" json:"groupFlagExt"`
	GroupMemberMaxNum       uint32                 `protobuf:"varint,5,opt,name=groupMemberMaxNum" json:"groupMemberMaxNum"`
	GroupMemberNum          uint32                 `protobuf:"varint,6,opt,name=groupMemberNum" json:"groupMemberNum"`
	GroupOption             uint32                 `protobuf:"varint,7,opt,name=groupOption" json:"groupOption"`
	GroupClassExt           uint32                 `protobuf:"varint,8,opt,name=groupClassExt" json:"groupClassExt"`
	GroupSpecialClass       uint32                 `protobuf:"varint,9,opt,name=groupSpecialClass" json:"groupSpecialClass"`
	GroupLevel              uint32                 `protobuf:"varint,10,opt,name=groupLevel" json:"groupLevel"`
	GroupFace               uint32                 `protobuf:"varint,11,opt,name=groupFace" json:"groupFace"`
	GroupDefaultPage        uint32                 `protobuf:"varint,12,opt,name=groupDefaultPage" json:"groupDefaultPage"`
	GroupInfoSeq            uint32                 `protobuf:"varint,13,opt,name=groupInfoSeq" json:"groupInfoSeq"`
	GroupRoamingTime        uint32                 `protobuf:"varint,14,opt,name=groupRoamingTime" json:"groupRoamingTime"`
	GroupName               []byte                 `protobuf:"bytes,15,opt,name=groupName" json:"groupName"`
	GroupMemo               []byte                 `protobuf:"bytes,16,opt,name=groupMemo" json:"groupMemo"`
	GroupFingerMemo         []byte                 `protobuf:"bytes,17,opt,name=groupFingerMemo" json:"groupFingerMemo"`
	GroupClassText          []byte                 `protobuf:"bytes,18,opt,name=groupClassText" json:"groupClassText"`
	GroupAllianceCode       []uint32               `protobuf:"varint,19,rep,name=groupAllianceCode" json:"groupAllianceCode,omitempty"`
	GroupExtraAadmNum       uint32                 `protobuf:"varint,20,opt,name=groupExtraAadmNum" json:"groupExtraAadmNum"`
	GroupUin                uint64                 `protobuf:"varint,21,opt,name=groupUin" json:"groupUin"`
	GroupCurMsgSeq          uint32                 `protobuf:"varint,22,opt,name=groupCurMsgSeq" json:"groupCurMsgSeq"`
	GroupLastMsgTime        uint32                 `protobuf:"varint,23,opt,name=groupLastMsgTime" json:"groupLastMsgTime"`
	GroupQuestion           []byte                 `protobuf:"bytes,24,opt,name=groupQuestion" json:"groupQuestion"`
	GroupAnswer             []byte                 `protobuf:"bytes,25,opt,name=groupAnswer" json:"groupAnswer"`
	GroupVisitorMaxNum      uint32                 `protobuf:"varint,26,opt,name=groupVisitorMaxNum" json:"groupVisitorMaxNum"`
	GroupVisitorCurNum      uint32                 `protobuf:"varint,27,opt,name=groupVisitorCurNum" json:"groupVisitorCurNum"`
	LevelNameSeq            uint32                 `protobuf:"varint,28,opt,name=levelNameSeq" json:"levelNameSeq"`
	GroupAdminMaxNum        uint32                 `protobuf:"varint,29,opt,name=groupAdminMaxNum" json:"groupAdminMaxNum"`
	GroupAioSkinTimestamp   uint32                 `protobuf:"varint,30,opt,name=groupAioSkinTimestamp" json:"groupAioSkinTimestamp"`
	GroupBoardSkinTimestamp uint32                 `protobuf:"varint,31,opt,name=groupBoardSkinTimestamp" json:"groupBoardSkinTimestamp"`
	GroupAioSkinUrl         []byte                 `protobuf:"bytes,32,opt,name=groupAioSkinUrl" json:"groupAioSkinUrl"`
	GroupBoardSkinUrl       []byte                 `protobuf:"bytes,33,opt,name=groupBoardSkinUrl" json:"groupBoardSkinUrl"`
	GroupCoverSkinTimestamp uint32                 `protobuf:"varint,34,opt,name=groupCoverSkinTimestamp" json:"groupCoverSkinTimestamp"`
	GroupCoverSkinUrl       []byte                 `protobuf:"bytes,35,opt,name=groupCoverSkinUrl" json:"groupCoverSkinUrl"`
	GroupGrade              uint32                 `protobuf:"varint,36,opt,name=groupGrade" json:"groupGrade"`
	ActiveMemberNum         uint32                 `protobuf:"varint,37,opt,name=activeMemberNum" json:"activeMemberNum"`
	CertificationType       uint32                 `protobuf:"varint,38,opt,name=certificationType" json:"certificationType"`
	CertificationText       []byte                 `protobuf:"bytes,39,opt,name=certificationText" json:"certificationText"`
	GroupRichFingerMemo     []byte                 `protobuf:"bytes,40,opt,name=groupRichFingerMemo" json:"groupRichFingerMemo"`
	TagRecord               []*D88DTagRecord       `protobuf:"bytes,41,rep,name=tagRecord" json:"tagRecord,omitempty"`
	GroupGeoInfo            *D88DGroupGeoInfo      `protobuf:"bytes,42,opt,name=groupGeoInfo" json:"groupGeoInfo,omitempty"`
	HeadPortraitSeq         uint32                 `protobuf:"varint,43,opt,name=headPortraitSeq" json:"headPortraitSeq"`
	MsgHeadPortrait         *D88DGroupHeadPortrait `protobuf:"bytes,44,opt,name=msgHeadPortrait" json:"msgHeadPortrait,omitempty"`
	ShutupTimestamp         uint32                 `protobuf:"varint,45,opt,name=shutupTimestamp" json:"shutupTimestamp"`
	ShutupTimestampMe       uint32                 `protobuf:"varint,46,opt,name=shutupTimestampMe" json:"shutupTimestampMe"`
	CreateSourceFlag        uint32                 `protobuf:"varint,47,opt,name=createSourceFlag" json:"createSourceFlag"`
	CmduinMsgSeq            uint32                 `protobuf:"varint,48,opt,name=cmduinMsgSeq" json:"cmduinMsgSeq"`
	CmduinJoinTime          uint32                 `protobuf:"varint,49,opt,name=cmduinJoinTime" json:"cmduinJoinTime"`
	CmduinUinFlag           uint32                 `protobuf:"varint,50,opt,name=cmduinUinFlag" json:"cmduinUinFlag"`
	CmduinFlagEx            uint32                 `protobuf:"varint,51,opt,name=cmduinFlagEx" json:"cmduinFlagEx"`
	CmduinNewMobileFlag     uint32                 `protobuf:"varint,52,opt,name=cmduinNewMobileFlag" json:"cmduinNewMobileFlag"`
	CmduinReadMsgSeq        uint32                 `protobuf:"varint,53,opt,name=cmduinReadMsgSeq" json:"cmduinReadMsgSeq"`
	CmduinLastMsgTime       uint32                 `protobuf:"varint,54,opt,name=cmduinLastMsgTime" json:"cmduinLastMsgTime"`
	GroupTypeFlag           uint32                 `protobuf:"varint,55,opt,name=groupTypeFlag" json:"groupTypeFlag"`
	AppPrivilegeFlag        uint32                 `protobuf:"varint,56,opt,name=appPrivilegeFlag" json:"appPrivilegeFlag"`
	StGroupExInfo           *D88DGroupExInfoOnly   `protobuf:"bytes,57,opt,name=stGroupExInfo" json:"stGroupExInfo,omitempty"`
	GroupSecLevel           uint32                 `protobuf:"varint,58,opt,name=groupSecLevel" json:"groupSecLevel"`
	GroupSecLevelInfo       uint32                 `protobuf:"varint,59,opt,name=groupSecLevelInfo" json:"groupSecLevelInfo"`
	CmduinPrivilege         uint32                 `protobuf:"varint,60,opt,name=cmduinPrivilege" json:"cmduinPrivilege"`
	PoidInfo                []byte                 `protobuf:"bytes,61,opt,name=poidInfo" json:"poidInfo"`
	CmduinFlagEx2           uint32                 `protobuf:"varint,62,opt,name=cmduinFlagEx2" json:"cmduinFlagEx2"`
	ConfUin                 uint64                 `protobuf:"varint,63,opt,name=confUin" json:"confUin"`
	ConfMaxMsgSeq           uint32                 `protobuf:"varint,64,opt,name=confMaxMsgSeq" json:"confMaxMsgSeq"`
	ConfToGroupTime         uint32                 `protobuf:"varint,65,opt,name=confToGroupTime" json:"confToGroupTime"`
	PasswordRedbagTime      uint32                 `protobuf:"varint,66,opt,name=passwordRedbagTime" json:"passwordRedbagTime"`
	SubscriptionUin         uint64                 `protobuf:"varint,67,opt,name=subscriptionUin" json:"subscriptionUin"`
	MemberListChangeSeq     uint32                 `protobuf:"varint,68,opt,name=memberListChangeSeq" json:"memberListChangeSeq"`
	MembercardSeq           uint32                 `protobuf:"varint,69,opt,name=membercardSeq" json:"membercardSeq"`
	RootId                  uint64                 `protobuf:"varint,70,opt,name=rootId" json:"rootId"`
	ParentId                uint64                 `protobuf:"varint,71,opt,name=parentId" json:"parentId"`
	TeamSeq                 uint32                 `protobuf:"varint,72,opt,name=teamSeq" json:"teamSeq"`
	HistoryMsgBeginTime     uint64                 `protobuf:"varint,73,opt,name=historyMsgBeginTime" json:"historyMsgBeginTime"`
	InviteNoAuthNumLimit    uint64                 `protobuf:"varint,74,opt,name=inviteNoAuthNumLimit" json:"inviteNoAuthNumLimit"`
	CmduinHistoryMsgSeq     uint32                 `protobuf:"varint,75,opt,name=cmduinHistoryMsgSeq" json:"cmduinHistoryMsgSeq"`
	CmduinJoinMsgSeq        uint32                 `protobuf:"varint,76,opt,name=cmduinJoinMsgSeq" json:"cmduinJoinMsgSeq"`
	GroupFlagext3           uint32                 `protobuf:"varint,77,opt,name=groupFlagext3" json:"groupFlagext3"`
	GroupOpenAppid          uint32                 `protobuf:"varint,78,opt,name=groupOpenAppid" json:"groupOpenAppid"`
	IsConfGroup             uint32                 `protobuf:"varint,79,opt,name=isConfGroup" json:"isConfGroup"`
	IsModifyConfGroupFace   uint32                 `protobuf:"varint,80,opt,name=isModifyConfGroupFace" json:"isModifyConfGroupFace"`
	IsModifyConfGroupName   uint32                 `protobuf:"varint,81,opt,name=isModifyConfGroupName" json:"isModifyConfGroupName"`
	NoFingerOpenFlag        uint32                 `protobuf:"varint,82,opt,name=noFingerOpenFlag" json:"noFingerOpenFlag"`
	NoCodeFingerOpenFlag    uint32                 `protobuf:"varint,83,opt,name=noCodeFingerOpenFlag" json:"noCodeFingerOpenFlag"`
}

func (m *D88DGroupInfo) Reset()         { *m = D88DGroupInfo{} }
func (m *D88DGroupInfo) String() string { return proto.CompactTextString(m) }
func (*D88DGroupInfo) ProtoMessage()    {}
func (*D88DGroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5f3d5280584d888, []int{3}
}
func (m *D88DGroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D88DGroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D88DGroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D88DGroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D88DGroupInfo.Merge(m, src)
}
func (m *D88DGroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *D88DGroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_D88DGroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_D88DGroupInfo proto.InternalMessageInfo

func (m *D88DGroupInfo) GetGroupOwner() uint64 {
	if m != nil {
		return m.GroupOwner
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupCreateTime() uint32 {
	if m != nil {
		return m.GroupCreateTime
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupFlag() uint32 {
	if m != nil {
		return m.GroupFlag
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupFlagExt() uint32 {
	if m != nil {
		return m.GroupFlagExt
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupMemberMaxNum() uint32 {
	if m != nil {
		return m.GroupMemberMaxNum
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupMemberNum() uint32 {
	if m != nil {
		return m.GroupMemberNum
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupOption() uint32 {
	if m != nil {
		return m.GroupOption
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupClassExt() uint32 {
	if m != nil {
		return m.GroupClassExt
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupSpecialClass() uint32 {
	if m != nil {
		return m.GroupSpecialClass
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupLevel() uint32 {
	if m != nil {
		return m.GroupLevel
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupFace() uint32 {
	if m != nil {
		return m.GroupFace
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupDefaultPage() uint32 {
	if m != nil {
		return m.GroupDefaultPage
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupInfoSeq() uint32 {
	if m != nil {
		return m.GroupInfoSeq
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupRoamingTime() uint32 {
	if m != nil {
		return m.GroupRoamingTime
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupName() []byte {
	if m != nil {
		return m.GroupName
	}
	return nil
}

func (m *D88DGroupInfo) GetGroupMemo() []byte {
	if m != nil {
		return m.GroupMemo
	}
	return nil
}

func (m *D88DGroupInfo) GetGroupFingerMemo() []byte {
	if m != nil {
		return m.GroupFingerMemo
	}
	return nil
}

func (m *D88DGroupInfo) GetGroupClassText() []byte {
	if m != nil {
		return m.GroupClassText
	}
	return nil
}

func (m *D88DGroupInfo) GetGroupAllianceCode() []uint32 {
	if m != nil {
		return m.GroupAllianceCode
	}
	return nil
}

func (m *D88DGroupInfo) GetGroupExtraAadmNum() uint32 {
	if m != nil {
		return m.GroupExtraAadmNum
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupUin() uint64 {
	if m != nil {
		return m.GroupUin
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupCurMsgSeq() uint32 {
	if m != nil {
		return m.GroupCurMsgSeq
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupLastMsgTime() uint32 {
	if m != nil {
		return m.GroupLastMsgTime
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupQuestion() []byte {
	if m != nil {
		return m.GroupQuestion
	}
	return nil
}

func (m *D88DGroupInfo) GetGroupAnswer() []byte {
	if m != nil {
		return m.GroupAnswer
	}
	return nil
}

func (m *D88DGroupInfo) GetGroupVisitorMaxNum() uint32 {
	if m != nil {
		return m.GroupVisitorMaxNum
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupVisitorCurNum() uint32 {
	if m != nil {
		return m.GroupVisitorCurNum
	}
	return 0
}

func (m *D88DGroupInfo) GetLevelNameSeq() uint32 {
	if m != nil {
		return m.LevelNameSeq
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupAdminMaxNum() uint32 {
	if m != nil {
		return m.GroupAdminMaxNum
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupAioSkinTimestamp() uint32 {
	if m != nil {
		return m.GroupAioSkinTimestamp
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupBoardSkinTimestamp() uint32 {
	if m != nil {
		return m.GroupBoardSkinTimestamp
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupAioSkinUrl() []byte {
	if m != nil {
		return m.GroupAioSkinUrl
	}
	return nil
}

func (m *D88DGroupInfo) GetGroupBoardSkinUrl() []byte {
	if m != nil {
		return m.GroupBoardSkinUrl
	}
	return nil
}

func (m *D88DGroupInfo) GetGroupCoverSkinTimestamp() uint32 {
	if m != nil {
		return m.GroupCoverSkinTimestamp
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupCoverSkinUrl() []byte {
	if m != nil {
		return m.GroupCoverSkinUrl
	}
	return nil
}

func (m *D88DGroupInfo) GetGroupGrade() uint32 {
	if m != nil {
		return m.GroupGrade
	}
	return 0
}

func (m *D88DGroupInfo) GetActiveMemberNum() uint32 {
	if m != nil {
		return m.ActiveMemberNum
	}
	return 0
}

func (m *D88DGroupInfo) GetCertificationType() uint32 {
	if m != nil {
		return m.CertificationType
	}
	return 0
}

func (m *D88DGroupInfo) GetCertificationText() []byte {
	if m != nil {
		return m.CertificationText
	}
	return nil
}

func (m *D88DGroupInfo) GetGroupRichFingerMemo() []byte {
	if m != nil {
		return m.GroupRichFingerMemo
	}
	return nil
}

func (m *D88DGroupInfo) GetTagRecord() []*D88DTagRecord {
	if m != nil {
		return m.TagRecord
	}
	return nil
}

func (m *D88DGroupInfo) GetGroupGeoInfo() *D88DGroupGeoInfo {
	if m != nil {
		return m.GroupGeoInfo
	}
	return nil
}

func (m *D88DGroupInfo) GetHeadPortraitSeq() uint32 {
	if m != nil {
		return m.HeadPortraitSeq
	}
	return 0
}

func (m *D88DGroupInfo) GetMsgHeadPortrait() *D88DGroupHeadPortrait {
	if m != nil {
		return m.MsgHeadPortrait
	}
	return nil
}

func (m *D88DGroupInfo) GetShutupTimestamp() uint32 {
	if m != nil {
		return m.ShutupTimestamp
	}
	return 0
}

func (m *D88DGroupInfo) GetShutupTimestampMe() uint32 {
	if m != nil {
		return m.ShutupTimestampMe
	}
	return 0
}

func (m *D88DGroupInfo) GetCreateSourceFlag() uint32 {
	if m != nil {
		return m.CreateSourceFlag
	}
	return 0
}

func (m *D88DGroupInfo) GetCmduinMsgSeq() uint32 {
	if m != nil {
		return m.CmduinMsgSeq
	}
	return 0
}

func (m *D88DGroupInfo) GetCmduinJoinTime() uint32 {
	if m != nil {
		return m.CmduinJoinTime
	}
	return 0
}

func (m *D88DGroupInfo) GetCmduinUinFlag() uint32 {
	if m != nil {
		return m.CmduinUinFlag
	}
	return 0
}

func (m *D88DGroupInfo) GetCmduinFlagEx() uint32 {
	if m != nil {
		return m.CmduinFlagEx
	}
	return 0
}

func (m *D88DGroupInfo) GetCmduinNewMobileFlag() uint32 {
	if m != nil {
		return m.CmduinNewMobileFlag
	}
	return 0
}

func (m *D88DGroupInfo) GetCmduinReadMsgSeq() uint32 {
	if m != nil {
		return m.CmduinReadMsgSeq
	}
	return 0
}

func (m *D88DGroupInfo) GetCmduinLastMsgTime() uint32 {
	if m != nil {
		return m.CmduinLastMsgTime
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupTypeFlag() uint32 {
	if m != nil {
		return m.GroupTypeFlag
	}
	return 0
}

func (m *D88DGroupInfo) GetAppPrivilegeFlag() uint32 {
	if m != nil {
		return m.AppPrivilegeFlag
	}
	return 0
}

func (m *D88DGroupInfo) GetStGroupExInfo() *D88DGroupExInfoOnly {
	if m != nil {
		return m.StGroupExInfo
	}
	return nil
}

func (m *D88DGroupInfo) GetGroupSecLevel() uint32 {
	if m != nil {
		return m.GroupSecLevel
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupSecLevelInfo() uint32 {
	if m != nil {
		return m.GroupSecLevelInfo
	}
	return 0
}

func (m *D88DGroupInfo) GetCmduinPrivilege() uint32 {
	if m != nil {
		return m.CmduinPrivilege
	}
	return 0
}

func (m *D88DGroupInfo) GetPoidInfo() []byte {
	if m != nil {
		return m.PoidInfo
	}
	return nil
}

func (m *D88DGroupInfo) GetCmduinFlagEx2() uint32 {
	if m != nil {
		return m.CmduinFlagEx2
	}
	return 0
}

func (m *D88DGroupInfo) GetConfUin() uint64 {
	if m != nil {
		return m.ConfUin
	}
	return 0
}

func (m *D88DGroupInfo) GetConfMaxMsgSeq() uint32 {
	if m != nil {
		return m.ConfMaxMsgSeq
	}
	return 0
}

func (m *D88DGroupInfo) GetConfToGroupTime() uint32 {
	if m != nil {
		return m.ConfToGroupTime
	}
	return 0
}

func (m *D88DGroupInfo) GetPasswordRedbagTime() uint32 {
	if m != nil {
		return m.PasswordRedbagTime
	}
	return 0
}

func (m *D88DGroupInfo) GetSubscriptionUin() uint64 {
	if m != nil {
		return m.SubscriptionUin
	}
	return 0
}

func (m *D88DGroupInfo) GetMemberListChangeSeq() uint32 {
	if m != nil {
		return m.MemberListChangeSeq
	}
	return 0
}

func (m *D88DGroupInfo) GetMembercardSeq() uint32 {
	if m != nil {
		return m.MembercardSeq
	}
	return 0
}

func (m *D88DGroupInfo) GetRootId() uint64 {
	if m != nil {
		return m.RootId
	}
	return 0
}

func (m *D88DGroupInfo) GetParentId() uint64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *D88DGroupInfo) GetTeamSeq() uint32 {
	if m != nil {
		return m.TeamSeq
	}
	return 0
}

func (m *D88DGroupInfo) GetHistoryMsgBeginTime() uint64 {
	if m != nil {
		return m.HistoryMsgBeginTime
	}
	return 0
}

func (m *D88DGroupInfo) GetInviteNoAuthNumLimit() uint64 {
	if m != nil {
		return m.InviteNoAuthNumLimit
	}
	return 0
}

func (m *D88DGroupInfo) GetCmduinHistoryMsgSeq() uint32 {
	if m != nil {
		return m.CmduinHistoryMsgSeq
	}
	return 0
}

func (m *D88DGroupInfo) GetCmduinJoinMsgSeq() uint32 {
	if m != nil {
		return m.CmduinJoinMsgSeq
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupFlagext3() uint32 {
	if m != nil {
		return m.GroupFlagext3
	}
	return 0
}

func (m *D88DGroupInfo) GetGroupOpenAppid() uint32 {
	if m != nil {
		return m.GroupOpenAppid
	}
	return 0
}

func (m *D88DGroupInfo) GetIsConfGroup() uint32 {
	if m != nil {
		return m.IsConfGroup
	}
	return 0
}

func (m *D88DGroupInfo) GetIsModifyConfGroupFace() uint32 {
	if m != nil {
		return m.IsModifyConfGroupFace
	}
	return 0
}

func (m *D88DGroupInfo) GetIsModifyConfGroupName() uint32 {
	if m != nil {
		return m.IsModifyConfGroupName
	}
	return 0
}

func (m *D88DGroupInfo) GetNoFingerOpenFlag() uint32 {
	if m != nil {
		return m.NoFingerOpenFlag
	}
	return 0
}

func (m *D88DGroupInfo) GetNoCodeFingerOpenFlag() uint32 {
	if m != nil {
		return m.NoCodeFingerOpenFlag
	}
	return 0
}

type ReqGroupInfo struct {
	GroupCode            uint64         `protobuf:"varint,1,opt,name=groupCode" json:"groupCode"`
	Stgroupinfo          *D88DGroupInfo `protobuf:"bytes,2,opt,name=stgroupinfo" json:"stgroupinfo,omitempty"`
	LastGetGroupNameTime uint32         `protobuf:"varint,3,opt,name=lastGetGroupNameTime" json:"lastGetGroupNameTime"`
}

func (m *ReqGroupInfo) Reset()         { *m = ReqGroupInfo{} }
func (m *ReqGroupInfo) String() string { return proto.CompactTextString(m) }
func (*ReqGroupInfo) ProtoMessage()    {}
func (*ReqGroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5f3d5280584d888, []int{4}
}
func (m *ReqGroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqGroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqGroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqGroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqGroupInfo.Merge(m, src)
}
func (m *ReqGroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReqGroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqGroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReqGroupInfo proto.InternalMessageInfo

func (m *ReqGroupInfo) GetGroupCode() uint64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *ReqGroupInfo) GetStgroupinfo() *D88DGroupInfo {
	if m != nil {
		return m.Stgroupinfo
	}
	return nil
}

func (m *ReqGroupInfo) GetLastGetGroupNameTime() uint32 {
	if m != nil {
		return m.LastGetGroupNameTime
	}
	return 0
}

type D88DReqBody struct {
	AppId           uint32          `protobuf:"varint,1,opt,name=appId" json:"appId"`
	ReqGroupInfo    []*ReqGroupInfo `protobuf:"bytes,2,rep,name=reqGroupInfo" json:"reqGroupInfo,omitempty"`
	PcClientVersion uint32          `protobuf:"varint,3,opt,name=pcClientVersion" json:"pcClientVersion"`
}

func (m *D88DReqBody) Reset()         { *m = D88DReqBody{} }
func (m *D88DReqBody) String() string { return proto.CompactTextString(m) }
func (*D88DReqBody) ProtoMessage()    {}
func (*D88DReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5f3d5280584d888, []int{5}
}
func (m *D88DReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D88DReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D88DReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D88DReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D88DReqBody.Merge(m, src)
}
func (m *D88DReqBody) XXX_Size() int {
	return m.Size()
}
func (m *D88DReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_D88DReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_D88DReqBody proto.InternalMessageInfo

func (m *D88DReqBody) GetAppId() uint32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *D88DReqBody) GetReqGroupInfo() []*ReqGroupInfo {
	if m != nil {
		return m.ReqGroupInfo
	}
	return nil
}

func (m *D88DReqBody) GetPcClientVersion() uint32 {
	if m != nil {
		return m.PcClientVersion
	}
	return 0
}

type RspGroupInfo struct {
	GroupCode uint64         `protobuf:"varint,1,opt,name=groupCode" json:"groupCode"`
	Result    uint32         `protobuf:"varint,2,opt,name=result" json:"result"`
	GroupInfo *D88DGroupInfo `protobuf:"bytes,3,opt,name=groupInfo" json:"groupInfo,omitempty"`
}

func (m *RspGroupInfo) Reset()         { *m = RspGroupInfo{} }
func (m *RspGroupInfo) String() string { return proto.CompactTextString(m) }
func (*RspGroupInfo) ProtoMessage()    {}
func (*RspGroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5f3d5280584d888, []int{6}
}
func (m *RspGroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RspGroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RspGroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RspGroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspGroupInfo.Merge(m, src)
}
func (m *RspGroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *RspGroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RspGroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RspGroupInfo proto.InternalMessageInfo

func (m *RspGroupInfo) GetGroupCode() uint64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *RspGroupInfo) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *RspGroupInfo) GetGroupInfo() *D88DGroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

type D88DRspBody struct {
	RspGroupInfo []*RspGroupInfo `protobuf:"bytes,1,rep,name=rspGroupInfo" json:"rspGroupInfo,omitempty"`
	StrErrorInfo []byte          `protobuf:"bytes,2,opt,name=strErrorInfo" json:"strErrorInfo"`
}

func (m *D88DRspBody) Reset()         { *m = D88DRspBody{} }
func (m *D88DRspBody) String() string { return proto.CompactTextString(m) }
func (*D88DRspBody) ProtoMessage()    {}
func (*D88DRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5f3d5280584d888, []int{7}
}
func (m *D88DRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D88DRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D88DRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D88DRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D88DRspBody.Merge(m, src)
}
func (m *D88DRspBody) XXX_Size() int {
	return m.Size()
}
func (m *D88DRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_D88DRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_D88DRspBody proto.InternalMessageInfo

func (m *D88DRspBody) GetRspGroupInfo() []*RspGroupInfo {
	if m != nil {
		return m.RspGroupInfo
	}
	return nil
}

func (m *D88DRspBody) GetStrErrorInfo() []byte {
	if m != nil {
		return m.StrErrorInfo
	}
	return nil
}

type D88DTagRecord struct {
	FromUin   uint64 `protobuf:"varint,1,opt,name=fromUin" json:"fromUin"`
	GroupCode uint64 `protobuf:"varint,2,opt,name=groupCode" json:"groupCode"`
	TagId     []byte `protobuf:"bytes,3,opt,name=tagId" json:"tagId"`
	SetTime   uint64 `protobuf:"varint,4,opt,name=setTime" json:"setTime"`
	GoodNum   uint32 `protobuf:"varint,5,opt,name=goodNum" json:"goodNum"`
	BadNum    uint32 `protobuf:"varint,6,opt,name=badNum" json:"badNum"`
	TagLen    uint32 `protobuf:"varint,7,opt,name=tagLen" json:"tagLen"`
	TagValue  []byte `protobuf:"bytes,8,opt,name=tagValue" json:"tagValue"`
}

func (m *D88DTagRecord) Reset()         { *m = D88DTagRecord{} }
func (m *D88DTagRecord) String() string { return proto.CompactTextString(m) }
func (*D88DTagRecord) ProtoMessage()    {}
func (*D88DTagRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5f3d5280584d888, []int{8}
}
func (m *D88DTagRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D88DTagRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D88DTagRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D88DTagRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D88DTagRecord.Merge(m, src)
}
func (m *D88DTagRecord) XXX_Size() int {
	return m.Size()
}
func (m *D88DTagRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_D88DTagRecord.DiscardUnknown(m)
}

var xxx_messageInfo_D88DTagRecord proto.InternalMessageInfo

func (m *D88DTagRecord) GetFromUin() uint64 {
	if m != nil {
		return m.FromUin
	}
	return 0
}

func (m *D88DTagRecord) GetGroupCode() uint64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *D88DTagRecord) GetTagId() []byte {
	if m != nil {
		return m.TagId
	}
	return nil
}

func (m *D88DTagRecord) GetSetTime() uint64 {
	if m != nil {
		return m.SetTime
	}
	return 0
}

func (m *D88DTagRecord) GetGoodNum() uint32 {
	if m != nil {
		return m.GoodNum
	}
	return 0
}

func (m *D88DTagRecord) GetBadNum() uint32 {
	if m != nil {
		return m.BadNum
	}
	return 0
}

func (m *D88DTagRecord) GetTagLen() uint32 {
	if m != nil {
		return m.TagLen
	}
	return 0
}

func (m *D88DTagRecord) GetTagValue() []byte {
	if m != nil {
		return m.TagValue
	}
	return nil
}

type D88DGroupGeoInfo struct {
	Owneruin   uint64 `protobuf:"varint,1,opt,name=owneruin" json:"owneruin"`
	Settime    uint32 `protobuf:"varint,2,opt,name=settime" json:"settime"`
	Cityid     uint32 `protobuf:"varint,3,opt,name=cityid" json:"cityid"`
	Longitude  int64  `protobuf:"varint,4,opt,name=longitude" json:"longitude"`
	Latitude   int64  `protobuf:"varint,5,opt,name=latitude" json:"latitude"`
	Geocontent []byte `protobuf:"bytes,6,opt,name=geocontent" json:"geocontent"`
	PoiId      uint64 `protobuf:"varint,7,opt,name=poiId" json:"poiId"`
}

func (m *D88DGroupGeoInfo) Reset()         { *m = D88DGroupGeoInfo{} }
func (m *D88DGroupGeoInfo) String() string { return proto.CompactTextString(m) }
func (*D88DGroupGeoInfo) ProtoMessage()    {}
func (*D88DGroupGeoInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5f3d5280584d888, []int{9}
}
func (m *D88DGroupGeoInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D88DGroupGeoInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D88DGroupGeoInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D88DGroupGeoInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D88DGroupGeoInfo.Merge(m, src)
}
func (m *D88DGroupGeoInfo) XXX_Size() int {
	return m.Size()
}
func (m *D88DGroupGeoInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_D88DGroupGeoInfo.DiscardUnknown(m)
}

var xxx_messageInfo_D88DGroupGeoInfo proto.InternalMessageInfo

func (m *D88DGroupGeoInfo) GetOwneruin() uint64 {
	if m != nil {
		return m.Owneruin
	}
	return 0
}

func (m *D88DGroupGeoInfo) GetSettime() uint32 {
	if m != nil {
		return m.Settime
	}
	return 0
}

func (m *D88DGroupGeoInfo) GetCityid() uint32 {
	if m != nil {
		return m.Cityid
	}
	return 0
}

func (m *D88DGroupGeoInfo) GetLongitude() int64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *D88DGroupGeoInfo) GetLatitude() int64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *D88DGroupGeoInfo) GetGeocontent() []byte {
	if m != nil {
		return m.Geocontent
	}
	return nil
}

func (m *D88DGroupGeoInfo) GetPoiId() uint64 {
	if m != nil {
		return m.PoiId
	}
	return 0
}

func init() {
	proto.RegisterType((*D88DGroupHeadPortraitInfo)(nil), "D88DGroupHeadPortraitInfo")
	proto.RegisterType((*D88DGroupHeadPortrait)(nil), "D88DGroupHeadPortrait")
	proto.RegisterType((*D88DGroupExInfoOnly)(nil), "D88DGroupExInfoOnly")
	proto.RegisterType((*D88DGroupInfo)(nil), "D88DGroupInfo")
	proto.RegisterType((*ReqGroupInfo)(nil), "ReqGroupInfo")
	proto.RegisterType((*D88DReqBody)(nil), "D88DReqBody")
	proto.RegisterType((*RspGroupInfo)(nil), "RspGroupInfo")
	proto.RegisterType((*D88DRspBody)(nil), "D88DRspBody")
	proto.RegisterType((*D88DTagRecord)(nil), "D88DTagRecord")
	proto.RegisterType((*D88DGroupGeoInfo)(nil), "D88DGroupGeoInfo")
}

func init() { proto.RegisterFile("oidb0x88d.proto", fileDescriptor_a5f3d5280584d888) }

var fileDescriptor_a5f3d5280584d888 = []byte{
	// 1842 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0x4f, 0x77, 0xdc, 0xb6,
	0x11, 0xf7, 0xca, 0x92, 0x1d, 0x43, 0x92, 0xff, 0xd0, 0x76, 0x82, 0xa8, 0xe9, 0x46, 0xdd, 0xa6,
	0xa9, 0x9a, 0xba, 0xaa, 0xa2, 0x38, 0x89, 0xea, 0xb4, 0x69, 0xa4, 0xb5, 0x2c, 0x2b, 0xd5, 0xca,
	0x0a, 0x25, 0xfb, 0xd0, 0x1b, 0x44, 0x62, 0x29, 0xb4, 0x24, 0x41, 0x83, 0xa0, 0xa4, 0xbd, 0xf4,
	0x13, 0xb4, 0xef, 0xb5, 0x5f, 0xa0, 0x9f, 0x27, 0xc7, 0x1c, 0x7b, 0xea, 0xeb, 0xb3, 0xbf, 0x45,
	0x0f, 0x7d, 0x7d, 0x03, 0x92, 0xe0, 0x90, 0xa0, 0xdb, 0x97, 0x23, 0x7e, 0xbf, 0x19, 0x60, 0x30,
	0x18, 0x0c, 0x66, 0x40, 0x6e, 0x49, 0x11, 0x9e, 0x6e, 0x5c, 0x6e, 0x6d, 0x85, 0xeb, 0x99, 0x92,
	0x5a, 0x8e, 0x3e, 0x27, 0xef, 0x3e, 0xde, 0xda, 0x7a, 0xbc, 0xa7, 0x64, 0x91, 0x3d, 0xe5, 0x2c,
	0x3c, 0x92, 0x4a, 0x2b, 0x26, 0xf4, 0x7e, 0x3a, 0x95, 0xde, 0x0a, 0x59, 0xc8, 0x44, 0xb0, 0x1f,
	0xd2, 0xc1, 0xea, 0x60, 0x6d, 0x79, 0x67, 0xfe, 0xdb, 0x7f, 0xbe, 0x7f, 0xc5, 0x2f, 0xa1, 0xd1,
	0xdf, 0xe6, 0xc8, 0xfd, 0x5e, 0x4d, 0x6f, 0x95, 0xbc, 0x95, 0x89, 0x60, 0x2c, 0x8b, 0x54, 0xb7,
	0x14, 0x2d, 0xea, 0x3d, 0x24, 0xd7, 0x93, 0x3c, 0x82, 0x25, 0xe8, 0xdc, 0xea, 0xd5, 0xb5, 0xc5,
	0xcd, 0x95, 0xf5, 0x37, 0x1a, 0xe1, 0xd7, 0xa2, 0xde, 0x88, 0xdc, 0x08, 0xf9, 0x94, 0x15, 0xb1,
	0xde, 0x0f, 0xe9, 0x55, 0x34, 0x71, 0x03, 0x7b, 0xeb, 0xe4, 0xd6, 0x39, 0x57, 0x62, 0x3a, 0x13,
	0x69, 0x74, 0x24, 0x82, 0x71, 0xaa, 0xe9, 0x3c, 0x92, 0xec, 0x92, 0xde, 0x01, 0xb9, 0x9b, 0xe4,
	0xd1, 0x0b, 0x84, 0x1a, 0xab, 0x16, 0xfe, 0xaf, 0x55, 0x7d, 0x6a, 0xa3, 0x88, 0xdc, 0xb5, 0x1a,
	0xbb, 0x97, 0x00, 0x3d, 0x4b, 0xe3, 0x99, 0x37, 0x24, 0xd7, 0xb5, 0x12, 0xa7, 0xbc, 0xe3, 0xc8,
	0x1a, 0xf4, 0x36, 0xc8, 0xed, 0x44, 0xa6, 0x7c, 0xf6, 0x44, 0xaa, 0xed, 0x30, 0x34, 0xda, 0x74,
	0x0e, 0x09, 0x3a, 0xec, 0xe8, 0x3f, 0x43, 0xb2, 0x6c, 0x57, 0x32, 0xce, 0xf9, 0x80, 0x90, 0x08,
	0x06, 0xcf, 0x2e, 0x52, 0xae, 0xcc, 0x32, 0xf3, 0x95, 0x36, 0xc2, 0xc1, 0x3d, 0x66, 0x34, 0x56,
	0x9c, 0x69, 0x7e, 0x22, 0x12, 0xde, 0x5a, 0xa8, 0x4b, 0x82, 0xcb, 0x0d, 0xf4, 0x24, 0x66, 0x51,
	0xdb, 0xe5, 0x16, 0xf6, 0xd6, 0xc8, 0x92, 0x1d, 0xec, 0x5e, 0xb6, 0xfd, 0xdd, 0x62, 0xbc, 0x4d,
	0x72, 0xc7, 0x8c, 0x27, 0x3c, 0x39, 0xe5, 0x6a, 0xc2, 0x2e, 0x0f, 0x8b, 0x84, 0x2e, 0x20, 0x71,
	0x97, 0xf6, 0x1e, 0x90, 0x9b, 0x08, 0x04, 0x85, 0x6b, 0x48, 0xa1, 0xc3, 0x79, 0x1f, 0x92, 0xc5,
	0x72, 0xb7, 0x99, 0x16, 0x32, 0xa5, 0xd7, 0x91, 0x28, 0x26, 0xbc, 0x8f, 0xc8, 0x72, 0xb9, 0xd5,
	0x98, 0xe5, 0x39, 0x18, 0xfd, 0x16, 0x92, 0x6c, 0x53, 0xd6, 0xea, 0xe3, 0x8c, 0x07, 0x82, 0xc5,
	0x06, 0xa7, 0x37, 0x1c, 0xab, 0x31, 0x6d, 0x4f, 0xe3, 0x80, 0x9f, 0xf3, 0x98, 0x12, 0x24, 0x8c,
	0xf0, 0xc6, 0xbb, 0x2c, 0xe0, 0x74, 0xd1, 0xf5, 0x2e, 0x0b, 0x38, 0xc4, 0x86, 0x19, 0x3c, 0x2e,
	0x43, 0xfc, 0x88, 0x45, 0x9c, 0x2e, 0xe1, 0xd8, 0xe8, 0xb2, 0xf6, 0x3c, 0x20, 0x2c, 0x8e, 0xf9,
	0x4b, 0xba, 0xec, 0x9c, 0x47, 0xc5, 0xd8, 0xb9, 0x7d, 0xc9, 0x12, 0x91, 0x46, 0x26, 0x1c, 0x6e,
	0x3a, 0x73, 0x23, 0xd6, 0x5a, 0x7c, 0xc8, 0x12, 0x4e, 0x6f, 0xad, 0x0e, 0xd6, 0x96, 0x5a, 0x16,
	0x03, 0x6c, 0x65, 0x26, 0x3c, 0x91, 0xf4, 0xb6, 0x23, 0x03, 0xb0, 0x8d, 0xc3, 0x27, 0x22, 0x8d,
	0xb8, 0x32, 0x92, 0x77, 0x90, 0x64, 0x97, 0xb4, 0x51, 0x60, 0xbc, 0x7b, 0xc2, 0x2f, 0x35, 0xf5,
	0x90, 0x78, 0x87, 0xf3, 0x1e, 0x54, 0x27, 0xb6, 0x1d, 0xc7, 0x82, 0xa5, 0x01, 0x1f, 0xcb, 0x90,
	0xd3, 0xbb, 0xab, 0x57, 0xd7, 0x96, 0x7d, 0x97, 0xb0, 0xe7, 0xbb, 0x7b, 0xa9, 0x15, 0xdb, 0x66,
	0x61, 0x02, 0x41, 0x76, 0xcf, 0x39, 0x5f, 0x4c, 0x43, 0x8a, 0x33, 0xe0, 0x73, 0x91, 0xd2, 0xfb,
	0xe8, 0xae, 0x59, 0xb4, 0xb1, 0xb8, 0x50, 0x93, 0x3c, 0x82, 0x73, 0x78, 0xdb, 0x89, 0x5b, 0xcb,
	0xd9, 0x93, 0x38, 0x60, 0xb9, 0x9e, 0xe4, 0xe5, 0x49, 0xbc, 0xe3, 0x9c, 0x04, 0x62, 0x6d, 0x04,
	0x7f, 0x53, 0xf0, 0xdc, 0xc4, 0x3a, 0x45, 0x0e, 0x69, 0x53, 0xf6, 0x56, 0x6c, 0xa7, 0xf9, 0x05,
	0x57, 0xf4, 0x5d, 0x24, 0x89, 0x09, 0xef, 0x21, 0xf1, 0xcc, 0xf0, 0x85, 0xc8, 0x85, 0x96, 0xf5,
	0x05, 0x5d, 0x41, 0x76, 0xf4, 0xf0, 0x5d, 0xad, 0x71, 0x61, 0x6e, 0xe9, 0x0f, 0xde, 0xa4, 0x55,
	0xf2, 0x10, 0xa5, 0x31, 0x5c, 0x02, 0x08, 0x19, 0xf0, 0xce, 0x7b, 0x38, 0x4a, 0x31, 0x63, 0x7d,
	0xb3, 0x1d, 0x26, 0x22, 0xad, 0x6c, 0xfa, 0xa1, 0xe3, 0x1b, 0xc4, 0x7a, 0x8f, 0xc8, 0xfd, 0x12,
	0x13, 0xf2, 0xf8, 0x8f, 0x22, 0x05, 0x7f, 0xe5, 0x9a, 0x25, 0x19, 0x1d, 0x22, 0xb5, 0x7e, 0x11,
	0xef, 0x4b, 0xf2, 0x8e, 0x21, 0x76, 0x24, 0x53, 0x61, 0x5b, 0xfb, 0x7d, 0xa4, 0xfd, 0x26, 0x21,
	0x1b, 0xd9, 0xd5, 0xc4, 0xcf, 0x55, 0x4c, 0x57, 0x9d, 0xc8, 0x6e, 0x48, 0x1b, 0x7d, 0x76, 0x2a,
	0xd0, 0xf8, 0x11, 0xd2, 0x70, 0x69, 0x6b, 0xe3, 0x58, 0x9e, 0x73, 0xd5, 0xb6, 0x71, 0xe4, 0xd8,
	0xe8, 0x0a, 0xd9, 0x35, 0x2d, 0x05, 0x6b, 0xfe, 0xd8, 0x59, 0x13, 0xd3, 0x36, 0xa3, 0xed, 0x29,
	0x16, 0x72, 0xfa, 0x81, 0x93, 0xd1, 0x0c, 0x0e, 0xbb, 0x67, 0x81, 0x16, 0xe7, 0xbc, 0x49, 0xd7,
	0x3f, 0xc1, 0xef, 0x4b, 0x87, 0x04, 0x4b, 0x02, 0xae, 0xb4, 0x98, 0x8a, 0x80, 0x41, 0xa8, 0x9e,
	0xcc, 0x32, 0x4e, 0x3f, 0xc4, 0x77, 0xcf, 0xa1, 0x5d, 0x1d, 0x48, 0x07, 0x3f, 0xc5, 0xd6, 0x3b,
	0xb4, 0xf7, 0x19, 0xb9, 0x5b, 0xe6, 0x32, 0x11, 0x9c, 0xa1, 0x9c, 0xb3, 0x86, 0xb4, 0xfa, 0x04,
	0xbc, 0x07, 0xe4, 0x86, 0x66, 0x91, 0xcf, 0x03, 0xa9, 0x42, 0xfa, 0x33, 0x53, 0x14, 0xdc, 0x34,
	0x45, 0xc1, 0x49, 0x8d, 0xfa, 0x8d, 0x80, 0xf7, 0x69, 0x95, 0x79, 0xf7, 0xb8, 0x34, 0x55, 0xc4,
	0x47, 0xab, 0x83, 0xb5, 0xc5, 0xcd, 0x3b, 0x4d, 0x15, 0x51, 0x11, 0x7e, 0x4b, 0x0c, 0x9c, 0x76,
	0x86, 0xca, 0x0b, 0xb8, 0x0d, 0x3f, 0xc7, 0x4e, 0xeb, 0x90, 0xde, 0x57, 0xe4, 0x56, 0x92, 0x47,
	0xb8, 0x22, 0xa1, 0x0f, 0xcc, 0x4a, 0x6f, 0xf7, 0xd7, 0x2b, 0x7e, 0x57, 0x1c, 0x56, 0xcc, 0xcf,
	0x0a, 0x5d, 0x64, 0x4d, 0xe0, 0xfc, 0x02, 0xaf, 0xd8, 0x21, 0xc1, 0xe5, 0x1d, 0x68, 0xc2, 0xe9,
	0x3a, 0x3e, 0x26, 0x87, 0x86, 0x6b, 0x1b, 0x98, 0x42, 0xe2, 0x58, 0x16, 0x2a, 0xe0, 0xa6, 0x82,
	0xf8, 0x25, 0xbe, 0xb6, 0x5d, 0x16, 0x52, 0x42, 0x90, 0x84, 0x85, 0x48, 0xab, 0x84, 0xb9, 0x81,
	0x53, 0x02, 0x66, 0x20, 0xb9, 0x96, 0xe3, 0xaf, 0x65, 0x19, 0xd7, 0xf4, 0x63, 0x9c, 0x5c, 0xdb,
	0x1c, 0xa4, 0xca, 0x12, 0x79, 0x2e, 0x52, 0x63, 0xc6, 0x26, 0x7e, 0xec, 0x5b, 0x54, 0x63, 0x43,
	0x59, 0xb3, 0xd0, 0x4f, 0x5c, 0x1b, 0x4a, 0x06, 0x42, 0xaa, 0x1c, 0x1f, 0xf2, 0x8b, 0x89, 0x3c,
	0x15, 0x71, 0xb9, 0xc5, 0x87, 0x48, 0xa1, 0x4f, 0xc0, 0xf8, 0xc5, 0xc0, 0x3e, 0x67, 0x61, 0xb5,
	0xd3, 0x4f, 0x5b, 0x7e, 0xe9, 0xb0, 0x26, 0xe0, 0x0d, 0x86, 0x5f, 0x87, 0xcf, 0x5a, 0x97, 0xa4,
	0x4b, 0xdb, 0xe7, 0x01, 0x6e, 0x8c, 0xb1, 0xeb, 0x73, 0xa7, 0xc0, 0xa9, 0x29, 0xb0, 0x88, 0x65,
	0xd9, 0x91, 0x12, 0xe7, 0x22, 0xe6, 0x51, 0x29, 0xbe, 0x85, 0x2d, 0xea, 0xb2, 0xde, 0x23, 0xb2,
	0x9c, 0x6b, 0x54, 0xe5, 0xd2, 0x5f, 0x99, 0xf8, 0xbb, 0xb7, 0xde, 0x53, 0xfd, 0xfa, 0x6d, 0x51,
	0x6b, 0xd9, 0x31, 0x0f, 0xca, 0xea, 0xe8, 0x91, 0x63, 0x59, 0x4d, 0x35, 0xa5, 0x57, 0x05, 0x98,
	0xb5, 0xbe, 0x70, 0x4b, 0x2f, 0x44, 0x43, 0x6c, 0x97, 0xee, 0xb0, 0x26, 0xd3, 0x5f, 0xe3, 0xd8,
	0xee, 0x90, 0xa6, 0x5b, 0x91, 0x22, 0x34, 0x53, 0xff, 0x06, 0xe5, 0x03, 0x8b, 0x36, 0xf1, 0x53,
	0x9e, 0xfc, 0x26, 0xfd, 0xd2, 0x8d, 0x9f, 0x8a, 0x82, 0x52, 0x3f, 0x90, 0xe9, 0x14, 0xea, 0x82,
	0xdf, 0xa2, 0xba, 0xa0, 0x06, 0xcd, 0x5c, 0x32, 0x9d, 0x4e, 0xd8, 0x65, 0x75, 0xf4, 0x5f, 0xb5,
	0xe6, 0xc2, 0x94, 0xd9, 0x89, 0x4c, 0xa7, 0x27, 0xd2, 0xb8, 0xcf, 0x9c, 0xfa, 0x76, 0x6b, 0x27,
	0x6d, 0x12, 0x1e, 0xe2, 0x8c, 0xe5, 0xf9, 0x05, 0x64, 0x25, 0x1e, 0x9e, 0xb2, 0x32, 0x50, 0x76,
	0xf0, 0x43, 0xec, 0xf2, 0x26, 0x17, 0x14, 0xa7, 0x79, 0xa0, 0x84, 0x29, 0x8d, 0xc1, 0xf2, 0x31,
	0xb2, 0xbc, 0x4b, 0x42, 0xdc, 0x27, 0x26, 0x7f, 0x1f, 0x88, 0x5c, 0x8f, 0xcf, 0x58, 0x1a, 0x99,
	0xf7, 0xfb, 0x31, 0x8e, 0xfb, 0x1e, 0x01, 0xd8, 0x79, 0x09, 0x07, 0xf0, 0x92, 0xf1, 0x97, 0x74,
	0x17, 0xef, 0xbc, 0x45, 0x79, 0xef, 0x91, 0x6b, 0x4a, 0x4a, 0x68, 0xf3, 0x9e, 0x20, 0x53, 0x2a,
	0xcc, 0x9c, 0x18, 0x53, 0x3c, 0x05, 0x7e, 0x0f, 0x17, 0x5f, 0x35, 0x6a, 0x1a, 0x2e, 0xce, 0x12,
	0x58, 0xe5, 0x69, 0xab, 0xe1, 0x2a, 0x41, 0xd8, 0xc3, 0x99, 0xc8, 0xb5, 0x54, 0xb3, 0x49, 0x1e,
	0xed, 0xf0, 0xa8, 0x4a, 0x22, 0xfb, 0x68, 0xb2, 0x3e, 0x01, 0x6f, 0x8b, 0xdc, 0x13, 0xe9, 0xb9,
	0xd0, 0xfc, 0x50, 0x6e, 0x17, 0xfa, 0xec, 0xb0, 0x48, 0x0e, 0x44, 0x22, 0x34, 0xfd, 0x1a, 0x29,
	0xf6, 0x4a, 0x34, 0xd9, 0xe2, 0xa9, 0x9d, 0x16, 0xac, 0xfb, 0x9d, 0x9b, 0x2d, 0x5a, 0x02, 0x4d,
	0xb6, 0x80, 0x6c, 0x56, 0x29, 0x1d, 0xb8, 0xd9, 0xa2, 0x61, 0xed, 0xfd, 0x82, 0x88, 0xe4, 0x97,
	0xfa, 0x13, 0x3a, 0x71, 0xee, 0x57, 0x4d, 0xd9, 0x22, 0xf5, 0x59, 0xc6, 0xd3, 0xed, 0x2c, 0x13,
	0x21, 0x3d, 0x74, 0x8a, 0x54, 0xcb, 0x41, 0x19, 0x29, 0xf2, 0xb1, 0x4c, 0xa7, 0x65, 0x87, 0xfa,
	0x0c, 0x37, 0x57, 0x88, 0x80, 0xf2, 0x4b, 0xe4, 0x13, 0x19, 0x8a, 0xe9, 0xcc, 0x82, 0xa6, 0xc5,
	0x39, 0xc2, 0xe5, 0x57, 0xaf, 0x48, 0xaf, 0xae, 0x69, 0x36, 0xbe, 0xf9, 0x9f, 0xba, 0xa6, 0xf1,
	0xd8, 0x20, 0xb7, 0x53, 0x59, 0x3e, 0xde, 0x60, 0xb4, 0xc9, 0x63, 0x3e, 0xf6, 0x55, 0x97, 0x85,
	0xf3, 0x4c, 0x25, 0x34, 0x01, 0x1d, 0xad, 0x63, 0xa4, 0xd5, 0x2b, 0x31, 0xfa, 0xfb, 0x80, 0x2c,
	0xf9, 0xfc, 0x65, 0xd3, 0x7f, 0xd7, 0x5d, 0x8f, 0xe9, 0x35, 0x70, 0xfb, 0xdd, 0xc0, 0xde, 0x06,
	0x59, 0xcc, 0xb5, 0x19, 0x8a, 0xf2, 0xeb, 0x63, 0x60, 0xeb, 0x09, 0x3b, 0x91, 0x8f, 0x45, 0xc0,
	0xc0, 0x98, 0xe5, 0x7a, 0x8f, 0x6b, 0xbb, 0x4d, 0x13, 0xa9, 0xb8, 0x15, 0xef, 0x95, 0x18, 0xfd,
	0x79, 0x40, 0x16, 0x61, 0x62, 0x9f, 0xbf, 0xdc, 0x91, 0xe1, 0xcc, 0x5b, 0x21, 0x0b, 0x2c, 0xcb,
	0xba, 0x5f, 0x39, 0x06, 0xf2, 0x3e, 0x26, 0x4b, 0x0a, 0xed, 0xa5, 0xfa, 0x93, 0x59, 0x5e, 0xc7,
	0x1b, 0xf4, 0x5b, 0x22, 0x90, 0x35, 0xb2, 0x60, 0x1c, 0x0b, 0x9e, 0xea, 0x17, 0x5c, 0xe5, 0xd0,
	0x80, 0x60, 0x9b, 0xba, 0xe4, 0xe8, 0x4f, 0x64, 0xc9, 0xcf, 0xb3, 0xef, 0xe7, 0x2e, 0xc8, 0x02,
	0x3c, 0x2f, 0x62, 0xdd, 0xfa, 0xa3, 0xa8, 0x30, 0x28, 0xcd, 0x6c, 0x33, 0x6b, 0xd6, 0x76, 0x5d,
	0xd9, 0x08, 0x8c, 0xfe, 0x50, 0x79, 0x23, 0xcf, 0x8c, 0x37, 0x60, 0xc7, 0xc8, 0x1c, 0x3a, 0xa8,
	0x77, 0x8c, 0x40, 0xbf, 0x25, 0x02, 0x95, 0x41, 0xae, 0xd5, 0xae, 0x52, 0x52, 0xed, 0xd7, 0xa7,
	0x57, 0xbf, 0x15, 0x2d, 0x66, 0xf4, 0x97, 0xb9, 0xf2, 0x73, 0xc6, 0xd6, 0x88, 0x90, 0x8f, 0xa6,
	0x4a, 0x26, 0x90, 0x5b, 0xf1, 0x5e, 0x6b, 0xb0, 0xed, 0x8d, 0xb9, 0x7e, 0x6f, 0xac, 0x90, 0x05,
	0xcd, 0xa2, 0xea, 0xe7, 0xab, 0x5e, 0xb8, 0x84, 0x60, 0xfe, 0x9c, 0x6b, 0x13, 0x19, 0xf3, 0x78,
	0xfe, 0x0a, 0x04, 0x3e, 0x92, 0x32, 0xec, 0x7e, 0xb7, 0xd4, 0x20, 0x78, 0xfa, 0x94, 0x85, 0xdd,
	0xcf, 0x95, 0x0a, 0x03, 0x56, 0xb3, 0xe8, 0x80, 0xb7, 0xff, 0x53, 0x2a, 0x0c, 0xb2, 0xb1, 0x66,
	0xd1, 0x0b, 0x16, 0x17, 0xdc, 0xfc, 0xa2, 0xd8, 0xf7, 0xb3, 0x46, 0x47, 0xff, 0x1e, 0x90, 0xdb,
	0xdd, 0x12, 0x18, 0xd4, 0xe4, 0x45, 0xca, 0x55, 0xd1, 0xf1, 0x89, 0x45, 0xab, 0x4d, 0xe9, 0xee,
	0x1f, 0x55, 0x0d, 0x82, 0x59, 0x81, 0xd0, 0x33, 0xd1, 0xfe, 0x0b, 0xac, 0x30, 0x70, 0x69, 0x2c,
	0xd3, 0x48, 0xe8, 0x22, 0x2c, 0x9d, 0x72, 0xb5, 0x76, 0xa9, 0x85, 0xc1, 0x86, 0x98, 0xe9, 0x52,
	0x64, 0x01, 0x89, 0x58, 0xd4, 0x74, 0x3d, 0x5c, 0x06, 0x32, 0xd5, 0x3c, 0xd5, 0xc6, 0x39, 0x4b,
	0xb6, 0xeb, 0xb1, 0xb8, 0xf9, 0x26, 0x95, 0x62, 0x3f, 0x34, 0xfe, 0x99, 0xb7, 0xdf, 0xa4, 0x00,
	0xed, 0xac, 0x7e, 0xfb, 0x6a, 0x38, 0xf8, 0xee, 0xd5, 0x70, 0xf0, 0xaf, 0x57, 0xc3, 0xc1, 0x5f,
	0x5f, 0x0f, 0xaf, 0x7c, 0xf7, 0x7a, 0x78, 0xe5, 0x1f, 0xaf, 0x87, 0x57, 0x7e, 0x7f, 0x6d, 0xfd,
	0x0b, 0x29, 0xc2, 0xd3, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x78, 0x19, 0xb1, 0x93, 0x15,
	0x00, 0x00,
}

func (m *D88DGroupHeadPortraitInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D88DGroupHeadPortraitInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D88DGroupHeadPortraitInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.PicId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *D88DGroupHeadPortrait) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D88DGroupHeadPortrait) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D88DGroupHeadPortrait) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgVerifyingPicInfo) > 0 {
		for iNdEx := len(m.MsgVerifyingPicInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgVerifyingPicInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOidb0X88D(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.VerifyingPicCnt))
	i--
	dAtA[i] = 0x20
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.DefaultId))
	i--
	dAtA[i] = 0x18
	if len(m.MsgInfo) > 0 {
		for iNdEx := len(m.MsgInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOidb0X88D(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.PicCount))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *D88DGroupExInfoOnly) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D88DGroupExInfoOnly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D88DGroupExInfoOnly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.MoneyForAddGroup))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.TribeId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *D88DGroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D88DGroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D88DGroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.NoCodeFingerOpenFlag))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0x98
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.NoFingerOpenFlag))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0x90
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.IsModifyConfGroupName))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0x88
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.IsModifyConfGroupFace))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0x80
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.IsConfGroup))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xf8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupOpenAppid))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xf0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupFlagext3))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xe8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.CmduinJoinMsgSeq))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xe0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.CmduinHistoryMsgSeq))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xd8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.InviteNoAuthNumLimit))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xd0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.HistoryMsgBeginTime))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xc8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.TeamSeq))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xc0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.ParentId))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xb8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.RootId))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xb0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.MembercardSeq))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xa8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.MemberListChangeSeq))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0xa0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.SubscriptionUin))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0x98
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.PasswordRedbagTime))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0x90
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.ConfToGroupTime))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0x88
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.ConfMaxMsgSeq))
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0x80
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.ConfUin))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xf8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.CmduinFlagEx2))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xf0
	if m.PoidInfo != nil {
		i -= len(m.PoidInfo)
		copy(dAtA[i:], m.PoidInfo)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.PoidInfo)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.CmduinPrivilege))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xe0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupSecLevelInfo))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xd8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupSecLevel))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xd0
	if m.StGroupExInfo != nil {
		{
			size, err := m.StGroupExInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X88D(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.AppPrivilegeFlag))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xc0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupTypeFlag))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xb8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.CmduinLastMsgTime))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xb0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.CmduinReadMsgSeq))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xa8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.CmduinNewMobileFlag))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xa0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.CmduinFlagEx))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x98
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.CmduinUinFlag))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x90
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.CmduinJoinTime))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x88
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.CmduinMsgSeq))
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0x80
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.CreateSourceFlag))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xf8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.ShutupTimestampMe))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xf0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.ShutupTimestamp))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xe8
	if m.MsgHeadPortrait != nil {
		{
			size, err := m.MsgHeadPortrait.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X88D(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.HeadPortraitSeq))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xd8
	if m.GroupGeoInfo != nil {
		{
			size, err := m.GroupGeoInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X88D(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	if len(m.TagRecord) > 0 {
		for iNdEx := len(m.TagRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TagRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOidb0X88D(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xca
		}
	}
	if m.GroupRichFingerMemo != nil {
		i -= len(m.GroupRichFingerMemo)
		copy(dAtA[i:], m.GroupRichFingerMemo)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.GroupRichFingerMemo)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.CertificationText != nil {
		i -= len(m.CertificationText)
		copy(dAtA[i:], m.CertificationText)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.CertificationText)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.CertificationType))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xb0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.ActiveMemberNum))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupGrade))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xa0
	if m.GroupCoverSkinUrl != nil {
		i -= len(m.GroupCoverSkinUrl)
		copy(dAtA[i:], m.GroupCoverSkinUrl)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.GroupCoverSkinUrl)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupCoverSkinTimestamp))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x90
	if m.GroupBoardSkinUrl != nil {
		i -= len(m.GroupBoardSkinUrl)
		copy(dAtA[i:], m.GroupBoardSkinUrl)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.GroupBoardSkinUrl)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.GroupAioSkinUrl != nil {
		i -= len(m.GroupAioSkinUrl)
		copy(dAtA[i:], m.GroupAioSkinUrl)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.GroupAioSkinUrl)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupBoardSkinTimestamp))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupAioSkinTimestamp))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupAdminMaxNum))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.LevelNameSeq))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupVisitorCurNum))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupVisitorMaxNum))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd0
	if m.GroupAnswer != nil {
		i -= len(m.GroupAnswer)
		copy(dAtA[i:], m.GroupAnswer)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.GroupAnswer)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.GroupQuestion != nil {
		i -= len(m.GroupQuestion)
		copy(dAtA[i:], m.GroupQuestion)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.GroupQuestion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupLastMsgTime))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupCurMsgSeq))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb0
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupUin))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupExtraAadmNum))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa0
	if len(m.GroupAllianceCode) > 0 {
		for iNdEx := len(m.GroupAllianceCode) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupAllianceCode[iNdEx]))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
	}
	if m.GroupClassText != nil {
		i -= len(m.GroupClassText)
		copy(dAtA[i:], m.GroupClassText)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.GroupClassText)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.GroupFingerMemo != nil {
		i -= len(m.GroupFingerMemo)
		copy(dAtA[i:], m.GroupFingerMemo)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.GroupFingerMemo)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.GroupMemo != nil {
		i -= len(m.GroupMemo)
		copy(dAtA[i:], m.GroupMemo)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.GroupMemo)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.GroupName != nil {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x7a
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupRoamingTime))
	i--
	dAtA[i] = 0x70
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupInfoSeq))
	i--
	dAtA[i] = 0x68
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupDefaultPage))
	i--
	dAtA[i] = 0x60
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupFace))
	i--
	dAtA[i] = 0x58
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupLevel))
	i--
	dAtA[i] = 0x50
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupSpecialClass))
	i--
	dAtA[i] = 0x48
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupClassExt))
	i--
	dAtA[i] = 0x40
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupOption))
	i--
	dAtA[i] = 0x38
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupMemberNum))
	i--
	dAtA[i] = 0x30
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupMemberMaxNum))
	i--
	dAtA[i] = 0x28
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupFlagExt))
	i--
	dAtA[i] = 0x20
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupFlag))
	i--
	dAtA[i] = 0x18
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupCreateTime))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupOwner))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ReqGroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqGroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqGroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.LastGetGroupNameTime))
	i--
	dAtA[i] = 0x18
	if m.Stgroupinfo != nil {
		{
			size, err := m.Stgroupinfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X88D(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *D88DReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D88DReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D88DReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.PcClientVersion))
	i--
	dAtA[i] = 0x18
	if len(m.ReqGroupInfo) > 0 {
		for iNdEx := len(m.ReqGroupInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReqGroupInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOidb0X88D(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.AppId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RspGroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RspGroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RspGroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupInfo != nil {
		{
			size, err := m.GroupInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X88D(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.Result))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *D88DRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D88DRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D88DRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StrErrorInfo != nil {
		i -= len(m.StrErrorInfo)
		copy(dAtA[i:], m.StrErrorInfo)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.StrErrorInfo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RspGroupInfo) > 0 {
		for iNdEx := len(m.RspGroupInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RspGroupInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOidb0X88D(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *D88DTagRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D88DTagRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D88DTagRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TagValue != nil {
		i -= len(m.TagValue)
		copy(dAtA[i:], m.TagValue)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.TagValue)))
		i--
		dAtA[i] = 0x42
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.TagLen))
	i--
	dAtA[i] = 0x38
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.BadNum))
	i--
	dAtA[i] = 0x30
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GoodNum))
	i--
	dAtA[i] = 0x28
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.SetTime))
	i--
	dAtA[i] = 0x20
	if m.TagId != nil {
		i -= len(m.TagId)
		copy(dAtA[i:], m.TagId)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.TagId)))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.GroupCode))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.FromUin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *D88DGroupGeoInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D88DGroupGeoInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D88DGroupGeoInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.PoiId))
	i--
	dAtA[i] = 0x38
	if m.Geocontent != nil {
		i -= len(m.Geocontent)
		copy(dAtA[i:], m.Geocontent)
		i = encodeVarintOidb0X88D(dAtA, i, uint64(len(m.Geocontent)))
		i--
		dAtA[i] = 0x32
	}
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.Latitude))
	i--
	dAtA[i] = 0x28
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.Longitude))
	i--
	dAtA[i] = 0x20
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.Cityid))
	i--
	dAtA[i] = 0x18
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.Settime))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOidb0X88D(dAtA, i, uint64(m.Owneruin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintOidb0X88D(dAtA []byte, offset int, v uint64) int {
	offset -= sovOidb0X88D(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *D88DGroupHeadPortraitInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X88D(uint64(m.PicId))
	return n
}

func (m *D88DGroupHeadPortrait) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X88D(uint64(m.PicCount))
	if len(m.MsgInfo) > 0 {
		for _, e := range m.MsgInfo {
			l = e.Size()
			n += 1 + l + sovOidb0X88D(uint64(l))
		}
	}
	n += 1 + sovOidb0X88D(uint64(m.DefaultId))
	n += 1 + sovOidb0X88D(uint64(m.VerifyingPicCnt))
	if len(m.MsgVerifyingPicInfo) > 0 {
		for _, e := range m.MsgVerifyingPicInfo {
			l = e.Size()
			n += 1 + l + sovOidb0X88D(uint64(l))
		}
	}
	return n
}

func (m *D88DGroupExInfoOnly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X88D(uint64(m.TribeId))
	n += 1 + sovOidb0X88D(uint64(m.MoneyForAddGroup))
	return n
}

func (m *D88DGroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X88D(uint64(m.GroupOwner))
	n += 1 + sovOidb0X88D(uint64(m.GroupCreateTime))
	n += 1 + sovOidb0X88D(uint64(m.GroupFlag))
	n += 1 + sovOidb0X88D(uint64(m.GroupFlagExt))
	n += 1 + sovOidb0X88D(uint64(m.GroupMemberMaxNum))
	n += 1 + sovOidb0X88D(uint64(m.GroupMemberNum))
	n += 1 + sovOidb0X88D(uint64(m.GroupOption))
	n += 1 + sovOidb0X88D(uint64(m.GroupClassExt))
	n += 1 + sovOidb0X88D(uint64(m.GroupSpecialClass))
	n += 1 + sovOidb0X88D(uint64(m.GroupLevel))
	n += 1 + sovOidb0X88D(uint64(m.GroupFace))
	n += 1 + sovOidb0X88D(uint64(m.GroupDefaultPage))
	n += 1 + sovOidb0X88D(uint64(m.GroupInfoSeq))
	n += 1 + sovOidb0X88D(uint64(m.GroupRoamingTime))
	if m.GroupName != nil {
		l = len(m.GroupName)
		n += 1 + l + sovOidb0X88D(uint64(l))
	}
	if m.GroupMemo != nil {
		l = len(m.GroupMemo)
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	if m.GroupFingerMemo != nil {
		l = len(m.GroupFingerMemo)
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	if m.GroupClassText != nil {
		l = len(m.GroupClassText)
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	if len(m.GroupAllianceCode) > 0 {
		for _, e := range m.GroupAllianceCode {
			n += 2 + sovOidb0X88D(uint64(e))
		}
	}
	n += 2 + sovOidb0X88D(uint64(m.GroupExtraAadmNum))
	n += 2 + sovOidb0X88D(uint64(m.GroupUin))
	n += 2 + sovOidb0X88D(uint64(m.GroupCurMsgSeq))
	n += 2 + sovOidb0X88D(uint64(m.GroupLastMsgTime))
	if m.GroupQuestion != nil {
		l = len(m.GroupQuestion)
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	if m.GroupAnswer != nil {
		l = len(m.GroupAnswer)
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	n += 2 + sovOidb0X88D(uint64(m.GroupVisitorMaxNum))
	n += 2 + sovOidb0X88D(uint64(m.GroupVisitorCurNum))
	n += 2 + sovOidb0X88D(uint64(m.LevelNameSeq))
	n += 2 + sovOidb0X88D(uint64(m.GroupAdminMaxNum))
	n += 2 + sovOidb0X88D(uint64(m.GroupAioSkinTimestamp))
	n += 2 + sovOidb0X88D(uint64(m.GroupBoardSkinTimestamp))
	if m.GroupAioSkinUrl != nil {
		l = len(m.GroupAioSkinUrl)
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	if m.GroupBoardSkinUrl != nil {
		l = len(m.GroupBoardSkinUrl)
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	n += 2 + sovOidb0X88D(uint64(m.GroupCoverSkinTimestamp))
	if m.GroupCoverSkinUrl != nil {
		l = len(m.GroupCoverSkinUrl)
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	n += 2 + sovOidb0X88D(uint64(m.GroupGrade))
	n += 2 + sovOidb0X88D(uint64(m.ActiveMemberNum))
	n += 2 + sovOidb0X88D(uint64(m.CertificationType))
	if m.CertificationText != nil {
		l = len(m.CertificationText)
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	if m.GroupRichFingerMemo != nil {
		l = len(m.GroupRichFingerMemo)
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	if len(m.TagRecord) > 0 {
		for _, e := range m.TagRecord {
			l = e.Size()
			n += 2 + l + sovOidb0X88D(uint64(l))
		}
	}
	if m.GroupGeoInfo != nil {
		l = m.GroupGeoInfo.Size()
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	n += 2 + sovOidb0X88D(uint64(m.HeadPortraitSeq))
	if m.MsgHeadPortrait != nil {
		l = m.MsgHeadPortrait.Size()
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	n += 2 + sovOidb0X88D(uint64(m.ShutupTimestamp))
	n += 2 + sovOidb0X88D(uint64(m.ShutupTimestampMe))
	n += 2 + sovOidb0X88D(uint64(m.CreateSourceFlag))
	n += 2 + sovOidb0X88D(uint64(m.CmduinMsgSeq))
	n += 2 + sovOidb0X88D(uint64(m.CmduinJoinTime))
	n += 2 + sovOidb0X88D(uint64(m.CmduinUinFlag))
	n += 2 + sovOidb0X88D(uint64(m.CmduinFlagEx))
	n += 2 + sovOidb0X88D(uint64(m.CmduinNewMobileFlag))
	n += 2 + sovOidb0X88D(uint64(m.CmduinReadMsgSeq))
	n += 2 + sovOidb0X88D(uint64(m.CmduinLastMsgTime))
	n += 2 + sovOidb0X88D(uint64(m.GroupTypeFlag))
	n += 2 + sovOidb0X88D(uint64(m.AppPrivilegeFlag))
	if m.StGroupExInfo != nil {
		l = m.StGroupExInfo.Size()
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	n += 2 + sovOidb0X88D(uint64(m.GroupSecLevel))
	n += 2 + sovOidb0X88D(uint64(m.GroupSecLevelInfo))
	n += 2 + sovOidb0X88D(uint64(m.CmduinPrivilege))
	if m.PoidInfo != nil {
		l = len(m.PoidInfo)
		n += 2 + l + sovOidb0X88D(uint64(l))
	}
	n += 2 + sovOidb0X88D(uint64(m.CmduinFlagEx2))
	n += 2 + sovOidb0X88D(uint64(m.ConfUin))
	n += 2 + sovOidb0X88D(uint64(m.ConfMaxMsgSeq))
	n += 2 + sovOidb0X88D(uint64(m.ConfToGroupTime))
	n += 2 + sovOidb0X88D(uint64(m.PasswordRedbagTime))
	n += 2 + sovOidb0X88D(uint64(m.SubscriptionUin))
	n += 2 + sovOidb0X88D(uint64(m.MemberListChangeSeq))
	n += 2 + sovOidb0X88D(uint64(m.MembercardSeq))
	n += 2 + sovOidb0X88D(uint64(m.RootId))
	n += 2 + sovOidb0X88D(uint64(m.ParentId))
	n += 2 + sovOidb0X88D(uint64(m.TeamSeq))
	n += 2 + sovOidb0X88D(uint64(m.HistoryMsgBeginTime))
	n += 2 + sovOidb0X88D(uint64(m.InviteNoAuthNumLimit))
	n += 2 + sovOidb0X88D(uint64(m.CmduinHistoryMsgSeq))
	n += 2 + sovOidb0X88D(uint64(m.CmduinJoinMsgSeq))
	n += 2 + sovOidb0X88D(uint64(m.GroupFlagext3))
	n += 2 + sovOidb0X88D(uint64(m.GroupOpenAppid))
	n += 2 + sovOidb0X88D(uint64(m.IsConfGroup))
	n += 2 + sovOidb0X88D(uint64(m.IsModifyConfGroupFace))
	n += 2 + sovOidb0X88D(uint64(m.IsModifyConfGroupName))
	n += 2 + sovOidb0X88D(uint64(m.NoFingerOpenFlag))
	n += 2 + sovOidb0X88D(uint64(m.NoCodeFingerOpenFlag))
	return n
}

func (m *ReqGroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X88D(uint64(m.GroupCode))
	if m.Stgroupinfo != nil {
		l = m.Stgroupinfo.Size()
		n += 1 + l + sovOidb0X88D(uint64(l))
	}
	n += 1 + sovOidb0X88D(uint64(m.LastGetGroupNameTime))
	return n
}

func (m *D88DReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X88D(uint64(m.AppId))
	if len(m.ReqGroupInfo) > 0 {
		for _, e := range m.ReqGroupInfo {
			l = e.Size()
			n += 1 + l + sovOidb0X88D(uint64(l))
		}
	}
	n += 1 + sovOidb0X88D(uint64(m.PcClientVersion))
	return n
}

func (m *RspGroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X88D(uint64(m.GroupCode))
	n += 1 + sovOidb0X88D(uint64(m.Result))
	if m.GroupInfo != nil {
		l = m.GroupInfo.Size()
		n += 1 + l + sovOidb0X88D(uint64(l))
	}
	return n
}

func (m *D88DRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RspGroupInfo) > 0 {
		for _, e := range m.RspGroupInfo {
			l = e.Size()
			n += 1 + l + sovOidb0X88D(uint64(l))
		}
	}
	if m.StrErrorInfo != nil {
		l = len(m.StrErrorInfo)
		n += 1 + l + sovOidb0X88D(uint64(l))
	}
	return n
}

func (m *D88DTagRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X88D(uint64(m.FromUin))
	n += 1 + sovOidb0X88D(uint64(m.GroupCode))
	if m.TagId != nil {
		l = len(m.TagId)
		n += 1 + l + sovOidb0X88D(uint64(l))
	}
	n += 1 + sovOidb0X88D(uint64(m.SetTime))
	n += 1 + sovOidb0X88D(uint64(m.GoodNum))
	n += 1 + sovOidb0X88D(uint64(m.BadNum))
	n += 1 + sovOidb0X88D(uint64(m.TagLen))
	if m.TagValue != nil {
		l = len(m.TagValue)
		n += 1 + l + sovOidb0X88D(uint64(l))
	}
	return n
}

func (m *D88DGroupGeoInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X88D(uint64(m.Owneruin))
	n += 1 + sovOidb0X88D(uint64(m.Settime))
	n += 1 + sovOidb0X88D(uint64(m.Cityid))
	n += 1 + sovOidb0X88D(uint64(m.Longitude))
	n += 1 + sovOidb0X88D(uint64(m.Latitude))
	if m.Geocontent != nil {
		l = len(m.Geocontent)
		n += 1 + l + sovOidb0X88D(uint64(l))
	}
	n += 1 + sovOidb0X88D(uint64(m.PoiId))
	return n
}

func sovOidb0X88D(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOidb0X88D(x uint64) (n int) {
	return sovOidb0X88D(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *D88DGroupHeadPortraitInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X88D
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D88DGroupHeadPortraitInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D88DGroupHeadPortraitInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicId", wireType)
			}
			m.PicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PicId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X88D(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D88DGroupHeadPortrait) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X88D
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D88DGroupHeadPortrait: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D88DGroupHeadPortrait: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicCount", wireType)
			}
			m.PicCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PicCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgInfo = append(m.MsgInfo, &D88DGroupHeadPortraitInfo{})
			if err := m.MsgInfo[len(m.MsgInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultId", wireType)
			}
			m.DefaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyingPicCnt", wireType)
			}
			m.VerifyingPicCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifyingPicCnt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgVerifyingPicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgVerifyingPicInfo = append(m.MsgVerifyingPicInfo, &D88DGroupHeadPortraitInfo{})
			if err := m.MsgVerifyingPicInfo[len(m.MsgVerifyingPicInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X88D(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D88DGroupExInfoOnly) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X88D
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D88DGroupExInfoOnly: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D88DGroupExInfoOnly: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TribeId", wireType)
			}
			m.TribeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TribeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoneyForAddGroup", wireType)
			}
			m.MoneyForAddGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoneyForAddGroup |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X88D(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D88DGroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X88D
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D88DGroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D88DGroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOwner", wireType)
			}
			m.GroupOwner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupOwner |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCreateTime", wireType)
			}
			m.GroupCreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCreateTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupFlag", wireType)
			}
			m.GroupFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupFlagExt", wireType)
			}
			m.GroupFlagExt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupFlagExt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMemberMaxNum", wireType)
			}
			m.GroupMemberMaxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupMemberMaxNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMemberNum", wireType)
			}
			m.GroupMemberNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupMemberNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOption", wireType)
			}
			m.GroupOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupOption |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupClassExt", wireType)
			}
			m.GroupClassExt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupClassExt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSpecialClass", wireType)
			}
			m.GroupSpecialClass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupSpecialClass |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupLevel", wireType)
			}
			m.GroupLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupFace", wireType)
			}
			m.GroupFace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupFace |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupDefaultPage", wireType)
			}
			m.GroupDefaultPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupDefaultPage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfoSeq", wireType)
			}
			m.GroupInfoSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupInfoSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupRoamingTime", wireType)
			}
			m.GroupRoamingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupRoamingTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = append(m.GroupName[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupName == nil {
				m.GroupName = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMemo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupMemo = append(m.GroupMemo[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupMemo == nil {
				m.GroupMemo = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupFingerMemo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupFingerMemo = append(m.GroupFingerMemo[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupFingerMemo == nil {
				m.GroupFingerMemo = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupClassText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupClassText = append(m.GroupClassText[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupClassText == nil {
				m.GroupClassText = []byte{}
			}
			iNdEx = postIndex
		case 19:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOidb0X88D
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupAllianceCode = append(m.GroupAllianceCode, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOidb0X88D
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOidb0X88D
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOidb0X88D
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GroupAllianceCode) == 0 {
					m.GroupAllianceCode = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOidb0X88D
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupAllianceCode = append(m.GroupAllianceCode, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupAllianceCode", wireType)
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupExtraAadmNum", wireType)
			}
			m.GroupExtraAadmNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupExtraAadmNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupUin", wireType)
			}
			m.GroupUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupUin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCurMsgSeq", wireType)
			}
			m.GroupCurMsgSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCurMsgSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupLastMsgTime", wireType)
			}
			m.GroupLastMsgTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupLastMsgTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupQuestion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupQuestion = append(m.GroupQuestion[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupQuestion == nil {
				m.GroupQuestion = []byte{}
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupAnswer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupAnswer = append(m.GroupAnswer[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupAnswer == nil {
				m.GroupAnswer = []byte{}
			}
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupVisitorMaxNum", wireType)
			}
			m.GroupVisitorMaxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupVisitorMaxNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupVisitorCurNum", wireType)
			}
			m.GroupVisitorCurNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupVisitorCurNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelNameSeq", wireType)
			}
			m.LevelNameSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelNameSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupAdminMaxNum", wireType)
			}
			m.GroupAdminMaxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupAdminMaxNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupAioSkinTimestamp", wireType)
			}
			m.GroupAioSkinTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupAioSkinTimestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBoardSkinTimestamp", wireType)
			}
			m.GroupBoardSkinTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupBoardSkinTimestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupAioSkinUrl", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupAioSkinUrl = append(m.GroupAioSkinUrl[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupAioSkinUrl == nil {
				m.GroupAioSkinUrl = []byte{}
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBoardSkinUrl", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupBoardSkinUrl = append(m.GroupBoardSkinUrl[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupBoardSkinUrl == nil {
				m.GroupBoardSkinUrl = []byte{}
			}
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCoverSkinTimestamp", wireType)
			}
			m.GroupCoverSkinTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCoverSkinTimestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCoverSkinUrl", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupCoverSkinUrl = append(m.GroupCoverSkinUrl[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupCoverSkinUrl == nil {
				m.GroupCoverSkinUrl = []byte{}
			}
			iNdEx = postIndex
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupGrade", wireType)
			}
			m.GroupGrade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupGrade |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveMemberNum", wireType)
			}
			m.ActiveMemberNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveMemberNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationType", wireType)
			}
			m.CertificationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertificationType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificationText = append(m.CertificationText[:0], dAtA[iNdEx:postIndex]...)
			if m.CertificationText == nil {
				m.CertificationText = []byte{}
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupRichFingerMemo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupRichFingerMemo = append(m.GroupRichFingerMemo[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupRichFingerMemo == nil {
				m.GroupRichFingerMemo = []byte{}
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagRecord = append(m.TagRecord, &D88DTagRecord{})
			if err := m.TagRecord[len(m.TagRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupGeoInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupGeoInfo == nil {
				m.GroupGeoInfo = &D88DGroupGeoInfo{}
			}
			if err := m.GroupGeoInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadPortraitSeq", wireType)
			}
			m.HeadPortraitSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadPortraitSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeadPortrait", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgHeadPortrait == nil {
				m.MsgHeadPortrait = &D88DGroupHeadPortrait{}
			}
			if err := m.MsgHeadPortrait.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShutupTimestamp", wireType)
			}
			m.ShutupTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShutupTimestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShutupTimestampMe", wireType)
			}
			m.ShutupTimestampMe = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShutupTimestampMe |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateSourceFlag", wireType)
			}
			m.CreateSourceFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateSourceFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmduinMsgSeq", wireType)
			}
			m.CmduinMsgSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmduinMsgSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmduinJoinTime", wireType)
			}
			m.CmduinJoinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmduinJoinTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmduinUinFlag", wireType)
			}
			m.CmduinUinFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmduinUinFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmduinFlagEx", wireType)
			}
			m.CmduinFlagEx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmduinFlagEx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmduinNewMobileFlag", wireType)
			}
			m.CmduinNewMobileFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmduinNewMobileFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmduinReadMsgSeq", wireType)
			}
			m.CmduinReadMsgSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmduinReadMsgSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmduinLastMsgTime", wireType)
			}
			m.CmduinLastMsgTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmduinLastMsgTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupTypeFlag", wireType)
			}
			m.GroupTypeFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupTypeFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppPrivilegeFlag", wireType)
			}
			m.AppPrivilegeFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppPrivilegeFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StGroupExInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StGroupExInfo == nil {
				m.StGroupExInfo = &D88DGroupExInfoOnly{}
			}
			if err := m.StGroupExInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSecLevel", wireType)
			}
			m.GroupSecLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupSecLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSecLevelInfo", wireType)
			}
			m.GroupSecLevelInfo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupSecLevelInfo |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmduinPrivilege", wireType)
			}
			m.CmduinPrivilege = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmduinPrivilege |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoidInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoidInfo = append(m.PoidInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.PoidInfo == nil {
				m.PoidInfo = []byte{}
			}
			iNdEx = postIndex
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmduinFlagEx2", wireType)
			}
			m.CmduinFlagEx2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmduinFlagEx2 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfUin", wireType)
			}
			m.ConfUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfUin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfMaxMsgSeq", wireType)
			}
			m.ConfMaxMsgSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfMaxMsgSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfToGroupTime", wireType)
			}
			m.ConfToGroupTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfToGroupTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordRedbagTime", wireType)
			}
			m.PasswordRedbagTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PasswordRedbagTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionUin", wireType)
			}
			m.SubscriptionUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscriptionUin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberListChangeSeq", wireType)
			}
			m.MemberListChangeSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberListChangeSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembercardSeq", wireType)
			}
			m.MembercardSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MembercardSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 70:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootId", wireType)
			}
			m.RootId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RootId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamSeq", wireType)
			}
			m.TeamSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMsgBeginTime", wireType)
			}
			m.HistoryMsgBeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryMsgBeginTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 74:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteNoAuthNumLimit", wireType)
			}
			m.InviteNoAuthNumLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteNoAuthNumLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 75:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmduinHistoryMsgSeq", wireType)
			}
			m.CmduinHistoryMsgSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmduinHistoryMsgSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 76:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmduinJoinMsgSeq", wireType)
			}
			m.CmduinJoinMsgSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmduinJoinMsgSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 77:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupFlagext3", wireType)
			}
			m.GroupFlagext3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupFlagext3 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 78:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOpenAppid", wireType)
			}
			m.GroupOpenAppid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupOpenAppid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 79:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConfGroup", wireType)
			}
			m.IsConfGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsConfGroup |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 80:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsModifyConfGroupFace", wireType)
			}
			m.IsModifyConfGroupFace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsModifyConfGroupFace |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 81:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsModifyConfGroupName", wireType)
			}
			m.IsModifyConfGroupName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsModifyConfGroupName |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoFingerOpenFlag", wireType)
			}
			m.NoFingerOpenFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoFingerOpenFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 83:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoCodeFingerOpenFlag", wireType)
			}
			m.NoCodeFingerOpenFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoCodeFingerOpenFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X88D(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqGroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X88D
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqGroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqGroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stgroupinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stgroupinfo == nil {
				m.Stgroupinfo = &D88DGroupInfo{}
			}
			if err := m.Stgroupinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastGetGroupNameTime", wireType)
			}
			m.LastGetGroupNameTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastGetGroupNameTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X88D(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D88DReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X88D
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D88DReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D88DReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqGroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqGroupInfo = append(m.ReqGroupInfo, &ReqGroupInfo{})
			if err := m.ReqGroupInfo[len(m.ReqGroupInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcClientVersion", wireType)
			}
			m.PcClientVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PcClientVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X88D(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RspGroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X88D
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RspGroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RspGroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupInfo == nil {
				m.GroupInfo = &D88DGroupInfo{}
			}
			if err := m.GroupInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X88D(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D88DRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X88D
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D88DRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D88DRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RspGroupInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RspGroupInfo = append(m.RspGroupInfo, &RspGroupInfo{})
			if err := m.RspGroupInfo[len(m.RspGroupInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrErrorInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrErrorInfo = append(m.StrErrorInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.StrErrorInfo == nil {
				m.StrErrorInfo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X88D(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D88DTagRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X88D
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D88DTagRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D88DTagRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromUin", wireType)
			}
			m.FromUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromUin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagId = append(m.TagId[:0], dAtA[iNdEx:postIndex]...)
			if m.TagId == nil {
				m.TagId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetTime", wireType)
			}
			m.SetTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodNum", wireType)
			}
			m.GoodNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadNum", wireType)
			}
			m.BadNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BadNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagLen", wireType)
			}
			m.TagLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagLen |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagValue = append(m.TagValue[:0], dAtA[iNdEx:postIndex]...)
			if m.TagValue == nil {
				m.TagValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X88D(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D88DGroupGeoInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X88D
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D88DGroupGeoInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D88DGroupGeoInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owneruin", wireType)
			}
			m.Owneruin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Owneruin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settime", wireType)
			}
			m.Settime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Settime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cityid", wireType)
			}
			m.Cityid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cityid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			m.Longitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Longitude |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			m.Latitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Latitude |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geocontent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Geocontent = append(m.Geocontent[:0], dAtA[iNdEx:postIndex]...)
			if m.Geocontent == nil {
				m.Geocontent = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoiId", wireType)
			}
			m.PoiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoiId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X88D(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X88D
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOidb0X88D(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOidb0X88D
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0X88D
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOidb0X88D
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOidb0X88D
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOidb0X88D
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOidb0X88D        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOidb0X88D          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOidb0X88D = fmt.Errorf("proto: unexpected end of group")
)
