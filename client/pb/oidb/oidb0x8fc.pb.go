// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oidb0x8fc.proto

package oidb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type D8FCReqBody struct {
	GroupCode      int64             `protobuf:"varint,1,opt,name=groupCode" json:"groupCode"`
	ShowFlag       int32             `protobuf:"varint,2,opt,name=showFlag" json:"showFlag"`
	MemLevelInfo   []*D8FCMemberInfo `protobuf:"bytes,3,rep,name=memLevelInfo" json:"memLevelInfo,omitempty"`
	LevelName      []*D8FCLevelName  `protobuf:"bytes,4,rep,name=levelName" json:"levelName,omitempty"`
	UpdateTime     int32             `protobuf:"varint,5,opt,name=updateTime" json:"updateTime"`
	OfficeMode     int32             `protobuf:"varint,6,opt,name=officeMode" json:"officeMode"`
	GroupOpenAppid int32             `protobuf:"varint,7,opt,name=groupOpenAppid" json:"groupOpenAppid"`
	MsgClientInfo  *D8FCClientInfo   `protobuf:"bytes,8,opt,name=msgClientInfo" json:"msgClientInfo,omitempty"`
	AuthKey        []byte            `protobuf:"bytes,9,opt,name=authKey" json:"authKey"`
}

func (m *D8FCReqBody) Reset()         { *m = D8FCReqBody{} }
func (m *D8FCReqBody) String() string { return proto.CompactTextString(m) }
func (*D8FCReqBody) ProtoMessage()    {}
func (*D8FCReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6dad328ecffe2f5, []int{0}
}
func (m *D8FCReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D8FCReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D8FCReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D8FCReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D8FCReqBody.Merge(m, src)
}
func (m *D8FCReqBody) XXX_Size() int {
	return m.Size()
}
func (m *D8FCReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_D8FCReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_D8FCReqBody proto.InternalMessageInfo

func (m *D8FCReqBody) GetGroupCode() int64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *D8FCReqBody) GetShowFlag() int32 {
	if m != nil {
		return m.ShowFlag
	}
	return 0
}

func (m *D8FCReqBody) GetMemLevelInfo() []*D8FCMemberInfo {
	if m != nil {
		return m.MemLevelInfo
	}
	return nil
}

func (m *D8FCReqBody) GetLevelName() []*D8FCLevelName {
	if m != nil {
		return m.LevelName
	}
	return nil
}

func (m *D8FCReqBody) GetUpdateTime() int32 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *D8FCReqBody) GetOfficeMode() int32 {
	if m != nil {
		return m.OfficeMode
	}
	return 0
}

func (m *D8FCReqBody) GetGroupOpenAppid() int32 {
	if m != nil {
		return m.GroupOpenAppid
	}
	return 0
}

func (m *D8FCReqBody) GetMsgClientInfo() *D8FCClientInfo {
	if m != nil {
		return m.MsgClientInfo
	}
	return nil
}

func (m *D8FCReqBody) GetAuthKey() []byte {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

type D8FCMemberInfo struct {
	Uin                    int64               `protobuf:"varint,1,opt,name=uin" json:"uin"`
	Point                  int32               `protobuf:"varint,2,opt,name=point" json:"point"`
	ActiveDay              int32               `protobuf:"varint,3,opt,name=activeDay" json:"activeDay"`
	Level                  int32               `protobuf:"varint,4,opt,name=level" json:"level"`
	SpecialTitle           []byte              `protobuf:"bytes,5,opt,name=specialTitle" json:"specialTitle"`
	SpecialTitleExpireTime int32               `protobuf:"varint,6,opt,name=specialTitleExpireTime" json:"specialTitleExpireTime"`
	UinName                []byte              `protobuf:"bytes,7,opt,name=uinName" json:"uinName"`
	MemberCardName         []byte              `protobuf:"bytes,8,opt,name=memberCardName" json:"memberCardName"`
	Phone                  []byte              `protobuf:"bytes,9,opt,name=phone" json:"phone"`
	Email                  []byte              `protobuf:"bytes,10,opt,name=email" json:"email"`
	Remark                 []byte              `protobuf:"bytes,11,opt,name=remark" json:"remark"`
	Gender                 int32               `protobuf:"varint,12,opt,name=gender" json:"gender"`
	Job                    []byte              `protobuf:"bytes,13,opt,name=job" json:"job"`
	TribeLevel             int32               `protobuf:"varint,14,opt,name=tribeLevel" json:"tribeLevel"`
	TribePoint             int32               `protobuf:"varint,15,opt,name=tribePoint" json:"tribePoint"`
	RichCardName           []*D8FCCardNameElem `protobuf:"bytes,16,rep,name=richCardName" json:"richCardName,omitempty"`
	CommRichCardName       []byte              `protobuf:"bytes,17,opt,name=commRichCardName" json:"commRichCardName"`
}

func (m *D8FCMemberInfo) Reset()         { *m = D8FCMemberInfo{} }
func (m *D8FCMemberInfo) String() string { return proto.CompactTextString(m) }
func (*D8FCMemberInfo) ProtoMessage()    {}
func (*D8FCMemberInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6dad328ecffe2f5, []int{1}
}
func (m *D8FCMemberInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D8FCMemberInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D8FCMemberInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D8FCMemberInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D8FCMemberInfo.Merge(m, src)
}
func (m *D8FCMemberInfo) XXX_Size() int {
	return m.Size()
}
func (m *D8FCMemberInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_D8FCMemberInfo.DiscardUnknown(m)
}

var xxx_messageInfo_D8FCMemberInfo proto.InternalMessageInfo

func (m *D8FCMemberInfo) GetUin() int64 {
	if m != nil {
		return m.Uin
	}
	return 0
}

func (m *D8FCMemberInfo) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *D8FCMemberInfo) GetActiveDay() int32 {
	if m != nil {
		return m.ActiveDay
	}
	return 0
}

func (m *D8FCMemberInfo) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *D8FCMemberInfo) GetSpecialTitle() []byte {
	if m != nil {
		return m.SpecialTitle
	}
	return nil
}

func (m *D8FCMemberInfo) GetSpecialTitleExpireTime() int32 {
	if m != nil {
		return m.SpecialTitleExpireTime
	}
	return 0
}

func (m *D8FCMemberInfo) GetUinName() []byte {
	if m != nil {
		return m.UinName
	}
	return nil
}

func (m *D8FCMemberInfo) GetMemberCardName() []byte {
	if m != nil {
		return m.MemberCardName
	}
	return nil
}

func (m *D8FCMemberInfo) GetPhone() []byte {
	if m != nil {
		return m.Phone
	}
	return nil
}

func (m *D8FCMemberInfo) GetEmail() []byte {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *D8FCMemberInfo) GetRemark() []byte {
	if m != nil {
		return m.Remark
	}
	return nil
}

func (m *D8FCMemberInfo) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *D8FCMemberInfo) GetJob() []byte {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *D8FCMemberInfo) GetTribeLevel() int32 {
	if m != nil {
		return m.TribeLevel
	}
	return 0
}

func (m *D8FCMemberInfo) GetTribePoint() int32 {
	if m != nil {
		return m.TribePoint
	}
	return 0
}

func (m *D8FCMemberInfo) GetRichCardName() []*D8FCCardNameElem {
	if m != nil {
		return m.RichCardName
	}
	return nil
}

func (m *D8FCMemberInfo) GetCommRichCardName() []byte {
	if m != nil {
		return m.CommRichCardName
	}
	return nil
}

type D8FCCardNameElem struct {
	EnumCardType int32  `protobuf:"varint,1,opt,name=enumCardType" json:"enumCardType"`
	Value        []byte `protobuf:"bytes,2,opt,name=value" json:"value"`
}

func (m *D8FCCardNameElem) Reset()         { *m = D8FCCardNameElem{} }
func (m *D8FCCardNameElem) String() string { return proto.CompactTextString(m) }
func (*D8FCCardNameElem) ProtoMessage()    {}
func (*D8FCCardNameElem) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6dad328ecffe2f5, []int{2}
}
func (m *D8FCCardNameElem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D8FCCardNameElem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D8FCCardNameElem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D8FCCardNameElem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D8FCCardNameElem.Merge(m, src)
}
func (m *D8FCCardNameElem) XXX_Size() int {
	return m.Size()
}
func (m *D8FCCardNameElem) XXX_DiscardUnknown() {
	xxx_messageInfo_D8FCCardNameElem.DiscardUnknown(m)
}

var xxx_messageInfo_D8FCCardNameElem proto.InternalMessageInfo

func (m *D8FCCardNameElem) GetEnumCardType() int32 {
	if m != nil {
		return m.EnumCardType
	}
	return 0
}

func (m *D8FCCardNameElem) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type D8FCLevelName struct {
	Level int32  `protobuf:"varint,1,opt,name=level" json:"level"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name"`
}

func (m *D8FCLevelName) Reset()         { *m = D8FCLevelName{} }
func (m *D8FCLevelName) String() string { return proto.CompactTextString(m) }
func (*D8FCLevelName) ProtoMessage()    {}
func (*D8FCLevelName) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6dad328ecffe2f5, []int{3}
}
func (m *D8FCLevelName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D8FCLevelName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D8FCLevelName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D8FCLevelName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D8FCLevelName.Merge(m, src)
}
func (m *D8FCLevelName) XXX_Size() int {
	return m.Size()
}
func (m *D8FCLevelName) XXX_DiscardUnknown() {
	xxx_messageInfo_D8FCLevelName.DiscardUnknown(m)
}

var xxx_messageInfo_D8FCLevelName proto.InternalMessageInfo

func (m *D8FCLevelName) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *D8FCLevelName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type D8FCClientInfo struct {
	Implat       int32  `protobuf:"varint,1,opt,name=implat" json:"implat"`
	IngClientver string `protobuf:"bytes,2,opt,name=ingClientver" json:"ingClientver"`
}

func (m *D8FCClientInfo) Reset()         { *m = D8FCClientInfo{} }
func (m *D8FCClientInfo) String() string { return proto.CompactTextString(m) }
func (*D8FCClientInfo) ProtoMessage()    {}
func (*D8FCClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6dad328ecffe2f5, []int{4}
}
func (m *D8FCClientInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D8FCClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D8FCClientInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D8FCClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D8FCClientInfo.Merge(m, src)
}
func (m *D8FCClientInfo) XXX_Size() int {
	return m.Size()
}
func (m *D8FCClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_D8FCClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_D8FCClientInfo proto.InternalMessageInfo

func (m *D8FCClientInfo) GetImplat() int32 {
	if m != nil {
		return m.Implat
	}
	return 0
}

func (m *D8FCClientInfo) GetIngClientver() string {
	if m != nil {
		return m.IngClientver
	}
	return ""
}

type D8FCCommCardNameBuf struct {
	RichCardName []*D8FCRichCardNameElem `protobuf:"bytes,1,rep,name=richCardName" json:"richCardName,omitempty"`
}

func (m *D8FCCommCardNameBuf) Reset()         { *m = D8FCCommCardNameBuf{} }
func (m *D8FCCommCardNameBuf) String() string { return proto.CompactTextString(m) }
func (*D8FCCommCardNameBuf) ProtoMessage()    {}
func (*D8FCCommCardNameBuf) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6dad328ecffe2f5, []int{5}
}
func (m *D8FCCommCardNameBuf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D8FCCommCardNameBuf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D8FCCommCardNameBuf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D8FCCommCardNameBuf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D8FCCommCardNameBuf.Merge(m, src)
}
func (m *D8FCCommCardNameBuf) XXX_Size() int {
	return m.Size()
}
func (m *D8FCCommCardNameBuf) XXX_DiscardUnknown() {
	xxx_messageInfo_D8FCCommCardNameBuf.DiscardUnknown(m)
}

var xxx_messageInfo_D8FCCommCardNameBuf proto.InternalMessageInfo

func (m *D8FCCommCardNameBuf) GetRichCardName() []*D8FCRichCardNameElem {
	if m != nil {
		return m.RichCardName
	}
	return nil
}

type D8FCRichCardNameElem struct {
	Ctrl []byte `protobuf:"bytes,1,opt,name=ctrl" json:"ctrl"`
	Text []byte `protobuf:"bytes,2,opt,name=text" json:"text"`
}

func (m *D8FCRichCardNameElem) Reset()         { *m = D8FCRichCardNameElem{} }
func (m *D8FCRichCardNameElem) String() string { return proto.CompactTextString(m) }
func (*D8FCRichCardNameElem) ProtoMessage()    {}
func (*D8FCRichCardNameElem) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6dad328ecffe2f5, []int{6}
}
func (m *D8FCRichCardNameElem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D8FCRichCardNameElem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D8FCRichCardNameElem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D8FCRichCardNameElem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D8FCRichCardNameElem.Merge(m, src)
}
func (m *D8FCRichCardNameElem) XXX_Size() int {
	return m.Size()
}
func (m *D8FCRichCardNameElem) XXX_DiscardUnknown() {
	xxx_messageInfo_D8FCRichCardNameElem.DiscardUnknown(m)
}

var xxx_messageInfo_D8FCRichCardNameElem proto.InternalMessageInfo

func (m *D8FCRichCardNameElem) GetCtrl() []byte {
	if m != nil {
		return m.Ctrl
	}
	return nil
}

func (m *D8FCRichCardNameElem) GetText() []byte {
	if m != nil {
		return m.Text
	}
	return nil
}

func init() {
	proto.RegisterType((*D8FCReqBody)(nil), "D8FCReqBody")
	proto.RegisterType((*D8FCMemberInfo)(nil), "D8FCMemberInfo")
	proto.RegisterType((*D8FCCardNameElem)(nil), "D8FCCardNameElem")
	proto.RegisterType((*D8FCLevelName)(nil), "D8FCLevelName")
	proto.RegisterType((*D8FCClientInfo)(nil), "D8FCClientInfo")
	proto.RegisterType((*D8FCCommCardNameBuf)(nil), "D8FCCommCardNameBuf")
	proto.RegisterType((*D8FCRichCardNameElem)(nil), "D8FCRichCardNameElem")
}

func init() { proto.RegisterFile("oidb0x8fc.proto", fileDescriptor_a6dad328ecffe2f5) }

var fileDescriptor_a6dad328ecffe2f5 = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xc1, 0x4e, 0xdb, 0x4a,
	0x14, 0x86, 0xe3, 0x9b, 0x10, 0xc8, 0x21, 0x04, 0x98, 0x7b, 0x2f, 0x1a, 0x55, 0xc8, 0xb5, 0xac,
	0x2e, 0xb2, 0x40, 0x08, 0xb5, 0x42, 0xa2, 0x6a, 0x37, 0x4d, 0x00, 0xa9, 0x2d, 0xb4, 0xc8, 0x62,
	0x81, 0xba, 0x73, 0xec, 0x93, 0x64, 0x5a, 0x8f, 0xc7, 0x35, 0x76, 0x4a, 0x9e, 0xa0, 0xdb, 0x3e,
	0x16, 0x4b, 0x96, 0x5d, 0x55, 0x15, 0x3c, 0x46, 0x37, 0xd5, 0x8c, 0x9d, 0x78, 0x26, 0x69, 0x97,
	0xf9, 0xfe, 0x7f, 0x26, 0xe7, 0xfc, 0xe7, 0x8c, 0x61, 0x53, 0xb0, 0x70, 0x70, 0x70, 0x73, 0x34,
	0x0c, 0xf6, 0x93, 0x54, 0x64, 0xc2, 0xfd, 0x5a, 0x87, 0xf5, 0xe3, 0xa3, 0xd3, 0xbe, 0x87, 0x9f,
	0x7b, 0x22, 0x9c, 0x12, 0x17, 0x5a, 0xa3, 0x54, 0xe4, 0x49, 0x5f, 0x84, 0x48, 0x2d, 0xc7, 0xea,
	0xd6, 0x7b, 0x8d, 0xdb, 0x1f, 0x8f, 0x6b, 0x5e, 0x85, 0x89, 0x03, 0x6b, 0xd7, 0x63, 0xf1, 0xe5,
	0x34, 0xf2, 0x47, 0xf4, 0x1f, 0xc7, 0xea, 0xae, 0x94, 0x96, 0x39, 0x25, 0xcf, 0xa0, 0xcd, 0x91,
	0x9f, 0xe1, 0x04, 0xa3, 0xd7, 0xf1, 0x50, 0xd0, 0xba, 0x53, 0xef, 0xae, 0x3f, 0xdd, 0xdc, 0x97,
	0xff, 0x74, 0x8e, 0x7c, 0x80, 0xa9, 0xc4, 0x9e, 0x61, 0x22, 0x7b, 0xd0, 0x8a, 0xe4, 0x8f, 0x77,
	0x3e, 0x47, 0xda, 0x50, 0x27, 0x3a, 0xea, 0xc4, 0xd9, 0x8c, 0x7a, 0x95, 0x81, 0x3c, 0x01, 0xc8,
	0x93, 0xd0, 0xcf, 0xf0, 0x92, 0x71, 0xa4, 0x2b, 0x5a, 0x19, 0x1a, 0x97, 0x2e, 0x31, 0x1c, 0xb2,
	0x00, 0xcf, 0x65, 0x3f, 0x4d, 0xdd, 0x55, 0x71, 0xb2, 0x07, 0x1d, 0xd5, 0xdd, 0xfb, 0x04, 0xe3,
	0x57, 0x49, 0xc2, 0x42, 0xba, 0xaa, 0x39, 0x17, 0x34, 0x72, 0x08, 0x1b, 0xfc, 0x7a, 0xd4, 0x8f,
	0x18, 0xc6, 0x99, 0xea, 0x6e, 0xcd, 0xb1, 0xe6, 0xdd, 0x55, 0xd8, 0x33, 0x5d, 0xc4, 0x86, 0x55,
	0x3f, 0xcf, 0xc6, 0x6f, 0x71, 0x4a, 0x5b, 0x8e, 0xd5, 0x6d, 0x97, 0xb7, 0xcf, 0xa0, 0xfb, 0xab,
	0x01, 0x1d, 0x33, 0x1f, 0xb2, 0x03, 0xf5, 0x9c, 0xc5, 0xc6, 0x18, 0x24, 0x20, 0x8f, 0x60, 0x25,
	0x11, 0x2c, 0xce, 0x8c, 0xf4, 0x0b, 0x24, 0x07, 0xe8, 0x07, 0x19, 0x9b, 0xe0, 0xb1, 0x3f, 0xa5,
	0x75, 0x4d, 0xaf, 0xb0, 0x3c, 0xaf, 0x82, 0xa4, 0x0d, 0xfd, 0xbc, 0x42, 0xa4, 0x0b, 0xed, 0xeb,
	0x04, 0x03, 0xe6, 0x47, 0x97, 0x2c, 0x8b, 0x8a, 0x64, 0x67, 0xb5, 0x1a, 0x0a, 0x79, 0x09, 0x3b,
	0xfa, 0xef, 0x93, 0x9b, 0x84, 0xa5, 0xc5, 0x34, 0xf4, 0x9c, 0xff, 0xe2, 0x91, 0x71, 0xe4, 0x2c,
	0x56, 0xb3, 0x5e, 0xd5, 0xe3, 0x28, 0xa1, 0x9c, 0x09, 0x57, 0x49, 0xf4, 0xfd, 0x34, 0x54, 0xb6,
	0x35, 0xcd, 0xb6, 0xa0, 0xa9, 0x44, 0xc6, 0x22, 0x46, 0x23, 0xda, 0x02, 0x49, 0x0d, 0xb9, 0xcf,
	0x22, 0x0a, 0xba, 0xa6, 0x10, 0xd9, 0x85, 0x66, 0x8a, 0xdc, 0x4f, 0x3f, 0xd1, 0x75, 0x4d, 0x2c,
	0x99, 0x54, 0x47, 0x18, 0x87, 0x98, 0xd2, 0xb6, 0xd6, 0x51, 0xc9, 0xe4, 0x74, 0x3e, 0x8a, 0x01,
	0xdd, 0xd0, 0x0e, 0x4a, 0x20, 0x77, 0x2e, 0x4b, 0xd9, 0x00, 0xd5, 0xda, 0xd2, 0x8e, 0xbe, 0x73,
	0x15, 0x9f, 0xbb, 0x2e, 0xd4, 0x20, 0x37, 0x97, 0x5c, 0x8a, 0x93, 0x43, 0x68, 0xa7, 0x2c, 0x18,
	0xcf, 0x33, 0xd8, 0x52, 0xcf, 0x62, 0xbb, 0x58, 0xb5, 0x12, 0x9e, 0x44, 0xc8, 0x3d, 0xc3, 0x46,
	0x0e, 0x60, 0x2b, 0x10, 0x9c, 0x7b, 0xfa, 0xd1, 0x6d, 0xad, 0xce, 0x25, 0xd5, 0xbd, 0x82, 0xad,
	0xc5, 0x3b, 0xe5, 0x2a, 0x60, 0x9c, 0x73, 0xc9, 0x2e, 0xa7, 0x49, 0xf1, 0x39, 0x98, 0x15, 0x69,
	0x28, 0x32, 0xe2, 0x89, 0x1f, 0xe5, 0xa8, 0x16, 0x72, 0x1e, 0xb1, 0x42, 0xee, 0x09, 0x6c, 0x18,
	0x8f, 0xb8, 0xda, 0x3e, 0x6b, 0x79, 0xfb, 0x28, 0x34, 0x62, 0x59, 0xac, 0xbc, 0xa7, 0x55, 0x4a,
	0x8a, 0xb8, 0x57, 0xc5, 0xeb, 0xd0, 0x1e, 0xd4, 0x2e, 0x34, 0x19, 0x4f, 0x22, 0x3f, 0x33, 0x2e,
	0x2a, 0x99, 0x2c, 0x9e, 0xc5, 0xe5, 0xfb, 0x9b, 0x60, 0x6a, 0xdc, 0x68, 0x28, 0xee, 0x05, 0xfc,
	0xab, 0x6e, 0x16, 0x9c, 0xcf, 0xda, 0xef, 0xe5, 0x43, 0xf2, 0x7c, 0x21, 0x7a, 0x4b, 0x45, 0xff,
	0xbf, 0x8a, 0x5e, 0x8f, 0x6e, 0x39, 0x7e, 0xf7, 0x0d, 0xfc, 0xf7, 0x27, 0x97, 0xec, 0x2e, 0xc8,
	0xd2, 0xa2, 0xf1, 0x59, 0x4a, 0x8a, 0x48, 0x25, 0xc3, 0x9b, 0xcc, 0xc8, 0x4f, 0x91, 0x9e, 0x73,
	0x7b, 0x6f, 0x5b, 0x77, 0xf7, 0xb6, 0xf5, 0xf3, 0xde, 0xb6, 0xbe, 0x3d, 0xd8, 0xb5, 0xbb, 0x07,
	0xbb, 0xf6, 0xfd, 0xc1, 0xae, 0x7d, 0x68, 0xee, 0xbf, 0x90, 0x5f, 0xf3, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xa3, 0x73, 0xdb, 0xf6, 0xd4, 0x05, 0x00, 0x00,
}

func (m *D8FCReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D8FCReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D8FCReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthKey != nil {
		i -= len(m.AuthKey)
		copy(dAtA[i:], m.AuthKey)
		i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.AuthKey)))
		i--
		dAtA[i] = 0x4a
	}
	if m.MsgClientInfo != nil {
		{
			size, err := m.MsgClientInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X8Fc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.GroupOpenAppid))
	i--
	dAtA[i] = 0x38
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.OfficeMode))
	i--
	dAtA[i] = 0x30
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.UpdateTime))
	i--
	dAtA[i] = 0x28
	if len(m.LevelName) > 0 {
		for iNdEx := len(m.LevelName) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LevelName[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOidb0X8Fc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MemLevelInfo) > 0 {
		for iNdEx := len(m.MemLevelInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MemLevelInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOidb0X8Fc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.ShowFlag))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.GroupCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *D8FCMemberInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D8FCMemberInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D8FCMemberInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommRichCardName != nil {
		i -= len(m.CommRichCardName)
		copy(dAtA[i:], m.CommRichCardName)
		i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.CommRichCardName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.RichCardName) > 0 {
		for iNdEx := len(m.RichCardName) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RichCardName[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOidb0X8Fc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.TribePoint))
	i--
	dAtA[i] = 0x78
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.TribeLevel))
	i--
	dAtA[i] = 0x70
	if m.Job != nil {
		i -= len(m.Job)
		copy(dAtA[i:], m.Job)
		i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.Job)))
		i--
		dAtA[i] = 0x6a
	}
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.Gender))
	i--
	dAtA[i] = 0x60
	if m.Remark != nil {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Email != nil {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x52
	}
	if m.Phone != nil {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x4a
	}
	if m.MemberCardName != nil {
		i -= len(m.MemberCardName)
		copy(dAtA[i:], m.MemberCardName)
		i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.MemberCardName)))
		i--
		dAtA[i] = 0x42
	}
	if m.UinName != nil {
		i -= len(m.UinName)
		copy(dAtA[i:], m.UinName)
		i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.UinName)))
		i--
		dAtA[i] = 0x3a
	}
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.SpecialTitleExpireTime))
	i--
	dAtA[i] = 0x30
	if m.SpecialTitle != nil {
		i -= len(m.SpecialTitle)
		copy(dAtA[i:], m.SpecialTitle)
		i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.SpecialTitle)))
		i--
		dAtA[i] = 0x2a
	}
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.Level))
	i--
	dAtA[i] = 0x20
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.ActiveDay))
	i--
	dAtA[i] = 0x18
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.Point))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.Uin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *D8FCCardNameElem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D8FCCardNameElem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D8FCCardNameElem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.EnumCardType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *D8FCLevelName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D8FCLevelName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D8FCLevelName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.Level))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *D8FCClientInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D8FCClientInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D8FCClientInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.IngClientver)
	copy(dAtA[i:], m.IngClientver)
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.IngClientver)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintOidb0X8Fc(dAtA, i, uint64(m.Implat))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *D8FCCommCardNameBuf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D8FCCommCardNameBuf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D8FCCommCardNameBuf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RichCardName) > 0 {
		for iNdEx := len(m.RichCardName) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RichCardName[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOidb0X8Fc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *D8FCRichCardNameElem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D8FCRichCardNameElem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D8FCRichCardNameElem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Text != nil {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ctrl != nil {
		i -= len(m.Ctrl)
		copy(dAtA[i:], m.Ctrl)
		i = encodeVarintOidb0X8Fc(dAtA, i, uint64(len(m.Ctrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOidb0X8Fc(dAtA []byte, offset int, v uint64) int {
	offset -= sovOidb0X8Fc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *D8FCReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X8Fc(uint64(m.GroupCode))
	n += 1 + sovOidb0X8Fc(uint64(m.ShowFlag))
	if len(m.MemLevelInfo) > 0 {
		for _, e := range m.MemLevelInfo {
			l = e.Size()
			n += 1 + l + sovOidb0X8Fc(uint64(l))
		}
	}
	if len(m.LevelName) > 0 {
		for _, e := range m.LevelName {
			l = e.Size()
			n += 1 + l + sovOidb0X8Fc(uint64(l))
		}
	}
	n += 1 + sovOidb0X8Fc(uint64(m.UpdateTime))
	n += 1 + sovOidb0X8Fc(uint64(m.OfficeMode))
	n += 1 + sovOidb0X8Fc(uint64(m.GroupOpenAppid))
	if m.MsgClientInfo != nil {
		l = m.MsgClientInfo.Size()
		n += 1 + l + sovOidb0X8Fc(uint64(l))
	}
	if m.AuthKey != nil {
		l = len(m.AuthKey)
		n += 1 + l + sovOidb0X8Fc(uint64(l))
	}
	return n
}

func (m *D8FCMemberInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X8Fc(uint64(m.Uin))
	n += 1 + sovOidb0X8Fc(uint64(m.Point))
	n += 1 + sovOidb0X8Fc(uint64(m.ActiveDay))
	n += 1 + sovOidb0X8Fc(uint64(m.Level))
	if m.SpecialTitle != nil {
		l = len(m.SpecialTitle)
		n += 1 + l + sovOidb0X8Fc(uint64(l))
	}
	n += 1 + sovOidb0X8Fc(uint64(m.SpecialTitleExpireTime))
	if m.UinName != nil {
		l = len(m.UinName)
		n += 1 + l + sovOidb0X8Fc(uint64(l))
	}
	if m.MemberCardName != nil {
		l = len(m.MemberCardName)
		n += 1 + l + sovOidb0X8Fc(uint64(l))
	}
	if m.Phone != nil {
		l = len(m.Phone)
		n += 1 + l + sovOidb0X8Fc(uint64(l))
	}
	if m.Email != nil {
		l = len(m.Email)
		n += 1 + l + sovOidb0X8Fc(uint64(l))
	}
	if m.Remark != nil {
		l = len(m.Remark)
		n += 1 + l + sovOidb0X8Fc(uint64(l))
	}
	n += 1 + sovOidb0X8Fc(uint64(m.Gender))
	if m.Job != nil {
		l = len(m.Job)
		n += 1 + l + sovOidb0X8Fc(uint64(l))
	}
	n += 1 + sovOidb0X8Fc(uint64(m.TribeLevel))
	n += 1 + sovOidb0X8Fc(uint64(m.TribePoint))
	if len(m.RichCardName) > 0 {
		for _, e := range m.RichCardName {
			l = e.Size()
			n += 2 + l + sovOidb0X8Fc(uint64(l))
		}
	}
	if m.CommRichCardName != nil {
		l = len(m.CommRichCardName)
		n += 2 + l + sovOidb0X8Fc(uint64(l))
	}
	return n
}

func (m *D8FCCardNameElem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X8Fc(uint64(m.EnumCardType))
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovOidb0X8Fc(uint64(l))
	}
	return n
}

func (m *D8FCLevelName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X8Fc(uint64(m.Level))
	l = len(m.Name)
	n += 1 + l + sovOidb0X8Fc(uint64(l))
	return n
}

func (m *D8FCClientInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X8Fc(uint64(m.Implat))
	l = len(m.IngClientver)
	n += 1 + l + sovOidb0X8Fc(uint64(l))
	return n
}

func (m *D8FCCommCardNameBuf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RichCardName) > 0 {
		for _, e := range m.RichCardName {
			l = e.Size()
			n += 1 + l + sovOidb0X8Fc(uint64(l))
		}
	}
	return n
}

func (m *D8FCRichCardNameElem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ctrl != nil {
		l = len(m.Ctrl)
		n += 1 + l + sovOidb0X8Fc(uint64(l))
	}
	if m.Text != nil {
		l = len(m.Text)
		n += 1 + l + sovOidb0X8Fc(uint64(l))
	}
	return n
}

func sovOidb0X8Fc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOidb0X8Fc(x uint64) (n int) {
	return sovOidb0X8Fc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *D8FCReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X8Fc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D8FCReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D8FCReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowFlag", wireType)
			}
			m.ShowFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemLevelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemLevelInfo = append(m.MemLevelInfo, &D8FCMemberInfo{})
			if err := m.MemLevelInfo[len(m.MemLevelInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelName = append(m.LevelName, &D8FCLevelName{})
			if err := m.LevelName[len(m.LevelName)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficeMode", wireType)
			}
			m.OfficeMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficeMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOpenAppid", wireType)
			}
			m.GroupOpenAppid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupOpenAppid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgClientInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgClientInfo == nil {
				m.MsgClientInfo = &D8FCClientInfo{}
			}
			if err := m.MsgClientInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthKey = append(m.AuthKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthKey == nil {
				m.AuthKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X8Fc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D8FCMemberInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X8Fc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D8FCMemberInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D8FCMemberInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			m.Uin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveDay", wireType)
			}
			m.ActiveDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveDay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialTitle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialTitle = append(m.SpecialTitle[:0], dAtA[iNdEx:postIndex]...)
			if m.SpecialTitle == nil {
				m.SpecialTitle = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialTitleExpireTime", wireType)
			}
			m.SpecialTitleExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialTitleExpireTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UinName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UinName = append(m.UinName[:0], dAtA[iNdEx:postIndex]...)
			if m.UinName == nil {
				m.UinName = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberCardName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberCardName = append(m.MemberCardName[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberCardName == nil {
				m.MemberCardName = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = append(m.Phone[:0], dAtA[iNdEx:postIndex]...)
			if m.Phone == nil {
				m.Phone = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = append(m.Email[:0], dAtA[iNdEx:postIndex]...)
			if m.Email == nil {
				m.Email = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = append(m.Remark[:0], dAtA[iNdEx:postIndex]...)
			if m.Remark == nil {
				m.Remark = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Job = append(m.Job[:0], dAtA[iNdEx:postIndex]...)
			if m.Job == nil {
				m.Job = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TribeLevel", wireType)
			}
			m.TribeLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TribeLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TribePoint", wireType)
			}
			m.TribePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TribePoint |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RichCardName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RichCardName = append(m.RichCardName, &D8FCCardNameElem{})
			if err := m.RichCardName[len(m.RichCardName)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommRichCardName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommRichCardName = append(m.CommRichCardName[:0], dAtA[iNdEx:postIndex]...)
			if m.CommRichCardName == nil {
				m.CommRichCardName = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X8Fc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D8FCCardNameElem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X8Fc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D8FCCardNameElem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D8FCCardNameElem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnumCardType", wireType)
			}
			m.EnumCardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnumCardType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X8Fc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D8FCLevelName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X8Fc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D8FCLevelName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D8FCLevelName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X8Fc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D8FCClientInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X8Fc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D8FCClientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D8FCClientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Implat", wireType)
			}
			m.Implat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Implat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngClientver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngClientver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X8Fc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D8FCCommCardNameBuf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X8Fc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D8FCCommCardNameBuf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D8FCCommCardNameBuf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RichCardName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RichCardName = append(m.RichCardName, &D8FCRichCardNameElem{})
			if err := m.RichCardName[len(m.RichCardName)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X8Fc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D8FCRichCardNameElem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X8Fc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D8FCRichCardNameElem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D8FCRichCardNameElem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctrl", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctrl = append(m.Ctrl[:0], dAtA[iNdEx:postIndex]...)
			if m.Ctrl == nil {
				m.Ctrl = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = append(m.Text[:0], dAtA[iNdEx:postIndex]...)
			if m.Text == nil {
				m.Text = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X8Fc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X8Fc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOidb0X8Fc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOidb0X8Fc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0X8Fc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOidb0X8Fc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOidb0X8Fc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOidb0X8Fc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOidb0X8Fc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOidb0X8Fc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOidb0X8Fc = fmt.Errorf("proto: unexpected end of group")
)
