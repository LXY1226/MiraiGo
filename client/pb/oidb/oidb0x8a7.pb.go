// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/pb/oidb/oidb0x8a7.proto

package oidb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type D8A7ReqBody struct {
	SubCmd                    uint32 `protobuf:"varint,1,opt,name=subCmd" json:"subCmd"`
	LimitIntervalTypeForUin   uint32 `protobuf:"varint,2,opt,name=limitIntervalTypeForUin" json:"limitIntervalTypeForUin"`
	LimitIntervalTypeForGroup uint32 `protobuf:"varint,3,opt,name=limitIntervalTypeForGroup" json:"limitIntervalTypeForGroup"`
	Uin                       uint64 `protobuf:"varint,4,opt,name=uin" json:"uin"`
	GroupCode                 uint64 `protobuf:"varint,5,opt,name=groupCode" json:"groupCode"`
}

func (m *D8A7ReqBody) Reset()         { *m = D8A7ReqBody{} }
func (m *D8A7ReqBody) String() string { return proto.CompactTextString(m) }
func (*D8A7ReqBody) ProtoMessage()    {}
func (*D8A7ReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ed7b9b956ffabc, []int{0}
}
func (m *D8A7ReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D8A7ReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D8A7ReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D8A7ReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D8A7ReqBody.Merge(m, src)
}
func (m *D8A7ReqBody) XXX_Size() int {
	return m.Size()
}
func (m *D8A7ReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_D8A7ReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_D8A7ReqBody proto.InternalMessageInfo

func (m *D8A7ReqBody) GetSubCmd() uint32 {
	if m != nil {
		return m.SubCmd
	}
	return 0
}

func (m *D8A7ReqBody) GetLimitIntervalTypeForUin() uint32 {
	if m != nil {
		return m.LimitIntervalTypeForUin
	}
	return 0
}

func (m *D8A7ReqBody) GetLimitIntervalTypeForGroup() uint32 {
	if m != nil {
		return m.LimitIntervalTypeForGroup
	}
	return 0
}

func (m *D8A7ReqBody) GetUin() uint64 {
	if m != nil {
		return m.Uin
	}
	return 0
}

func (m *D8A7ReqBody) GetGroupCode() uint64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

type D8A7RspBody struct {
	CanAtAll                 bool   `protobuf:"varint,1,opt,name=canAtAll" json:"canAtAll"`
	RemainAtAllCountForUin   uint32 `protobuf:"varint,2,opt,name=remainAtAllCountForUin" json:"remainAtAllCountForUin"`
	RemainAtAllCountForGroup uint32 `protobuf:"varint,3,opt,name=remainAtAllCountForGroup" json:"remainAtAllCountForGroup"`
	PromptMsg1               []byte `protobuf:"bytes,4,opt,name=promptMsg1" json:"promptMsg1"`
	PromptMsg2               []byte `protobuf:"bytes,5,opt,name=promptMsg2" json:"promptMsg2"`
}

func (m *D8A7RspBody) Reset()         { *m = D8A7RspBody{} }
func (m *D8A7RspBody) String() string { return proto.CompactTextString(m) }
func (*D8A7RspBody) ProtoMessage()    {}
func (*D8A7RspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ed7b9b956ffabc, []int{1}
}
func (m *D8A7RspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D8A7RspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D8A7RspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D8A7RspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D8A7RspBody.Merge(m, src)
}
func (m *D8A7RspBody) XXX_Size() int {
	return m.Size()
}
func (m *D8A7RspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_D8A7RspBody.DiscardUnknown(m)
}

var xxx_messageInfo_D8A7RspBody proto.InternalMessageInfo

func (m *D8A7RspBody) GetCanAtAll() bool {
	if m != nil {
		return m.CanAtAll
	}
	return false
}

func (m *D8A7RspBody) GetRemainAtAllCountForUin() uint32 {
	if m != nil {
		return m.RemainAtAllCountForUin
	}
	return 0
}

func (m *D8A7RspBody) GetRemainAtAllCountForGroup() uint32 {
	if m != nil {
		return m.RemainAtAllCountForGroup
	}
	return 0
}

func (m *D8A7RspBody) GetPromptMsg1() []byte {
	if m != nil {
		return m.PromptMsg1
	}
	return nil
}

func (m *D8A7RspBody) GetPromptMsg2() []byte {
	if m != nil {
		return m.PromptMsg2
	}
	return nil
}

func init() {
	proto.RegisterType((*D8A7ReqBody)(nil), "D8A7ReqBody")
	proto.RegisterType((*D8A7RspBody)(nil), "D8A7RspBody")
}

func init() { proto.RegisterFile("client/pb/oidb/oidb0x8a7.proto", fileDescriptor_78ed7b9b956ffabc) }

var fileDescriptor_78ed7b9b956ffabc = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0xd1, 0x2f, 0x48, 0xd2, 0xcf, 0xcf, 0x4c, 0x81, 0x10, 0x06, 0x15, 0x16, 0x89, 0xe6,
	0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x4a, 0xaf, 0x19, 0xb9, 0xb8, 0x5d, 0x2c, 0x1c, 0xcd, 0x83,
	0x52, 0x0b, 0x9d, 0xf2, 0x53, 0x2a, 0x85, 0x64, 0xb8, 0xd8, 0x8a, 0x4b, 0x93, 0x9c, 0x73, 0x53,
	0x24, 0x18, 0x15, 0x18, 0x35, 0x78, 0x9d, 0x58, 0x4e, 0xdc, 0x93, 0x67, 0x08, 0x82, 0x8a, 0x09,
	0xd9, 0x71, 0x89, 0xe7, 0x64, 0xe6, 0x66, 0x96, 0x78, 0xe6, 0x95, 0xa4, 0x16, 0x95, 0x25, 0xe6,
	0x84, 0x54, 0x16, 0xa4, 0xba, 0xe5, 0x17, 0x85, 0x66, 0xe6, 0x49, 0x30, 0x21, 0x29, 0xc7, 0xa5,
	0x48, 0xc8, 0x89, 0x4b, 0x12, 0x9b, 0x94, 0x7b, 0x51, 0x7e, 0x69, 0x81, 0x04, 0x33, 0x92, 0x09,
	0xb8, 0x95, 0x09, 0x89, 0x71, 0x31, 0x97, 0x66, 0xe6, 0x49, 0xb0, 0x28, 0x30, 0x6a, 0xb0, 0x40,
	0x55, 0x83, 0x04, 0x84, 0x94, 0xb8, 0x38, 0xd3, 0x41, 0x0a, 0x9c, 0xf3, 0x53, 0x52, 0x25, 0x58,
	0x91, 0x64, 0x11, 0xc2, 0x4a, 0xbf, 0x61, 0xbe, 0x2d, 0x2e, 0x00, 0xfb, 0x56, 0x81, 0x8b, 0x23,
	0x39, 0x31, 0xcf, 0xb1, 0xc4, 0x31, 0x27, 0x07, 0xec, 0x5f, 0x0e, 0xa8, 0x16, 0xb8, 0xa8, 0x90,
	0x0d, 0x97, 0x58, 0x51, 0x6a, 0x6e, 0x62, 0x26, 0x84, 0xeb, 0x9c, 0x5f, 0x9a, 0x57, 0x82, 0xc5,
	0xc3, 0x38, 0xd4, 0x08, 0x39, 0x70, 0x49, 0x60, 0x91, 0xc1, 0xf4, 0x2e, 0x4e, 0x55, 0x42, 0x2a,
	0x5c, 0x5c, 0x05, 0x45, 0xf9, 0xb9, 0x05, 0x25, 0xbe, 0xc5, 0xe9, 0x86, 0x60, 0x4f, 0xf3, 0x40,
	0xf5, 0x20, 0x89, 0xa3, 0xa8, 0x32, 0x02, 0x7b, 0x1e, 0x53, 0x95, 0x91, 0x93, 0xc2, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85,
	0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0xb1, 0xe9, 0x59, 0x83, 0x12, 0x06, 0x20, 0x00,
	0x00, 0xff, 0xff, 0x67, 0x37, 0xf9, 0x92, 0x2e, 0x02, 0x00, 0x00,
}

func (m *D8A7ReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D8A7ReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D8A7ReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOidb0X8A7(dAtA, i, uint64(m.GroupCode))
	i--
	dAtA[i] = 0x28
	i = encodeVarintOidb0X8A7(dAtA, i, uint64(m.Uin))
	i--
	dAtA[i] = 0x20
	i = encodeVarintOidb0X8A7(dAtA, i, uint64(m.LimitIntervalTypeForGroup))
	i--
	dAtA[i] = 0x18
	i = encodeVarintOidb0X8A7(dAtA, i, uint64(m.LimitIntervalTypeForUin))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOidb0X8A7(dAtA, i, uint64(m.SubCmd))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *D8A7RspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D8A7RspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D8A7RspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PromptMsg2 != nil {
		i -= len(m.PromptMsg2)
		copy(dAtA[i:], m.PromptMsg2)
		i = encodeVarintOidb0X8A7(dAtA, i, uint64(len(m.PromptMsg2)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PromptMsg1 != nil {
		i -= len(m.PromptMsg1)
		copy(dAtA[i:], m.PromptMsg1)
		i = encodeVarintOidb0X8A7(dAtA, i, uint64(len(m.PromptMsg1)))
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintOidb0X8A7(dAtA, i, uint64(m.RemainAtAllCountForGroup))
	i--
	dAtA[i] = 0x18
	i = encodeVarintOidb0X8A7(dAtA, i, uint64(m.RemainAtAllCountForUin))
	i--
	dAtA[i] = 0x10
	i--
	if m.CanAtAll {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintOidb0X8A7(dAtA []byte, offset int, v uint64) int {
	offset -= sovOidb0X8A7(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *D8A7ReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X8A7(uint64(m.SubCmd))
	n += 1 + sovOidb0X8A7(uint64(m.LimitIntervalTypeForUin))
	n += 1 + sovOidb0X8A7(uint64(m.LimitIntervalTypeForGroup))
	n += 1 + sovOidb0X8A7(uint64(m.Uin))
	n += 1 + sovOidb0X8A7(uint64(m.GroupCode))
	return n
}

func (m *D8A7RspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 1 + sovOidb0X8A7(uint64(m.RemainAtAllCountForUin))
	n += 1 + sovOidb0X8A7(uint64(m.RemainAtAllCountForGroup))
	if m.PromptMsg1 != nil {
		l = len(m.PromptMsg1)
		n += 1 + l + sovOidb0X8A7(uint64(l))
	}
	if m.PromptMsg2 != nil {
		l = len(m.PromptMsg2)
		n += 1 + l + sovOidb0X8A7(uint64(l))
	}
	return n
}

func sovOidb0X8A7(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOidb0X8A7(x uint64) (n int) {
	return sovOidb0X8A7(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *D8A7ReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X8A7
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D8A7ReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D8A7ReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubCmd", wireType)
			}
			m.SubCmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8A7
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubCmd |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitIntervalTypeForUin", wireType)
			}
			m.LimitIntervalTypeForUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8A7
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitIntervalTypeForUin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitIntervalTypeForGroup", wireType)
			}
			m.LimitIntervalTypeForGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8A7
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitIntervalTypeForGroup |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			m.Uin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8A7
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8A7
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X8A7(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X8A7
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X8A7
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D8A7RspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X8A7
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D8A7RspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D8A7RspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanAtAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8A7
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanAtAll = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainAtAllCountForUin", wireType)
			}
			m.RemainAtAllCountForUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8A7
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainAtAllCountForUin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainAtAllCountForGroup", wireType)
			}
			m.RemainAtAllCountForGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8A7
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainAtAllCountForGroup |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptMsg1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8A7
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8A7
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8A7
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromptMsg1 = append(m.PromptMsg1[:0], dAtA[iNdEx:postIndex]...)
			if m.PromptMsg1 == nil {
				m.PromptMsg1 = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptMsg2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X8A7
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X8A7
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X8A7
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromptMsg2 = append(m.PromptMsg2[:0], dAtA[iNdEx:postIndex]...)
			if m.PromptMsg2 == nil {
				m.PromptMsg2 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X8A7(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X8A7
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X8A7
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOidb0X8A7(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOidb0X8A7
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0X8A7
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0X8A7
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOidb0X8A7
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOidb0X8A7
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOidb0X8A7
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOidb0X8A7        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOidb0X8A7          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOidb0X8A7 = fmt.Errorf("proto: unexpected end of group")
)
