// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oidb0xdad.proto

package oidb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DADReqBody struct {
	Client    int64        `protobuf:"varint,1,opt,name=client,proto3" json:"client,omitempty"`
	ProductId uint64       `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Amount    int64        `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	ToUin     uint64       `protobuf:"varint,4,opt,name=to_uin,json=toUin,proto3" json:"to_uin,omitempty"`
	Gc        uint64       `protobuf:"varint,5,opt,name=gc,proto3" json:"gc,omitempty"`
	Ip        string       `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	Version   string       `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Sig       *DADLoginSig `protobuf:"bytes,8,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *DADReqBody) Reset()         { *m = DADReqBody{} }
func (m *DADReqBody) String() string { return proto.CompactTextString(m) }
func (*DADReqBody) ProtoMessage()    {}
func (*DADReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c0a571093b8c577, []int{0}
}
func (m *DADReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DADReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DADReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DADReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DADReqBody.Merge(m, src)
}
func (m *DADReqBody) XXX_Size() int {
	return m.Size()
}
func (m *DADReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_DADReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_DADReqBody proto.InternalMessageInfo

func (m *DADReqBody) GetClient() int64 {
	if m != nil {
		return m.Client
	}
	return 0
}

func (m *DADReqBody) GetProductId() uint64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *DADReqBody) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DADReqBody) GetToUin() uint64 {
	if m != nil {
		return m.ToUin
	}
	return 0
}

func (m *DADReqBody) GetGc() uint64 {
	if m != nil {
		return m.Gc
	}
	return 0
}

func (m *DADReqBody) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DADReqBody) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DADReqBody) GetSig() *DADLoginSig {
	if m != nil {
		return m.Sig
	}
	return nil
}

type DADLoginSig struct {
	Type  uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Sig   []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	Appid uint32 `protobuf:"varint,3,opt,name=appid,proto3" json:"appid,omitempty"`
}

func (m *DADLoginSig) Reset()         { *m = DADLoginSig{} }
func (m *DADLoginSig) String() string { return proto.CompactTextString(m) }
func (*DADLoginSig) ProtoMessage()    {}
func (*DADLoginSig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c0a571093b8c577, []int{1}
}
func (m *DADLoginSig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DADLoginSig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DADLoginSig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DADLoginSig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DADLoginSig.Merge(m, src)
}
func (m *DADLoginSig) XXX_Size() int {
	return m.Size()
}
func (m *DADLoginSig) XXX_DiscardUnknown() {
	xxx_messageInfo_DADLoginSig.DiscardUnknown(m)
}

var xxx_messageInfo_DADLoginSig proto.InternalMessageInfo

func (m *DADLoginSig) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *DADLoginSig) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *DADLoginSig) GetAppid() uint32 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func init() {
	proto.RegisterType((*DADReqBody)(nil), "DADReqBody")
	proto.RegisterType((*DADLoginSig)(nil), "DADLoginSig")
}

func init() { proto.RegisterFile("oidb0xdad.proto", fileDescriptor_3c0a571093b8c577) }

var fileDescriptor_3c0a571093b8c577 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x40, 0xeb, 0xfc, 0xf5, 0xeb, 0x6d, 0xfb, 0x81, 0x2c, 0x40, 0x5e, 0xb0, 0xa2, 0x4e, 0x99,
	0x22, 0x04, 0x23, 0x53, 0xab, 0x2c, 0x95, 0x98, 0x8c, 0x58, 0x58, 0xaa, 0x34, 0x8e, 0xa2, 0x2b,
	0x81, 0x6d, 0x52, 0x07, 0xd1, 0xb7, 0xe0, 0xb1, 0x18, 0x18, 0x3a, 0x32, 0xa2, 0xe4, 0x45, 0x50,
	0x9c, 0x22, 0xb1, 0xf9, 0x1c, 0xeb, 0x58, 0xbe, 0x17, 0x4e, 0x34, 0xca, 0xed, 0xd5, 0x9b, 0xcc,
	0x65, 0x6a, 0x6a, 0x6d, 0xf5, 0xe2, 0x93, 0x00, 0x64, 0xcb, 0x4c, 0x94, 0x2f, 0x2b, 0x2d, 0xf7,
	0xf4, 0x02, 0xa2, 0xe2, 0x09, 0x4b, 0x65, 0x19, 0x89, 0x49, 0xe2, 0x8b, 0x23, 0xd1, 0x4b, 0x00,
	0x53, 0x6b, 0xd9, 0x14, 0x76, 0x83, 0x92, 0x79, 0x31, 0x49, 0x02, 0x31, 0x39, 0x9a, 0xb5, 0xec,
	0xb3, 0xfc, 0x59, 0x37, 0xca, 0x32, 0x7f, 0xc8, 0x06, 0xa2, 0xe7, 0x10, 0x59, 0xbd, 0x69, 0x50,
	0xb1, 0xc0, 0x25, 0xa1, 0xd5, 0x0f, 0xa8, 0xe8, 0x7f, 0xf0, 0xaa, 0x82, 0x85, 0x4e, 0x79, 0x55,
	0xd1, 0x33, 0x1a, 0x16, 0xc5, 0x24, 0x99, 0x08, 0x0f, 0x0d, 0x65, 0x30, 0x7e, 0x2d, 0xeb, 0x1d,
	0x6a, 0xc5, 0xc6, 0x4e, 0xfe, 0x22, 0xe5, 0xe0, 0xef, 0xb0, 0x62, 0xff, 0x62, 0x92, 0x4c, 0xaf,
	0x67, 0x69, 0xb6, 0xcc, 0xee, 0x74, 0x85, 0xea, 0x1e, 0x2b, 0xd1, 0x5f, 0x2c, 0xd6, 0x30, 0xfd,
	0xe3, 0x28, 0x85, 0xc0, 0xee, 0x4d, 0xe9, 0x86, 0x99, 0x0b, 0x77, 0xa6, 0xa7, 0xc3, 0x13, 0xfd,
	0x0c, 0x33, 0x17, 0xd1, 0x33, 0x08, 0x73, 0x63, 0x50, 0xba, 0xcf, 0xcf, 0xc5, 0x00, 0xab, 0xf8,
	0xa3, 0xe5, 0xe4, 0xd0, 0x72, 0xf2, 0xdd, 0x72, 0xf2, 0xde, 0xf1, 0xd1, 0xa1, 0xe3, 0xa3, 0xaf,
	0x8e, 0x8f, 0x1e, 0xa3, 0xf4, 0xb6, 0x5f, 0xe3, 0x36, 0x72, 0x2b, 0xbc, 0xf9, 0x09, 0x00, 0x00,
	0xff, 0xff, 0xe1, 0xb0, 0x95, 0x0c, 0x55, 0x01, 0x00, 0x00,
}

func (m *DADReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DADReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DADReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sig != nil {
		{
			size, err := m.Sig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0Xdad(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintOidb0Xdad(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintOidb0Xdad(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x32
	}
	if m.Gc != 0 {
		i = encodeVarintOidb0Xdad(dAtA, i, uint64(m.Gc))
		i--
		dAtA[i] = 0x28
	}
	if m.ToUin != 0 {
		i = encodeVarintOidb0Xdad(dAtA, i, uint64(m.ToUin))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintOidb0Xdad(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.ProductId != 0 {
		i = encodeVarintOidb0Xdad(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x10
	}
	if m.Client != 0 {
		i = encodeVarintOidb0Xdad(dAtA, i, uint64(m.Client))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DADLoginSig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DADLoginSig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DADLoginSig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Appid != 0 {
		i = encodeVarintOidb0Xdad(dAtA, i, uint64(m.Appid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintOidb0Xdad(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintOidb0Xdad(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOidb0Xdad(dAtA []byte, offset int, v uint64) int {
	offset -= sovOidb0Xdad(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DADReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Client != 0 {
		n += 1 + sovOidb0Xdad(uint64(m.Client))
	}
	if m.ProductId != 0 {
		n += 1 + sovOidb0Xdad(uint64(m.ProductId))
	}
	if m.Amount != 0 {
		n += 1 + sovOidb0Xdad(uint64(m.Amount))
	}
	if m.ToUin != 0 {
		n += 1 + sovOidb0Xdad(uint64(m.ToUin))
	}
	if m.Gc != 0 {
		n += 1 + sovOidb0Xdad(uint64(m.Gc))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovOidb0Xdad(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovOidb0Xdad(uint64(l))
	}
	if m.Sig != nil {
		l = m.Sig.Size()
		n += 1 + l + sovOidb0Xdad(uint64(l))
	}
	return n
}

func (m *DADLoginSig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovOidb0Xdad(uint64(m.Type))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovOidb0Xdad(uint64(l))
	}
	if m.Appid != 0 {
		n += 1 + sovOidb0Xdad(uint64(m.Appid))
	}
	return n
}

func sovOidb0Xdad(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOidb0Xdad(x uint64) (n int) {
	return sovOidb0Xdad(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DADReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0Xdad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DADReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DADReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			m.Client = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0Xdad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Client |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0Xdad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0Xdad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUin", wireType)
			}
			m.ToUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0Xdad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToUin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gc", wireType)
			}
			m.Gc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0Xdad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gc |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0Xdad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0Xdad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0Xdad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0Xdad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0Xdad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0Xdad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0Xdad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0Xdad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0Xdad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sig == nil {
				m.Sig = &DADLoginSig{}
			}
			if err := m.Sig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0Xdad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0Xdad
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0Xdad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DADLoginSig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0Xdad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DADLoginSig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DADLoginSig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0Xdad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0Xdad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0Xdad
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0Xdad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appid", wireType)
			}
			m.Appid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0Xdad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Appid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0Xdad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0Xdad
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0Xdad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOidb0Xdad(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOidb0Xdad
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0Xdad
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0Xdad
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOidb0Xdad
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOidb0Xdad
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOidb0Xdad
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOidb0Xdad        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOidb0Xdad          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOidb0Xdad = fmt.Errorf("proto: unexpected end of group")
)
