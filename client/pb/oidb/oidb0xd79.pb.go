// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oidb0xD79.proto

package oidb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type D79ReqBody struct {
	Seq          uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Uin          uint64 `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	CompressFlag uint32 `protobuf:"varint,3,opt,name=compress_flag,json=compressFlag,proto3" json:"compress_flag,omitempty"`
	Content      []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	SenderUin    uint64 `protobuf:"varint,5,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`
	Qua          []byte `protobuf:"bytes,6,opt,name=qua,proto3" json:"qua,omitempty"`
	WordExt      []byte `protobuf:"bytes,7,opt,name=word_ext,json=wordExt,proto3" json:"word_ext,omitempty"`
}

func (m *D79ReqBody) Reset()         { *m = D79ReqBody{} }
func (m *D79ReqBody) String() string { return proto.CompactTextString(m) }
func (*D79ReqBody) ProtoMessage()    {}
func (*D79ReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_28e4e033557b79a7, []int{0}
}
func (m *D79ReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D79ReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D79ReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D79ReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D79ReqBody.Merge(m, src)
}
func (m *D79ReqBody) XXX_Size() int {
	return m.Size()
}
func (m *D79ReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_D79ReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_D79ReqBody proto.InternalMessageInfo

func (m *D79ReqBody) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *D79ReqBody) GetUin() uint64 {
	if m != nil {
		return m.Uin
	}
	return 0
}

func (m *D79ReqBody) GetCompressFlag() uint32 {
	if m != nil {
		return m.CompressFlag
	}
	return 0
}

func (m *D79ReqBody) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *D79ReqBody) GetSenderUin() uint64 {
	if m != nil {
		return m.SenderUin
	}
	return 0
}

func (m *D79ReqBody) GetQua() []byte {
	if m != nil {
		return m.Qua
	}
	return nil
}

func (m *D79ReqBody) GetWordExt() []byte {
	if m != nil {
		return m.WordExt
	}
	return nil
}

type D79RspBody struct {
	Ret          uint32      `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Seq          uint64      `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Uin          uint64      `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"`
	CompressFlag uint32      `protobuf:"varint,4,opt,name=compress_flag,json=compressFlag,proto3" json:"compress_flag,omitempty"`
	Content      *D79Content `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *D79RspBody) Reset()         { *m = D79RspBody{} }
func (m *D79RspBody) String() string { return proto.CompactTextString(m) }
func (*D79RspBody) ProtoMessage()    {}
func (*D79RspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_28e4e033557b79a7, []int{1}
}
func (m *D79RspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D79RspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D79RspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D79RspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D79RspBody.Merge(m, src)
}
func (m *D79RspBody) XXX_Size() int {
	return m.Size()
}
func (m *D79RspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_D79RspBody.DiscardUnknown(m)
}

var xxx_messageInfo_D79RspBody proto.InternalMessageInfo

func (m *D79RspBody) GetRet() uint32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *D79RspBody) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *D79RspBody) GetUin() uint64 {
	if m != nil {
		return m.Uin
	}
	return 0
}

func (m *D79RspBody) GetCompressFlag() uint32 {
	if m != nil {
		return m.CompressFlag
	}
	return 0
}

func (m *D79RspBody) GetContent() *D79Content {
	if m != nil {
		return m.Content
	}
	return nil
}

type D79Content struct {
	SliceContent [][]byte `protobuf:"bytes,1,rep,name=slice_content,json=sliceContent,proto3" json:"slice_content,omitempty"`
}

func (m *D79Content) Reset()         { *m = D79Content{} }
func (m *D79Content) String() string { return proto.CompactTextString(m) }
func (*D79Content) ProtoMessage()    {}
func (*D79Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_28e4e033557b79a7, []int{2}
}
func (m *D79Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D79Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D79Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D79Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D79Content.Merge(m, src)
}
func (m *D79Content) XXX_Size() int {
	return m.Size()
}
func (m *D79Content) XXX_DiscardUnknown() {
	xxx_messageInfo_D79Content.DiscardUnknown(m)
}

var xxx_messageInfo_D79Content proto.InternalMessageInfo

func (m *D79Content) GetSliceContent() [][]byte {
	if m != nil {
		return m.SliceContent
	}
	return nil
}

func init() {
	proto.RegisterType((*D79ReqBody)(nil), "D79ReqBody")
	proto.RegisterType((*D79RspBody)(nil), "D79RspBody")
	proto.RegisterType((*D79Content)(nil), "D79Content")
}

func init() { proto.RegisterFile("oidb0xD79.proto", fileDescriptor_28e4e033557b79a7) }

var fileDescriptor_28e4e033557b79a7 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0xcf, 0x4c, 0x49,
	0x32, 0xa8, 0x70, 0x31, 0xb7, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xda, 0xcd, 0xc8, 0xc5,
	0xe5, 0x62, 0x6e, 0x19, 0x94, 0x5a, 0xe8, 0x94, 0x9f, 0x52, 0x29, 0x24, 0xc0, 0xc5, 0x5c, 0x9c,
	0x5a, 0x28, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x12, 0x04, 0x62, 0x82, 0x44, 0x4a, 0x33, 0xf3, 0x24,
	0x98, 0x20, 0x22, 0xa5, 0x99, 0x79, 0x42, 0xca, 0x5c, 0xbc, 0xc9, 0xf9, 0xb9, 0x05, 0x45, 0xa9,
	0xc5, 0xc5, 0xf1, 0x69, 0x39, 0x89, 0xe9, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0xbc, 0x41, 0x3c, 0x30,
	0x41, 0xb7, 0x9c, 0xc4, 0x74, 0x21, 0x09, 0x2e, 0xf6, 0xe4, 0xfc, 0xbc, 0x92, 0xd4, 0xbc, 0x12,
	0x09, 0x16, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x18, 0x57, 0x48, 0x96, 0x8b, 0xab, 0x38, 0x35, 0x2f,
	0x25, 0xb5, 0x28, 0x1e, 0x64, 0x2e, 0x2b, 0xd8, 0x5c, 0x4e, 0x88, 0x48, 0x68, 0x66, 0x1e, 0xc8,
	0xbe, 0xc2, 0xd2, 0x44, 0x09, 0x36, 0xb0, 0x26, 0x10, 0x53, 0x48, 0x92, 0x8b, 0xa3, 0x3c, 0xbf,
	0x28, 0x25, 0x3e, 0xb5, 0xa2, 0x44, 0x82, 0x1d, 0x62, 0x16, 0x88, 0xef, 0x5a, 0x51, 0xa2, 0xd4,
	0x07, 0x75, 0x7d, 0x71, 0x01, 0xcc, 0xf5, 0x45, 0xa9, 0x25, 0x60, 0xd7, 0xf3, 0x06, 0x81, 0x98,
	0x30, 0xff, 0x30, 0x61, 0xf8, 0x87, 0x19, 0x8f, 0x7f, 0x58, 0xb0, 0xf8, 0x47, 0x15, 0xe1, 0x1f,
	0x90, 0x93, 0xb9, 0x8d, 0xb8, 0xf5, 0x5c, 0xcc, 0x2d, 0x9d, 0x21, 0x42, 0x70, 0xcf, 0x29, 0x19,
	0x82, 0xdd, 0x03, 0x15, 0x06, 0x99, 0x5c, 0x9c, 0x93, 0x99, 0x9c, 0x1a, 0x0f, 0xd3, 0xca, 0xa8,
	0xc0, 0xac, 0xc1, 0x13, 0xc4, 0x03, 0x16, 0x84, 0x2a, 0x72, 0x52, 0x38, 0xf1, 0x48, 0x8e, 0xf1,
	0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e,
	0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x36, 0x3d, 0x6b, 0x50, 0x74, 0x25, 0xb1, 0x81, 0xa3, 0xca,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x3d, 0xc3, 0x61, 0xbd, 0x01, 0x00, 0x00,
}

func (m *D79ReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D79ReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D79ReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WordExt) > 0 {
		i -= len(m.WordExt)
		copy(dAtA[i:], m.WordExt)
		i = encodeVarintOidb0XD79(dAtA, i, uint64(len(m.WordExt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Qua) > 0 {
		i -= len(m.Qua)
		copy(dAtA[i:], m.Qua)
		i = encodeVarintOidb0XD79(dAtA, i, uint64(len(m.Qua)))
		i--
		dAtA[i] = 0x32
	}
	if m.SenderUin != 0 {
		i = encodeVarintOidb0XD79(dAtA, i, uint64(m.SenderUin))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintOidb0XD79(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if m.CompressFlag != 0 {
		i = encodeVarintOidb0XD79(dAtA, i, uint64(m.CompressFlag))
		i--
		dAtA[i] = 0x18
	}
	if m.Uin != 0 {
		i = encodeVarintOidb0XD79(dAtA, i, uint64(m.Uin))
		i--
		dAtA[i] = 0x10
	}
	if m.Seq != 0 {
		i = encodeVarintOidb0XD79(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *D79RspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D79RspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D79RspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0XD79(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CompressFlag != 0 {
		i = encodeVarintOidb0XD79(dAtA, i, uint64(m.CompressFlag))
		i--
		dAtA[i] = 0x20
	}
	if m.Uin != 0 {
		i = encodeVarintOidb0XD79(dAtA, i, uint64(m.Uin))
		i--
		dAtA[i] = 0x18
	}
	if m.Seq != 0 {
		i = encodeVarintOidb0XD79(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x10
	}
	if m.Ret != 0 {
		i = encodeVarintOidb0XD79(dAtA, i, uint64(m.Ret))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *D79Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D79Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D79Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SliceContent) > 0 {
		for iNdEx := len(m.SliceContent) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SliceContent[iNdEx])
			copy(dAtA[i:], m.SliceContent[iNdEx])
			i = encodeVarintOidb0XD79(dAtA, i, uint64(len(m.SliceContent[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOidb0XD79(dAtA []byte, offset int, v uint64) int {
	offset -= sovOidb0XD79(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *D79ReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovOidb0XD79(uint64(m.Seq))
	}
	if m.Uin != 0 {
		n += 1 + sovOidb0XD79(uint64(m.Uin))
	}
	if m.CompressFlag != 0 {
		n += 1 + sovOidb0XD79(uint64(m.CompressFlag))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovOidb0XD79(uint64(l))
	}
	if m.SenderUin != 0 {
		n += 1 + sovOidb0XD79(uint64(m.SenderUin))
	}
	l = len(m.Qua)
	if l > 0 {
		n += 1 + l + sovOidb0XD79(uint64(l))
	}
	l = len(m.WordExt)
	if l > 0 {
		n += 1 + l + sovOidb0XD79(uint64(l))
	}
	return n
}

func (m *D79RspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovOidb0XD79(uint64(m.Ret))
	}
	if m.Seq != 0 {
		n += 1 + sovOidb0XD79(uint64(m.Seq))
	}
	if m.Uin != 0 {
		n += 1 + sovOidb0XD79(uint64(m.Uin))
	}
	if m.CompressFlag != 0 {
		n += 1 + sovOidb0XD79(uint64(m.CompressFlag))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovOidb0XD79(uint64(l))
	}
	return n
}

func (m *D79Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SliceContent) > 0 {
		for _, b := range m.SliceContent {
			l = len(b)
			n += 1 + l + sovOidb0XD79(uint64(l))
		}
	}
	return n
}

func sovOidb0XD79(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOidb0XD79(x uint64) (n int) {
	return sovOidb0XD79(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *D79ReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0XD79
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D79ReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D79ReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			m.Uin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressFlag", wireType)
			}
			m.CompressFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderUin", wireType)
			}
			m.SenderUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderUin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qua", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qua = append(m.Qua[:0], dAtA[iNdEx:postIndex]...)
			if m.Qua == nil {
				m.Qua = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordExt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WordExt = append(m.WordExt[:0], dAtA[iNdEx:postIndex]...)
			if m.WordExt == nil {
				m.WordExt = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0XD79(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D79RspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0XD79
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D79RspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D79RspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			m.Uin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressFlag", wireType)
			}
			m.CompressFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &D79Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0XD79(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D79Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0XD79
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D79Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D79Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceContent = append(m.SliceContent, make([]byte, postIndex-iNdEx))
			copy(m.SliceContent[len(m.SliceContent)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0XD79(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0XD79
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOidb0XD79(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOidb0XD79
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0XD79
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOidb0XD79
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOidb0XD79
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOidb0XD79
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOidb0XD79        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOidb0XD79          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOidb0XD79 = fmt.Errorf("proto: unexpected end of group")
)
