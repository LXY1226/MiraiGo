// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oidb0x6d6.proto

package oidb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeleteFileReqBody struct {
	GroupCode      int64  `protobuf:"varint,1,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	AppId          int32  `protobuf:"varint,2,opt,name=appId,proto3" json:"appId,omitempty"`
	BusId          int32  `protobuf:"varint,3,opt,name=busId,proto3" json:"busId,omitempty"`
	ParentFolderId string `protobuf:"bytes,4,opt,name=parentFolderId,proto3" json:"parentFolderId,omitempty"`
	FileId         string `protobuf:"bytes,5,opt,name=fileId,proto3" json:"fileId,omitempty"`
}

func (m *DeleteFileReqBody) Reset()         { *m = DeleteFileReqBody{} }
func (m *DeleteFileReqBody) String() string { return proto.CompactTextString(m) }
func (*DeleteFileReqBody) ProtoMessage()    {}
func (*DeleteFileReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{0}
}
func (m *DeleteFileReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFileReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteFileReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteFileReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFileReqBody.Merge(m, src)
}
func (m *DeleteFileReqBody) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFileReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFileReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFileReqBody proto.InternalMessageInfo

func (m *DeleteFileReqBody) GetGroupCode() int64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *DeleteFileReqBody) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *DeleteFileReqBody) GetBusId() int32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

func (m *DeleteFileReqBody) GetParentFolderId() string {
	if m != nil {
		return m.ParentFolderId
	}
	return ""
}

func (m *DeleteFileReqBody) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

type DeleteFileRspBody struct {
	RetCode       int32  `protobuf:"varint,1,opt,name=retCode,proto3" json:"retCode,omitempty"`
	RetMsg        string `protobuf:"bytes,2,opt,name=retMsg,proto3" json:"retMsg,omitempty"`
	ClientWording string `protobuf:"bytes,3,opt,name=clientWording,proto3" json:"clientWording,omitempty"`
}

func (m *DeleteFileRspBody) Reset()         { *m = DeleteFileRspBody{} }
func (m *DeleteFileRspBody) String() string { return proto.CompactTextString(m) }
func (*DeleteFileRspBody) ProtoMessage()    {}
func (*DeleteFileRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{1}
}
func (m *DeleteFileRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFileRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteFileRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteFileRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFileRspBody.Merge(m, src)
}
func (m *DeleteFileRspBody) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFileRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFileRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFileRspBody proto.InternalMessageInfo

func (m *DeleteFileRspBody) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *DeleteFileRspBody) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *DeleteFileRspBody) GetClientWording() string {
	if m != nil {
		return m.ClientWording
	}
	return ""
}

type DownloadFileReqBody struct {
	GroupCode        int64  `protobuf:"varint,1,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	AppId            int32  `protobuf:"varint,2,opt,name=appId,proto3" json:"appId,omitempty"`
	BusId            int32  `protobuf:"varint,3,opt,name=busId,proto3" json:"busId,omitempty"`
	FileId           string `protobuf:"bytes,4,opt,name=fileId,proto3" json:"fileId,omitempty"`
	BoolThumbnailReq bool   `protobuf:"varint,5,opt,name=boolThumbnailReq,proto3" json:"boolThumbnailReq,omitempty"`
	UrlType          int32  `protobuf:"varint,6,opt,name=urlType,proto3" json:"urlType,omitempty"`
	BoolPreviewReq   bool   `protobuf:"varint,7,opt,name=boolPreviewReq,proto3" json:"boolPreviewReq,omitempty"`
}

func (m *DownloadFileReqBody) Reset()         { *m = DownloadFileReqBody{} }
func (m *DownloadFileReqBody) String() string { return proto.CompactTextString(m) }
func (*DownloadFileReqBody) ProtoMessage()    {}
func (*DownloadFileReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{2}
}
func (m *DownloadFileReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadFileReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadFileReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadFileReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadFileReqBody.Merge(m, src)
}
func (m *DownloadFileReqBody) XXX_Size() int {
	return m.Size()
}
func (m *DownloadFileReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadFileReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadFileReqBody proto.InternalMessageInfo

func (m *DownloadFileReqBody) GetGroupCode() int64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *DownloadFileReqBody) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *DownloadFileReqBody) GetBusId() int32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

func (m *DownloadFileReqBody) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *DownloadFileReqBody) GetBoolThumbnailReq() bool {
	if m != nil {
		return m.BoolThumbnailReq
	}
	return false
}

func (m *DownloadFileReqBody) GetUrlType() int32 {
	if m != nil {
		return m.UrlType
	}
	return 0
}

func (m *DownloadFileReqBody) GetBoolPreviewReq() bool {
	if m != nil {
		return m.BoolPreviewReq
	}
	return false
}

type DownloadFileRspBody struct {
	RetCode       int32  `protobuf:"varint,1,opt,name=retCode,proto3" json:"retCode,omitempty"`
	RetMsg        string `protobuf:"bytes,2,opt,name=retMsg,proto3" json:"retMsg,omitempty"`
	ClientWording string `protobuf:"bytes,3,opt,name=clientWording,proto3" json:"clientWording,omitempty"`
	DownloadIp    string `protobuf:"bytes,4,opt,name=downloadIp,proto3" json:"downloadIp,omitempty"`
	DownloadDns   []byte `protobuf:"bytes,5,opt,name=downloadDns,proto3" json:"downloadDns,omitempty"`
	DownloadUrl   []byte `protobuf:"bytes,6,opt,name=downloadUrl,proto3" json:"downloadUrl,omitempty"`
	Sha           []byte `protobuf:"bytes,7,opt,name=sha,proto3" json:"sha,omitempty"`
	Sha3          []byte `protobuf:"bytes,8,opt,name=sha3,proto3" json:"sha3,omitempty"`
	Md5           []byte `protobuf:"bytes,9,opt,name=md5,proto3" json:"md5,omitempty"`
	CookieVal     []byte `protobuf:"bytes,10,opt,name=cookieVal,proto3" json:"cookieVal,omitempty"`
	SaveFileName  string `protobuf:"bytes,11,opt,name=saveFileName,proto3" json:"saveFileName,omitempty"`
	PreviewPort   int32  `protobuf:"varint,12,opt,name=previewPort,proto3" json:"previewPort,omitempty"`
}

func (m *DownloadFileRspBody) Reset()         { *m = DownloadFileRspBody{} }
func (m *DownloadFileRspBody) String() string { return proto.CompactTextString(m) }
func (*DownloadFileRspBody) ProtoMessage()    {}
func (*DownloadFileRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{3}
}
func (m *DownloadFileRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadFileRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadFileRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadFileRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadFileRspBody.Merge(m, src)
}
func (m *DownloadFileRspBody) XXX_Size() int {
	return m.Size()
}
func (m *DownloadFileRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadFileRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadFileRspBody proto.InternalMessageInfo

func (m *DownloadFileRspBody) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *DownloadFileRspBody) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *DownloadFileRspBody) GetClientWording() string {
	if m != nil {
		return m.ClientWording
	}
	return ""
}

func (m *DownloadFileRspBody) GetDownloadIp() string {
	if m != nil {
		return m.DownloadIp
	}
	return ""
}

func (m *DownloadFileRspBody) GetDownloadDns() []byte {
	if m != nil {
		return m.DownloadDns
	}
	return nil
}

func (m *DownloadFileRspBody) GetDownloadUrl() []byte {
	if m != nil {
		return m.DownloadUrl
	}
	return nil
}

func (m *DownloadFileRspBody) GetSha() []byte {
	if m != nil {
		return m.Sha
	}
	return nil
}

func (m *DownloadFileRspBody) GetSha3() []byte {
	if m != nil {
		return m.Sha3
	}
	return nil
}

func (m *DownloadFileRspBody) GetMd5() []byte {
	if m != nil {
		return m.Md5
	}
	return nil
}

func (m *DownloadFileRspBody) GetCookieVal() []byte {
	if m != nil {
		return m.CookieVal
	}
	return nil
}

func (m *DownloadFileRspBody) GetSaveFileName() string {
	if m != nil {
		return m.SaveFileName
	}
	return ""
}

func (m *DownloadFileRspBody) GetPreviewPort() int32 {
	if m != nil {
		return m.PreviewPort
	}
	return 0
}

type MoveFileReqBody struct {
	GroupCode      int64  `protobuf:"varint,1,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	AppId          int32  `protobuf:"varint,2,opt,name=appId,proto3" json:"appId,omitempty"`
	BusId          int32  `protobuf:"varint,3,opt,name=busId,proto3" json:"busId,omitempty"`
	FileId         string `protobuf:"bytes,4,opt,name=fileId,proto3" json:"fileId,omitempty"`
	ParentFolderId string `protobuf:"bytes,5,opt,name=parentFolderId,proto3" json:"parentFolderId,omitempty"`
	DestFolderId   string `protobuf:"bytes,6,opt,name=destFolderId,proto3" json:"destFolderId,omitempty"`
}

func (m *MoveFileReqBody) Reset()         { *m = MoveFileReqBody{} }
func (m *MoveFileReqBody) String() string { return proto.CompactTextString(m) }
func (*MoveFileReqBody) ProtoMessage()    {}
func (*MoveFileReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{4}
}
func (m *MoveFileReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoveFileReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoveFileReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoveFileReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveFileReqBody.Merge(m, src)
}
func (m *MoveFileReqBody) XXX_Size() int {
	return m.Size()
}
func (m *MoveFileReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveFileReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_MoveFileReqBody proto.InternalMessageInfo

func (m *MoveFileReqBody) GetGroupCode() int64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *MoveFileReqBody) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *MoveFileReqBody) GetBusId() int32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

func (m *MoveFileReqBody) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *MoveFileReqBody) GetParentFolderId() string {
	if m != nil {
		return m.ParentFolderId
	}
	return ""
}

func (m *MoveFileReqBody) GetDestFolderId() string {
	if m != nil {
		return m.DestFolderId
	}
	return ""
}

type MoveFileRspBody struct {
	RetCode        int32  `protobuf:"varint,1,opt,name=retCode,proto3" json:"retCode,omitempty"`
	RetMsg         string `protobuf:"bytes,2,opt,name=retMsg,proto3" json:"retMsg,omitempty"`
	ClientWording  string `protobuf:"bytes,3,opt,name=clientWording,proto3" json:"clientWording,omitempty"`
	ParentFolderId string `protobuf:"bytes,4,opt,name=parentFolderId,proto3" json:"parentFolderId,omitempty"`
}

func (m *MoveFileRspBody) Reset()         { *m = MoveFileRspBody{} }
func (m *MoveFileRspBody) String() string { return proto.CompactTextString(m) }
func (*MoveFileRspBody) ProtoMessage()    {}
func (*MoveFileRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{5}
}
func (m *MoveFileRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoveFileRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoveFileRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoveFileRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveFileRspBody.Merge(m, src)
}
func (m *MoveFileRspBody) XXX_Size() int {
	return m.Size()
}
func (m *MoveFileRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveFileRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_MoveFileRspBody proto.InternalMessageInfo

func (m *MoveFileRspBody) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *MoveFileRspBody) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *MoveFileRspBody) GetClientWording() string {
	if m != nil {
		return m.ClientWording
	}
	return ""
}

func (m *MoveFileRspBody) GetParentFolderId() string {
	if m != nil {
		return m.ParentFolderId
	}
	return ""
}

type RenameFileReqBody struct {
	GroupCode      int64  `protobuf:"varint,1,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	AppId          int32  `protobuf:"varint,2,opt,name=appId,proto3" json:"appId,omitempty"`
	BusId          int32  `protobuf:"varint,3,opt,name=busId,proto3" json:"busId,omitempty"`
	FileId         string `protobuf:"bytes,4,opt,name=fileId,proto3" json:"fileId,omitempty"`
	ParentFolderId string `protobuf:"bytes,5,opt,name=parentFolderId,proto3" json:"parentFolderId,omitempty"`
	NewFileName    string `protobuf:"bytes,6,opt,name=newFileName,proto3" json:"newFileName,omitempty"`
}

func (m *RenameFileReqBody) Reset()         { *m = RenameFileReqBody{} }
func (m *RenameFileReqBody) String() string { return proto.CompactTextString(m) }
func (*RenameFileReqBody) ProtoMessage()    {}
func (*RenameFileReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{6}
}
func (m *RenameFileReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenameFileReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenameFileReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenameFileReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenameFileReqBody.Merge(m, src)
}
func (m *RenameFileReqBody) XXX_Size() int {
	return m.Size()
}
func (m *RenameFileReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_RenameFileReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_RenameFileReqBody proto.InternalMessageInfo

func (m *RenameFileReqBody) GetGroupCode() int64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *RenameFileReqBody) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RenameFileReqBody) GetBusId() int32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

func (m *RenameFileReqBody) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *RenameFileReqBody) GetParentFolderId() string {
	if m != nil {
		return m.ParentFolderId
	}
	return ""
}

func (m *RenameFileReqBody) GetNewFileName() string {
	if m != nil {
		return m.NewFileName
	}
	return ""
}

type RenameFileRspBody struct {
	RetCode       int32  `protobuf:"varint,1,opt,name=retCode,proto3" json:"retCode,omitempty"`
	RetMsg        string `protobuf:"bytes,2,opt,name=retMsg,proto3" json:"retMsg,omitempty"`
	ClientWording string `protobuf:"bytes,3,opt,name=clientWording,proto3" json:"clientWording,omitempty"`
}

func (m *RenameFileRspBody) Reset()         { *m = RenameFileRspBody{} }
func (m *RenameFileRspBody) String() string { return proto.CompactTextString(m) }
func (*RenameFileRspBody) ProtoMessage()    {}
func (*RenameFileRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{7}
}
func (m *RenameFileRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenameFileRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenameFileRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenameFileRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenameFileRspBody.Merge(m, src)
}
func (m *RenameFileRspBody) XXX_Size() int {
	return m.Size()
}
func (m *RenameFileRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_RenameFileRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_RenameFileRspBody proto.InternalMessageInfo

func (m *RenameFileRspBody) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *RenameFileRspBody) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *RenameFileRspBody) GetClientWording() string {
	if m != nil {
		return m.ClientWording
	}
	return ""
}

type D6D6ReqBody struct {
	UploadFileReq   *UploadFileReqBody   `protobuf:"bytes,1,opt,name=uploadFileReq,proto3" json:"uploadFileReq,omitempty"`
	ResendFileReq   *ResendReqBody       `protobuf:"bytes,2,opt,name=resendFileReq,proto3" json:"resendFileReq,omitempty"`
	DownloadFileReq *DownloadFileReqBody `protobuf:"bytes,3,opt,name=downloadFileReq,proto3" json:"downloadFileReq,omitempty"`
	DeleteFileReq   *DeleteFileReqBody   `protobuf:"bytes,4,opt,name=deleteFileReq,proto3" json:"deleteFileReq,omitempty"`
	RenameFileReq   *RenameFileReqBody   `protobuf:"bytes,5,opt,name=renameFileReq,proto3" json:"renameFileReq,omitempty"`
	MoveFileReq     *MoveFileReqBody     `protobuf:"bytes,6,opt,name=moveFileReq,proto3" json:"moveFileReq,omitempty"`
}

func (m *D6D6ReqBody) Reset()         { *m = D6D6ReqBody{} }
func (m *D6D6ReqBody) String() string { return proto.CompactTextString(m) }
func (*D6D6ReqBody) ProtoMessage()    {}
func (*D6D6ReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{8}
}
func (m *D6D6ReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D6D6ReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D6D6ReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D6D6ReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D6D6ReqBody.Merge(m, src)
}
func (m *D6D6ReqBody) XXX_Size() int {
	return m.Size()
}
func (m *D6D6ReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_D6D6ReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_D6D6ReqBody proto.InternalMessageInfo

func (m *D6D6ReqBody) GetUploadFileReq() *UploadFileReqBody {
	if m != nil {
		return m.UploadFileReq
	}
	return nil
}

func (m *D6D6ReqBody) GetResendFileReq() *ResendReqBody {
	if m != nil {
		return m.ResendFileReq
	}
	return nil
}

func (m *D6D6ReqBody) GetDownloadFileReq() *DownloadFileReqBody {
	if m != nil {
		return m.DownloadFileReq
	}
	return nil
}

func (m *D6D6ReqBody) GetDeleteFileReq() *DeleteFileReqBody {
	if m != nil {
		return m.DeleteFileReq
	}
	return nil
}

func (m *D6D6ReqBody) GetRenameFileReq() *RenameFileReqBody {
	if m != nil {
		return m.RenameFileReq
	}
	return nil
}

func (m *D6D6ReqBody) GetMoveFileReq() *MoveFileReqBody {
	if m != nil {
		return m.MoveFileReq
	}
	return nil
}

type ResendReqBody struct {
	GroupCode int64  `protobuf:"varint,1,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	AppId     int32  `protobuf:"varint,2,opt,name=appId,proto3" json:"appId,omitempty"`
	BusId     int32  `protobuf:"varint,3,opt,name=busId,proto3" json:"busId,omitempty"`
	FileId    string `protobuf:"bytes,4,opt,name=fileId,proto3" json:"fileId,omitempty"`
	Sha       []byte `protobuf:"bytes,5,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (m *ResendReqBody) Reset()         { *m = ResendReqBody{} }
func (m *ResendReqBody) String() string { return proto.CompactTextString(m) }
func (*ResendReqBody) ProtoMessage()    {}
func (*ResendReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{9}
}
func (m *ResendReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResendReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResendReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResendReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResendReqBody.Merge(m, src)
}
func (m *ResendReqBody) XXX_Size() int {
	return m.Size()
}
func (m *ResendReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_ResendReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_ResendReqBody proto.InternalMessageInfo

func (m *ResendReqBody) GetGroupCode() int64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *ResendReqBody) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *ResendReqBody) GetBusId() int32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

func (m *ResendReqBody) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *ResendReqBody) GetSha() []byte {
	if m != nil {
		return m.Sha
	}
	return nil
}

type ResendRspBody struct {
	RetCode       int32  `protobuf:"varint,1,opt,name=retCode,proto3" json:"retCode,omitempty"`
	RetMsg        string `protobuf:"bytes,2,opt,name=retMsg,proto3" json:"retMsg,omitempty"`
	ClientWording string `protobuf:"bytes,3,opt,name=clientWording,proto3" json:"clientWording,omitempty"`
	UploadIp      string `protobuf:"bytes,4,opt,name=uploadIp,proto3" json:"uploadIp,omitempty"`
	FileKey       []byte `protobuf:"bytes,5,opt,name=fileKey,proto3" json:"fileKey,omitempty"`
	CheckKey      []byte `protobuf:"bytes,6,opt,name=checkKey,proto3" json:"checkKey,omitempty"`
}

func (m *ResendRspBody) Reset()         { *m = ResendRspBody{} }
func (m *ResendRspBody) String() string { return proto.CompactTextString(m) }
func (*ResendRspBody) ProtoMessage()    {}
func (*ResendRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{10}
}
func (m *ResendRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResendRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResendRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResendRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResendRspBody.Merge(m, src)
}
func (m *ResendRspBody) XXX_Size() int {
	return m.Size()
}
func (m *ResendRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_ResendRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_ResendRspBody proto.InternalMessageInfo

func (m *ResendRspBody) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *ResendRspBody) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *ResendRspBody) GetClientWording() string {
	if m != nil {
		return m.ClientWording
	}
	return ""
}

func (m *ResendRspBody) GetUploadIp() string {
	if m != nil {
		return m.UploadIp
	}
	return ""
}

func (m *ResendRspBody) GetFileKey() []byte {
	if m != nil {
		return m.FileKey
	}
	return nil
}

func (m *ResendRspBody) GetCheckKey() []byte {
	if m != nil {
		return m.CheckKey
	}
	return nil
}

type D6D6RspBody struct {
	UploadFileRsp   *UploadFileRspBody   `protobuf:"bytes,1,opt,name=uploadFileRsp,proto3" json:"uploadFileRsp,omitempty"`
	ResendFileRsp   *ResendRspBody       `protobuf:"bytes,2,opt,name=resendFileRsp,proto3" json:"resendFileRsp,omitempty"`
	DownloadFileRsp *DownloadFileRspBody `protobuf:"bytes,3,opt,name=downloadFileRsp,proto3" json:"downloadFileRsp,omitempty"`
	DeleteFileRsp   *DeleteFileRspBody   `protobuf:"bytes,4,opt,name=deleteFileRsp,proto3" json:"deleteFileRsp,omitempty"`
	RenameFileRsp   *RenameFileRspBody   `protobuf:"bytes,5,opt,name=renameFileRsp,proto3" json:"renameFileRsp,omitempty"`
	MoveFileRsp     *MoveFileRspBody     `protobuf:"bytes,6,opt,name=moveFileRsp,proto3" json:"moveFileRsp,omitempty"`
}

func (m *D6D6RspBody) Reset()         { *m = D6D6RspBody{} }
func (m *D6D6RspBody) String() string { return proto.CompactTextString(m) }
func (*D6D6RspBody) ProtoMessage()    {}
func (*D6D6RspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{11}
}
func (m *D6D6RspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D6D6RspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D6D6RspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D6D6RspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D6D6RspBody.Merge(m, src)
}
func (m *D6D6RspBody) XXX_Size() int {
	return m.Size()
}
func (m *D6D6RspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_D6D6RspBody.DiscardUnknown(m)
}

var xxx_messageInfo_D6D6RspBody proto.InternalMessageInfo

func (m *D6D6RspBody) GetUploadFileRsp() *UploadFileRspBody {
	if m != nil {
		return m.UploadFileRsp
	}
	return nil
}

func (m *D6D6RspBody) GetResendFileRsp() *ResendRspBody {
	if m != nil {
		return m.ResendFileRsp
	}
	return nil
}

func (m *D6D6RspBody) GetDownloadFileRsp() *DownloadFileRspBody {
	if m != nil {
		return m.DownloadFileRsp
	}
	return nil
}

func (m *D6D6RspBody) GetDeleteFileRsp() *DeleteFileRspBody {
	if m != nil {
		return m.DeleteFileRsp
	}
	return nil
}

func (m *D6D6RspBody) GetRenameFileRsp() *RenameFileRspBody {
	if m != nil {
		return m.RenameFileRsp
	}
	return nil
}

func (m *D6D6RspBody) GetMoveFileRsp() *MoveFileRspBody {
	if m != nil {
		return m.MoveFileRsp
	}
	return nil
}

type UploadFileReqBody struct {
	GroupCode      int64  `protobuf:"varint,1,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	AppId          int32  `protobuf:"varint,2,opt,name=appId,proto3" json:"appId,omitempty"`
	BusId          int32  `protobuf:"varint,3,opt,name=busId,proto3" json:"busId,omitempty"`
	Entrance       int32  `protobuf:"varint,4,opt,name=entrance,proto3" json:"entrance,omitempty"`
	ParentFolderId string `protobuf:"bytes,5,opt,name=parentFolderId,proto3" json:"parentFolderId,omitempty"`
	FileName       string `protobuf:"bytes,6,opt,name=fileName,proto3" json:"fileName,omitempty"`
	LocalPath      string `protobuf:"bytes,7,opt,name=localPath,proto3" json:"localPath,omitempty"`
	Int64FileSize  int64  `protobuf:"varint,8,opt,name=int64FileSize,proto3" json:"int64FileSize,omitempty"`
	Sha            []byte `protobuf:"bytes,9,opt,name=sha,proto3" json:"sha,omitempty"`
	Sha3           []byte `protobuf:"bytes,10,opt,name=sha3,proto3" json:"sha3,omitempty"`
	Md5            []byte `protobuf:"bytes,11,opt,name=md5,proto3" json:"md5,omitempty"`
}

func (m *UploadFileReqBody) Reset()         { *m = UploadFileReqBody{} }
func (m *UploadFileReqBody) String() string { return proto.CompactTextString(m) }
func (*UploadFileReqBody) ProtoMessage()    {}
func (*UploadFileReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{12}
}
func (m *UploadFileReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadFileReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadFileReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadFileReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileReqBody.Merge(m, src)
}
func (m *UploadFileReqBody) XXX_Size() int {
	return m.Size()
}
func (m *UploadFileReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileReqBody proto.InternalMessageInfo

func (m *UploadFileReqBody) GetGroupCode() int64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *UploadFileReqBody) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *UploadFileReqBody) GetBusId() int32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

func (m *UploadFileReqBody) GetEntrance() int32 {
	if m != nil {
		return m.Entrance
	}
	return 0
}

func (m *UploadFileReqBody) GetParentFolderId() string {
	if m != nil {
		return m.ParentFolderId
	}
	return ""
}

func (m *UploadFileReqBody) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *UploadFileReqBody) GetLocalPath() string {
	if m != nil {
		return m.LocalPath
	}
	return ""
}

func (m *UploadFileReqBody) GetInt64FileSize() int64 {
	if m != nil {
		return m.Int64FileSize
	}
	return 0
}

func (m *UploadFileReqBody) GetSha() []byte {
	if m != nil {
		return m.Sha
	}
	return nil
}

func (m *UploadFileReqBody) GetSha3() []byte {
	if m != nil {
		return m.Sha3
	}
	return nil
}

func (m *UploadFileReqBody) GetMd5() []byte {
	if m != nil {
		return m.Md5
	}
	return nil
}

type UploadFileRspBody struct {
	RetCode       int32  `protobuf:"varint,1,opt,name=retCode,proto3" json:"retCode,omitempty"`
	RetMsg        string `protobuf:"bytes,2,opt,name=retMsg,proto3" json:"retMsg,omitempty"`
	ClientWording string `protobuf:"bytes,3,opt,name=clientWording,proto3" json:"clientWording,omitempty"`
	UploadIp      string `protobuf:"bytes,4,opt,name=uploadIp,proto3" json:"uploadIp,omitempty"`
	ServerDns     string `protobuf:"bytes,5,opt,name=serverDns,proto3" json:"serverDns,omitempty"`
	BusId         int32  `protobuf:"varint,6,opt,name=busId,proto3" json:"busId,omitempty"`
	FileId        string `protobuf:"bytes,7,opt,name=fileId,proto3" json:"fileId,omitempty"`
	FileKey       []byte `protobuf:"bytes,8,opt,name=fileKey,proto3" json:"fileKey,omitempty"`
	CheckKey      []byte `protobuf:"bytes,9,opt,name=checkKey,proto3" json:"checkKey,omitempty"`
	BoolFileExist bool   `protobuf:"varint,10,opt,name=boolFileExist,proto3" json:"boolFileExist,omitempty"`
}

func (m *UploadFileRspBody) Reset()         { *m = UploadFileRspBody{} }
func (m *UploadFileRspBody) String() string { return proto.CompactTextString(m) }
func (*UploadFileRspBody) ProtoMessage()    {}
func (*UploadFileRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4717e175287d5ea, []int{13}
}
func (m *UploadFileRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadFileRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadFileRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadFileRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileRspBody.Merge(m, src)
}
func (m *UploadFileRspBody) XXX_Size() int {
	return m.Size()
}
func (m *UploadFileRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileRspBody proto.InternalMessageInfo

func (m *UploadFileRspBody) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *UploadFileRspBody) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *UploadFileRspBody) GetClientWording() string {
	if m != nil {
		return m.ClientWording
	}
	return ""
}

func (m *UploadFileRspBody) GetUploadIp() string {
	if m != nil {
		return m.UploadIp
	}
	return ""
}

func (m *UploadFileRspBody) GetServerDns() string {
	if m != nil {
		return m.ServerDns
	}
	return ""
}

func (m *UploadFileRspBody) GetBusId() int32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

func (m *UploadFileRspBody) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *UploadFileRspBody) GetFileKey() []byte {
	if m != nil {
		return m.FileKey
	}
	return nil
}

func (m *UploadFileRspBody) GetCheckKey() []byte {
	if m != nil {
		return m.CheckKey
	}
	return nil
}

func (m *UploadFileRspBody) GetBoolFileExist() bool {
	if m != nil {
		return m.BoolFileExist
	}
	return false
}

func init() {
	proto.RegisterType((*DeleteFileReqBody)(nil), "DeleteFileReqBody")
	proto.RegisterType((*DeleteFileRspBody)(nil), "DeleteFileRspBody")
	proto.RegisterType((*DownloadFileReqBody)(nil), "DownloadFileReqBody")
	proto.RegisterType((*DownloadFileRspBody)(nil), "DownloadFileRspBody")
	proto.RegisterType((*MoveFileReqBody)(nil), "MoveFileReqBody")
	proto.RegisterType((*MoveFileRspBody)(nil), "MoveFileRspBody")
	proto.RegisterType((*RenameFileReqBody)(nil), "RenameFileReqBody")
	proto.RegisterType((*RenameFileRspBody)(nil), "RenameFileRspBody")
	proto.RegisterType((*D6D6ReqBody)(nil), "D6D6ReqBody")
	proto.RegisterType((*ResendReqBody)(nil), "ResendReqBody")
	proto.RegisterType((*ResendRspBody)(nil), "ResendRspBody")
	proto.RegisterType((*D6D6RspBody)(nil), "D6D6RspBody")
	proto.RegisterType((*UploadFileReqBody)(nil), "UploadFileReqBody")
	proto.RegisterType((*UploadFileRspBody)(nil), "UploadFileRspBody")
}

func init() { proto.RegisterFile("oidb0x6d6.proto", fileDescriptor_d4717e175287d5ea) }

var fileDescriptor_d4717e175287d5ea = []byte{
	// 895 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x3a, 0xb1, 0xe3, 0x7d, 0x6b, 0x37, 0xc9, 0x50, 0xa1, 0x55, 0x54, 0x59, 0xd6, 0x0a,
	0xa1, 0x88, 0x83, 0x85, 0xdc, 0xd6, 0x42, 0x42, 0xe2, 0x50, 0x4c, 0x25, 0x0b, 0x15, 0x45, 0x43,
	0x03, 0x12, 0xb7, 0xb5, 0x67, 0x1a, 0xaf, 0xb2, 0xde, 0x99, 0xce, 0xac, 0x9d, 0x86, 0x2b, 0x5f,
	0x00, 0x3e, 0x00, 0x9f, 0x81, 0x73, 0x4f, 0x5c, 0x39, 0xf6, 0xc8, 0x11, 0x25, 0xe2, 0xc8, 0x77,
	0x40, 0x33, 0xfb, 0x6f, 0x66, 0xd7, 0x48, 0x3d, 0xe0, 0xc2, 0xcd, 0xef, 0xe7, 0xdf, 0xf3, 0xfe,
	0xde, 0x9b, 0xdf, 0x7b, 0x3b, 0x86, 0x23, 0x16, 0x91, 0xf9, 0xc7, 0xaf, 0x26, 0x64, 0x32, 0xe2,
	0x82, 0xa5, 0x2c, 0xf8, 0xd9, 0x81, 0x93, 0x29, 0x8d, 0x69, 0x4a, 0x9f, 0x46, 0x31, 0xc5, 0xf4,
	0xe5, 0x13, 0x46, 0x6e, 0xd0, 0x03, 0x70, 0x2f, 0x05, 0x5b, 0xf3, 0xcf, 0x19, 0xa1, 0xbe, 0x33,
	0x74, 0xce, 0xf6, 0x71, 0x05, 0xa0, 0xfb, 0xd0, 0x0e, 0x39, 0x9f, 0x11, 0xbf, 0x35, 0x74, 0xce,
	0xda, 0x38, 0x0b, 0x14, 0x3a, 0x5f, 0xcb, 0x19, 0xf1, 0xf7, 0x33, 0x54, 0x07, 0xe8, 0x43, 0xb8,
	0xc7, 0x43, 0x41, 0x93, 0xf4, 0x29, 0x8b, 0x09, 0x15, 0x33, 0xe2, 0x1f, 0x0c, 0x9d, 0x33, 0x17,
	0xd7, 0x50, 0xf4, 0x3e, 0x74, 0x5e, 0x44, 0x31, 0x9d, 0x11, 0xbf, 0xad, 0xbf, 0xcf, 0xa3, 0xe0,
	0xca, 0x92, 0x27, 0xb9, 0x96, 0xe7, 0xc3, 0xa1, 0xa0, 0x69, 0x29, 0xae, 0x8d, 0x8b, 0x50, 0xfd,
	0x8c, 0xa0, 0xe9, 0x33, 0x79, 0xa9, 0xb5, 0xb9, 0x38, 0x8f, 0xd0, 0x07, 0xd0, 0x5f, 0xc4, 0x11,
	0x4d, 0xd2, 0x6f, 0x99, 0x20, 0x51, 0x72, 0xa9, 0x45, 0xba, 0xd8, 0x06, 0x83, 0x3f, 0x1d, 0x78,
	0x6f, 0xca, 0xae, 0x93, 0x98, 0x85, 0x64, 0x37, 0xed, 0xa8, 0xca, 0x3c, 0x30, 0xcb, 0x44, 0x1f,
	0xc1, 0xf1, 0x9c, 0xb1, 0xf8, 0xf9, 0x72, 0xbd, 0x9a, 0x27, 0x61, 0x14, 0x63, 0xfa, 0x52, 0x37,
	0xa2, 0x8b, 0x1b, 0xb8, 0xaa, 0x7e, 0x2d, 0xe2, 0xe7, 0x37, 0x9c, 0xfa, 0x9d, 0xac, 0xfa, 0x3c,
	0x54, 0xcd, 0x56, 0xec, 0x73, 0x41, 0x37, 0x11, 0xbd, 0x56, 0xbf, 0x71, 0xa8, 0x7f, 0xa3, 0x86,
	0x06, 0x7f, 0xb5, 0x6a, 0x75, 0xee, 0xb6, 0xaf, 0x68, 0x00, 0x40, 0xf2, 0xc7, 0xcd, 0x78, 0x5e,
	0xb9, 0x81, 0xa0, 0x21, 0x78, 0x45, 0x34, 0x4d, 0xa4, 0x2e, 0xbc, 0x87, 0x4d, 0xc8, 0x64, 0x5c,
	0x88, 0x58, 0xd7, 0x6d, 0x30, 0x2e, 0x44, 0x8c, 0x8e, 0x61, 0x5f, 0x2e, 0x43, 0x5d, 0x70, 0x0f,
	0xab, 0x8f, 0x08, 0xc1, 0x81, 0x5c, 0x86, 0x0f, 0xfd, 0xae, 0x86, 0xf4, 0x67, 0xc5, 0x5a, 0x91,
	0xc7, 0xbe, 0x9b, 0xb1, 0x56, 0xe4, 0xb1, 0x3a, 0xdb, 0x05, 0x63, 0x57, 0x11, 0xfd, 0x26, 0x8c,
	0x7d, 0xd0, 0x78, 0x05, 0xa0, 0x00, 0x7a, 0x32, 0xdc, 0x68, 0xf3, 0x7d, 0x15, 0xae, 0xa8, 0xef,
	0x69, 0xed, 0x16, 0xa6, 0xb4, 0xf1, 0xac, 0xb7, 0xe7, 0x4c, 0xa4, 0x7e, 0x4f, 0x77, 0xce, 0x84,
	0x82, 0x5f, 0x1d, 0x38, 0x7a, 0xc6, 0x36, 0xf4, 0xdd, 0x7a, 0xaa, 0x39, 0x7a, 0xed, 0xad, 0xa3,
	0x17, 0x40, 0x8f, 0x50, 0x59, 0xb1, 0x3a, 0x59, 0x8d, 0x26, 0x16, 0xfc, 0x64, 0x56, 0xb0, 0x63,
	0xb7, 0xbc, 0xe5, 0xca, 0x50, 0x5d, 0x3d, 0xc1, 0x34, 0x09, 0x57, 0xff, 0xd3, 0xbe, 0x0e, 0xc1,
	0x4b, 0xe8, 0x75, 0x69, 0x9d, 0xac, 0xad, 0x26, 0xa4, 0x96, 0x9b, 0x51, 0xc0, 0xae, 0x97, 0x5b,
	0x0b, 0xbc, 0xe9, 0x64, 0x3a, 0x29, 0x1a, 0xf5, 0x09, 0xf4, 0xd7, 0xdc, 0xd8, 0x74, 0xfa, 0x69,
	0xde, 0x18, 0x8d, 0x2e, 0x78, 0x6d, 0xff, 0x61, 0x9b, 0x88, 0x1e, 0x41, 0x5f, 0x50, 0x49, 0x93,
	0x32, 0xb3, 0xa5, 0x33, 0xef, 0x8d, 0xb0, 0x46, 0xcb, 0x2c, 0x8b, 0x84, 0x3e, 0x83, 0x23, 0x62,
	0xef, 0x56, 0xad, 0xd3, 0x1b, 0xdf, 0x1f, 0x6d, 0xd9, 0xb9, 0xb8, 0x4e, 0x56, 0x7a, 0x89, 0xf9,
	0xa2, 0xd2, 0xa7, 0xa2, 0xf4, 0x36, 0x5e, 0x5f, 0xd8, 0x26, 0xaa, 0x4c, 0x61, 0xfa, 0x44, 0x9f,
	0x97, 0xca, 0x6c, 0xb8, 0x07, 0xdb, 0x44, 0x34, 0x06, 0x6f, 0x55, 0xcd, 0xad, 0x3e, 0x42, 0x6f,
	0x7c, 0x3c, 0xaa, 0xcd, 0x32, 0x36, 0x49, 0xc1, 0x0f, 0x0e, 0xf4, 0xad, 0x46, 0xbc, 0x03, 0x4b,
	0xe6, 0xcb, 0xaf, 0x5d, 0x2e, 0xbf, 0xe0, 0x75, 0xa5, 0x62, 0xc7, 0xe3, 0x7a, 0x0a, 0xdd, 0xcc,
	0x1e, 0xe5, 0x6a, 0x2f, 0x63, 0xf5, 0x4c, 0xa5, 0xf0, 0x4b, 0x7a, 0x93, 0x6b, 0x2b, 0x42, 0x95,
	0xb5, 0x58, 0xd2, 0xc5, 0x95, 0xfa, 0x2a, 0xdb, 0xe6, 0x65, 0x5c, 0x39, 0x35, 0x57, 0x6e, 0x3b,
	0x55, 0xf2, 0x6d, 0x4e, 0xcd, 0xa8, 0xd8, 0x26, 0xd6, 0x9c, 0x2a, 0x79, 0xdd, 0xa9, 0x45, 0x96,
	0x45, 0x6a, 0x38, 0x55, 0xf2, 0xed, 0x4e, 0xcd, 0xb3, 0xeb, 0xe4, 0x9a, 0x53, 0x25, 0xdf, 0xe6,
	0xd4, 0xe2, 0xc9, 0x16, 0xb1, 0xe6, 0x54, 0xc9, 0xb7, 0x39, 0xb5, 0xd2, 0x6c, 0x40, 0x96, 0x53,
	0x25, 0x6f, 0x3a, 0x35, 0xcf, 0x32, 0x49, 0xc1, 0xeb, 0x16, 0x9c, 0x34, 0x86, 0xfd, 0x5f, 0x74,
	0xeb, 0x29, 0x74, 0x69, 0x92, 0x8a, 0x30, 0x59, 0x50, 0xdd, 0x82, 0x36, 0x2e, 0xe3, 0xb7, 0x5e,
	0xa2, 0xa7, 0xd0, 0x7d, 0x61, 0x6f, 0xd0, 0x32, 0x56, 0x4a, 0x63, 0xb6, 0x08, 0xe3, 0xf3, 0x30,
	0x5d, 0xea, 0x17, 0xbf, 0x8b, 0x2b, 0x40, 0xb9, 0x37, 0x4a, 0xd2, 0xc9, 0x23, 0x55, 0xdb, 0xd7,
	0xd1, 0xf7, 0x54, 0xdf, 0x03, 0xf6, 0xb1, 0x0d, 0x16, 0x93, 0xe3, 0x36, 0xaf, 0x0d, 0xd0, 0xbc,
	0x36, 0x78, 0xe5, 0xb5, 0x21, 0xf8, 0xc5, 0xee, 0xdd, 0x7f, 0x38, 0x63, 0x0f, 0xc0, 0x95, 0x54,
	0x6c, 0xa8, 0x28, 0xae, 0x4e, 0x2e, 0xae, 0x80, 0xea, 0x64, 0x3a, 0xdb, 0xf7, 0xc8, 0xa1, 0xb5,
	0x47, 0x8c, 0x79, 0xed, 0xfe, 0xf3, 0xbc, 0xba, 0xf6, 0xbc, 0xaa, 0x1a, 0xd4, 0x05, 0x53, 0x35,
	0xe2, 0x8b, 0x57, 0x91, 0x4c, 0x75, 0xeb, 0xba, 0xd8, 0x06, 0x9f, 0x0c, 0x7f, 0xbb, 0x1d, 0x38,
	0x6f, 0x6e, 0x07, 0xce, 0x1f, 0xb7, 0x03, 0xe7, 0xc7, 0xbb, 0xc1, 0xde, 0x9b, 0xbb, 0xc1, 0xde,
	0xef, 0x77, 0x83, 0xbd, 0xef, 0x3a, 0xa3, 0x4f, 0xd5, 0xdf, 0x92, 0x79, 0x47, 0xff, 0x25, 0x79,
	0xf8, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x03, 0x05, 0x13, 0xa5, 0x0c, 0x00, 0x00,
}

func (m *DeleteFileReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFileReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteFileReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ParentFolderId) > 0 {
		i -= len(m.ParentFolderId)
		copy(dAtA[i:], m.ParentFolderId)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.ParentFolderId)))
		i--
		dAtA[i] = 0x22
	}
	if m.BusId != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.BusId))
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupCode != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.GroupCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteFileRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFileRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteFileRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientWording) > 0 {
		i -= len(m.ClientWording)
		copy(dAtA[i:], m.ClientWording)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.ClientWording)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RetMsg) > 0 {
		i -= len(m.RetMsg)
		copy(dAtA[i:], m.RetMsg)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.RetMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownloadFileReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadFileReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadFileReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BoolPreviewReq {
		i--
		if m.BoolPreviewReq {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.UrlType != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.UrlType))
		i--
		dAtA[i] = 0x30
	}
	if m.BoolThumbnailReq {
		i--
		if m.BoolThumbnailReq {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0x22
	}
	if m.BusId != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.BusId))
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupCode != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.GroupCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownloadFileRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadFileRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadFileRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PreviewPort != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.PreviewPort))
		i--
		dAtA[i] = 0x60
	}
	if len(m.SaveFileName) > 0 {
		i -= len(m.SaveFileName)
		copy(dAtA[i:], m.SaveFileName)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.SaveFileName)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CookieVal) > 0 {
		i -= len(m.CookieVal)
		copy(dAtA[i:], m.CookieVal)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.CookieVal)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Sha3) > 0 {
		i -= len(m.Sha3)
		copy(dAtA[i:], m.Sha3)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.Sha3)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Sha) > 0 {
		i -= len(m.Sha)
		copy(dAtA[i:], m.Sha)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.Sha)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DownloadUrl) > 0 {
		i -= len(m.DownloadUrl)
		copy(dAtA[i:], m.DownloadUrl)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.DownloadUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DownloadDns) > 0 {
		i -= len(m.DownloadDns)
		copy(dAtA[i:], m.DownloadDns)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.DownloadDns)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DownloadIp) > 0 {
		i -= len(m.DownloadIp)
		copy(dAtA[i:], m.DownloadIp)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.DownloadIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClientWording) > 0 {
		i -= len(m.ClientWording)
		copy(dAtA[i:], m.ClientWording)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.ClientWording)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RetMsg) > 0 {
		i -= len(m.RetMsg)
		copy(dAtA[i:], m.RetMsg)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.RetMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MoveFileReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveFileReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoveFileReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestFolderId) > 0 {
		i -= len(m.DestFolderId)
		copy(dAtA[i:], m.DestFolderId)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.DestFolderId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ParentFolderId) > 0 {
		i -= len(m.ParentFolderId)
		copy(dAtA[i:], m.ParentFolderId)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.ParentFolderId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0x22
	}
	if m.BusId != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.BusId))
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupCode != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.GroupCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MoveFileRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveFileRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoveFileRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParentFolderId) > 0 {
		i -= len(m.ParentFolderId)
		copy(dAtA[i:], m.ParentFolderId)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.ParentFolderId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClientWording) > 0 {
		i -= len(m.ClientWording)
		copy(dAtA[i:], m.ClientWording)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.ClientWording)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RetMsg) > 0 {
		i -= len(m.RetMsg)
		copy(dAtA[i:], m.RetMsg)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.RetMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RenameFileReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenameFileReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenameFileReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewFileName) > 0 {
		i -= len(m.NewFileName)
		copy(dAtA[i:], m.NewFileName)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.NewFileName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ParentFolderId) > 0 {
		i -= len(m.ParentFolderId)
		copy(dAtA[i:], m.ParentFolderId)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.ParentFolderId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0x22
	}
	if m.BusId != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.BusId))
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupCode != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.GroupCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RenameFileRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenameFileRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenameFileRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientWording) > 0 {
		i -= len(m.ClientWording)
		copy(dAtA[i:], m.ClientWording)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.ClientWording)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RetMsg) > 0 {
		i -= len(m.RetMsg)
		copy(dAtA[i:], m.RetMsg)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.RetMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *D6D6ReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D6D6ReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D6D6ReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MoveFileReq != nil {
		{
			size, err := m.MoveFileReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D6(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.RenameFileReq != nil {
		{
			size, err := m.RenameFileReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D6(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DeleteFileReq != nil {
		{
			size, err := m.DeleteFileReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D6(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DownloadFileReq != nil {
		{
			size, err := m.DownloadFileReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D6(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ResendFileReq != nil {
		{
			size, err := m.ResendFileReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D6(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.UploadFileReq != nil {
		{
			size, err := m.UploadFileReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D6(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResendReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResendReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResendReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sha) > 0 {
		i -= len(m.Sha)
		copy(dAtA[i:], m.Sha)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.Sha)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0x22
	}
	if m.BusId != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.BusId))
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupCode != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.GroupCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResendRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResendRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResendRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CheckKey) > 0 {
		i -= len(m.CheckKey)
		copy(dAtA[i:], m.CheckKey)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.CheckKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FileKey) > 0 {
		i -= len(m.FileKey)
		copy(dAtA[i:], m.FileKey)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.FileKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UploadIp) > 0 {
		i -= len(m.UploadIp)
		copy(dAtA[i:], m.UploadIp)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.UploadIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClientWording) > 0 {
		i -= len(m.ClientWording)
		copy(dAtA[i:], m.ClientWording)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.ClientWording)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RetMsg) > 0 {
		i -= len(m.RetMsg)
		copy(dAtA[i:], m.RetMsg)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.RetMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *D6D6RspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D6D6RspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D6D6RspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MoveFileRsp != nil {
		{
			size, err := m.MoveFileRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D6(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.RenameFileRsp != nil {
		{
			size, err := m.RenameFileRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D6(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DeleteFileRsp != nil {
		{
			size, err := m.DeleteFileRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D6(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DownloadFileRsp != nil {
		{
			size, err := m.DownloadFileRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D6(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ResendFileRsp != nil {
		{
			size, err := m.ResendFileRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D6(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.UploadFileRsp != nil {
		{
			size, err := m.UploadFileRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D6(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadFileReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadFileReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadFileReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Sha3) > 0 {
		i -= len(m.Sha3)
		copy(dAtA[i:], m.Sha3)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.Sha3)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Sha) > 0 {
		i -= len(m.Sha)
		copy(dAtA[i:], m.Sha)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.Sha)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Int64FileSize != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.Int64FileSize))
		i--
		dAtA[i] = 0x40
	}
	if len(m.LocalPath) > 0 {
		i -= len(m.LocalPath)
		copy(dAtA[i:], m.LocalPath)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.LocalPath)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ParentFolderId) > 0 {
		i -= len(m.ParentFolderId)
		copy(dAtA[i:], m.ParentFolderId)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.ParentFolderId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Entrance != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.Entrance))
		i--
		dAtA[i] = 0x20
	}
	if m.BusId != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.BusId))
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupCode != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.GroupCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UploadFileRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadFileRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadFileRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BoolFileExist {
		i--
		if m.BoolFileExist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.CheckKey) > 0 {
		i -= len(m.CheckKey)
		copy(dAtA[i:], m.CheckKey)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.CheckKey)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FileKey) > 0 {
		i -= len(m.FileKey)
		copy(dAtA[i:], m.FileKey)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.FileKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.BusId != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.BusId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ServerDns) > 0 {
		i -= len(m.ServerDns)
		copy(dAtA[i:], m.ServerDns)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.ServerDns)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UploadIp) > 0 {
		i -= len(m.UploadIp)
		copy(dAtA[i:], m.UploadIp)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.UploadIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClientWording) > 0 {
		i -= len(m.ClientWording)
		copy(dAtA[i:], m.ClientWording)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.ClientWording)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RetMsg) > 0 {
		i -= len(m.RetMsg)
		copy(dAtA[i:], m.RetMsg)
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(len(m.RetMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != 0 {
		i = encodeVarintOidb0X6D6(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOidb0X6D6(dAtA []byte, offset int, v uint64) int {
	offset -= sovOidb0X6D6(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeleteFileReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupCode != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.GroupCode))
	}
	if m.AppId != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.AppId))
	}
	if m.BusId != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.BusId))
	}
	l = len(m.ParentFolderId)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	return n
}

func (m *DeleteFileRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.RetCode))
	}
	l = len(m.RetMsg)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.ClientWording)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	return n
}

func (m *DownloadFileReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupCode != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.GroupCode))
	}
	if m.AppId != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.AppId))
	}
	if m.BusId != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.BusId))
	}
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.BoolThumbnailReq {
		n += 2
	}
	if m.UrlType != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.UrlType))
	}
	if m.BoolPreviewReq {
		n += 2
	}
	return n
}

func (m *DownloadFileRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.RetCode))
	}
	l = len(m.RetMsg)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.ClientWording)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.DownloadIp)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.DownloadDns)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.DownloadUrl)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.Sha)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.Sha3)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.CookieVal)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.SaveFileName)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.PreviewPort != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.PreviewPort))
	}
	return n
}

func (m *MoveFileReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupCode != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.GroupCode))
	}
	if m.AppId != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.AppId))
	}
	if m.BusId != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.BusId))
	}
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.ParentFolderId)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.DestFolderId)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	return n
}

func (m *MoveFileRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.RetCode))
	}
	l = len(m.RetMsg)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.ClientWording)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.ParentFolderId)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	return n
}

func (m *RenameFileReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupCode != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.GroupCode))
	}
	if m.AppId != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.AppId))
	}
	if m.BusId != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.BusId))
	}
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.ParentFolderId)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.NewFileName)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	return n
}

func (m *RenameFileRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.RetCode))
	}
	l = len(m.RetMsg)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.ClientWording)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	return n
}

func (m *D6D6ReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UploadFileReq != nil {
		l = m.UploadFileReq.Size()
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.ResendFileReq != nil {
		l = m.ResendFileReq.Size()
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.DownloadFileReq != nil {
		l = m.DownloadFileReq.Size()
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.DeleteFileReq != nil {
		l = m.DeleteFileReq.Size()
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.RenameFileReq != nil {
		l = m.RenameFileReq.Size()
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.MoveFileReq != nil {
		l = m.MoveFileReq.Size()
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	return n
}

func (m *ResendReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupCode != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.GroupCode))
	}
	if m.AppId != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.AppId))
	}
	if m.BusId != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.BusId))
	}
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.Sha)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	return n
}

func (m *ResendRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.RetCode))
	}
	l = len(m.RetMsg)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.ClientWording)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.UploadIp)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.FileKey)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.CheckKey)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	return n
}

func (m *D6D6RspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UploadFileRsp != nil {
		l = m.UploadFileRsp.Size()
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.ResendFileRsp != nil {
		l = m.ResendFileRsp.Size()
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.DownloadFileRsp != nil {
		l = m.DownloadFileRsp.Size()
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.DeleteFileRsp != nil {
		l = m.DeleteFileRsp.Size()
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.RenameFileRsp != nil {
		l = m.RenameFileRsp.Size()
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.MoveFileRsp != nil {
		l = m.MoveFileRsp.Size()
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	return n
}

func (m *UploadFileReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupCode != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.GroupCode))
	}
	if m.AppId != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.AppId))
	}
	if m.BusId != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.BusId))
	}
	if m.Entrance != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.Entrance))
	}
	l = len(m.ParentFolderId)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.LocalPath)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.Int64FileSize != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.Int64FileSize))
	}
	l = len(m.Sha)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.Sha3)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	return n
}

func (m *UploadFileRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.RetCode))
	}
	l = len(m.RetMsg)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.ClientWording)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.UploadIp)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.ServerDns)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.BusId != 0 {
		n += 1 + sovOidb0X6D6(uint64(m.BusId))
	}
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.FileKey)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	l = len(m.CheckKey)
	if l > 0 {
		n += 1 + l + sovOidb0X6D6(uint64(l))
	}
	if m.BoolFileExist {
		n += 2
	}
	return n
}

func sovOidb0X6D6(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOidb0X6D6(x uint64) (n int) {
	return sovOidb0X6D6(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeleteFileReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFileReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFileReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusId", wireType)
			}
			m.BusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentFolderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentFolderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFileRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFileRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFileRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientWording", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientWording = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadFileReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadFileReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadFileReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusId", wireType)
			}
			m.BusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolThumbnailReq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolThumbnailReq = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlType", wireType)
			}
			m.UrlType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UrlType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolPreviewReq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolPreviewReq = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadFileRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadFileRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadFileRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientWording", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientWording = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadDns", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadDns = append(m.DownloadDns[:0], dAtA[iNdEx:postIndex]...)
			if m.DownloadDns == nil {
				m.DownloadDns = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadUrl", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadUrl = append(m.DownloadUrl[:0], dAtA[iNdEx:postIndex]...)
			if m.DownloadUrl == nil {
				m.DownloadUrl = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha = append(m.Sha[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha == nil {
				m.Sha = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha3 = append(m.Sha3[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha3 == nil {
				m.Sha3 = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = append(m.Md5[:0], dAtA[iNdEx:postIndex]...)
			if m.Md5 == nil {
				m.Md5 = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookieVal = append(m.CookieVal[:0], dAtA[iNdEx:postIndex]...)
			if m.CookieVal == nil {
				m.CookieVal = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaveFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewPort", wireType)
			}
			m.PreviewPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviewPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveFileReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveFileReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveFileReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusId", wireType)
			}
			m.BusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentFolderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentFolderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestFolderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestFolderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveFileRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveFileRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveFileRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientWording", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientWording = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentFolderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentFolderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenameFileReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenameFileReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenameFileReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusId", wireType)
			}
			m.BusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentFolderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentFolderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenameFileRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenameFileRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenameFileRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientWording", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientWording = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D6D6ReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D6D6ReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D6D6ReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadFileReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UploadFileReq == nil {
				m.UploadFileReq = &UploadFileReqBody{}
			}
			if err := m.UploadFileReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResendFileReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResendFileReq == nil {
				m.ResendFileReq = &ResendReqBody{}
			}
			if err := m.ResendFileReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadFileReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownloadFileReq == nil {
				m.DownloadFileReq = &DownloadFileReqBody{}
			}
			if err := m.DownloadFileReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteFileReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeleteFileReq == nil {
				m.DeleteFileReq = &DeleteFileReqBody{}
			}
			if err := m.DeleteFileReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenameFileReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RenameFileReq == nil {
				m.RenameFileReq = &RenameFileReqBody{}
			}
			if err := m.RenameFileReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveFileReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoveFileReq == nil {
				m.MoveFileReq = &MoveFileReqBody{}
			}
			if err := m.MoveFileReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResendReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResendReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResendReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusId", wireType)
			}
			m.BusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha = append(m.Sha[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha == nil {
				m.Sha = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResendRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResendRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResendRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientWording", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientWording = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UploadIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileKey = append(m.FileKey[:0], dAtA[iNdEx:postIndex]...)
			if m.FileKey == nil {
				m.FileKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckKey = append(m.CheckKey[:0], dAtA[iNdEx:postIndex]...)
			if m.CheckKey == nil {
				m.CheckKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D6D6RspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D6D6RspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D6D6RspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadFileRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UploadFileRsp == nil {
				m.UploadFileRsp = &UploadFileRspBody{}
			}
			if err := m.UploadFileRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResendFileRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResendFileRsp == nil {
				m.ResendFileRsp = &ResendRspBody{}
			}
			if err := m.ResendFileRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadFileRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownloadFileRsp == nil {
				m.DownloadFileRsp = &DownloadFileRspBody{}
			}
			if err := m.DownloadFileRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteFileRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeleteFileRsp == nil {
				m.DeleteFileRsp = &DeleteFileRspBody{}
			}
			if err := m.DeleteFileRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenameFileRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RenameFileRsp == nil {
				m.RenameFileRsp = &RenameFileRspBody{}
			}
			if err := m.RenameFileRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveFileRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoveFileRsp == nil {
				m.MoveFileRsp = &MoveFileRspBody{}
			}
			if err := m.MoveFileRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadFileReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadFileReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadFileReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusId", wireType)
			}
			m.BusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entrance", wireType)
			}
			m.Entrance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entrance |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentFolderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentFolderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64FileSize", wireType)
			}
			m.Int64FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64FileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha = append(m.Sha[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha == nil {
				m.Sha = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha3 = append(m.Sha3[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha3 == nil {
				m.Sha3 = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = append(m.Md5[:0], dAtA[iNdEx:postIndex]...)
			if m.Md5 == nil {
				m.Md5 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadFileRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadFileRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadFileRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientWording", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientWording = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UploadIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerDns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerDns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusId", wireType)
			}
			m.BusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileKey = append(m.FileKey[:0], dAtA[iNdEx:postIndex]...)
			if m.FileKey == nil {
				m.FileKey = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckKey = append(m.CheckKey[:0], dAtA[iNdEx:postIndex]...)
			if m.CheckKey == nil {
				m.CheckKey = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolFileExist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BoolFileExist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D6(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D6
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOidb0X6D6(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOidb0X6D6
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0X6D6
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOidb0X6D6
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOidb0X6D6
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOidb0X6D6
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOidb0X6D6        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOidb0X6D6          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOidb0X6D6 = fmt.Errorf("proto: unexpected end of group")
)
