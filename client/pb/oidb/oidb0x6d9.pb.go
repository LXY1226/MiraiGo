// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/pb/oidb/oidb0x6d9.proto

package oidb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CopyFromReqBody struct {
	GroupCode       uint64 `protobuf:"varint,1,opt,name=groupCode" json:"groupCode"`
	AppId           uint32 `protobuf:"varint,2,opt,name=appId" json:"appId"`
	SrcBusId        uint32 `protobuf:"varint,3,opt,name=srcBusId" json:"srcBusId"`
	SrcParentFolder []byte `protobuf:"bytes,4,opt,name=srcParentFolder" json:"srcParentFolder"`
	SrcFilePath     []byte `protobuf:"bytes,5,opt,name=srcFilePath" json:"srcFilePath"`
	DstBusId        uint32 `protobuf:"varint,6,opt,name=dstBusId" json:"dstBusId"`
	DstFolderId     []byte `protobuf:"bytes,7,opt,name=dstFolderId" json:"dstFolderId"`
	FileSize        uint64 `protobuf:"varint,8,opt,name=fileSize" json:"fileSize"`
	LocalPath       string `protobuf:"bytes,9,opt,name=localPath" json:"localPath"`
	FileName        string `protobuf:"bytes,10,opt,name=fileName" json:"fileName"`
	SrcUin          uint64 `protobuf:"varint,11,opt,name=srcUin" json:"srcUin"`
	Md5             []byte `protobuf:"bytes,12,opt,name=md5" json:"md5"`
}

func (m *CopyFromReqBody) Reset()         { *m = CopyFromReqBody{} }
func (m *CopyFromReqBody) String() string { return proto.CompactTextString(m) }
func (*CopyFromReqBody) ProtoMessage()    {}
func (*CopyFromReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9584920348a43c3, []int{0}
}
func (m *CopyFromReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyFromReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyFromReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyFromReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyFromReqBody.Merge(m, src)
}
func (m *CopyFromReqBody) XXX_Size() int {
	return m.Size()
}
func (m *CopyFromReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyFromReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_CopyFromReqBody proto.InternalMessageInfo

func (m *CopyFromReqBody) GetGroupCode() uint64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *CopyFromReqBody) GetAppId() uint32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *CopyFromReqBody) GetSrcBusId() uint32 {
	if m != nil {
		return m.SrcBusId
	}
	return 0
}

func (m *CopyFromReqBody) GetSrcParentFolder() []byte {
	if m != nil {
		return m.SrcParentFolder
	}
	return nil
}

func (m *CopyFromReqBody) GetSrcFilePath() []byte {
	if m != nil {
		return m.SrcFilePath
	}
	return nil
}

func (m *CopyFromReqBody) GetDstBusId() uint32 {
	if m != nil {
		return m.DstBusId
	}
	return 0
}

func (m *CopyFromReqBody) GetDstFolderId() []byte {
	if m != nil {
		return m.DstFolderId
	}
	return nil
}

func (m *CopyFromReqBody) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *CopyFromReqBody) GetLocalPath() string {
	if m != nil {
		return m.LocalPath
	}
	return ""
}

func (m *CopyFromReqBody) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *CopyFromReqBody) GetSrcUin() uint64 {
	if m != nil {
		return m.SrcUin
	}
	return 0
}

func (m *CopyFromReqBody) GetMd5() []byte {
	if m != nil {
		return m.Md5
	}
	return nil
}

type CopyFromRspBody struct {
	RetCode       int32  `protobuf:"varint,1,opt,name=retCode" json:"retCode"`
	RetMsg        string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ClientWording string `protobuf:"bytes,3,opt,name=clientWording" json:"clientWording"`
	SaveFilePath  []byte `protobuf:"bytes,4,opt,name=saveFilePath" json:"saveFilePath"`
	BusId         uint32 `protobuf:"varint,5,opt,name=busId" json:"busId"`
}

func (m *CopyFromRspBody) Reset()         { *m = CopyFromRspBody{} }
func (m *CopyFromRspBody) String() string { return proto.CompactTextString(m) }
func (*CopyFromRspBody) ProtoMessage()    {}
func (*CopyFromRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9584920348a43c3, []int{1}
}
func (m *CopyFromRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyFromRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyFromRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyFromRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyFromRspBody.Merge(m, src)
}
func (m *CopyFromRspBody) XXX_Size() int {
	return m.Size()
}
func (m *CopyFromRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyFromRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_CopyFromRspBody proto.InternalMessageInfo

func (m *CopyFromRspBody) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *CopyFromRspBody) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *CopyFromRspBody) GetClientWording() string {
	if m != nil {
		return m.ClientWording
	}
	return ""
}

func (m *CopyFromRspBody) GetSaveFilePath() []byte {
	if m != nil {
		return m.SaveFilePath
	}
	return nil
}

func (m *CopyFromRspBody) GetBusId() uint32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

type CopyToReqBody struct {
	GroupCode             uint64 `protobuf:"varint,1,opt,name=groupCode" json:"groupCode"`
	AppId                 uint32 `protobuf:"varint,2,opt,name=appId" json:"appId"`
	SrcBusId              uint32 `protobuf:"varint,3,opt,name=srcBusId" json:"srcBusId"`
	SrcFileId             string `protobuf:"bytes,4,opt,name=srcFileId" json:"srcFileId"`
	DstBusId              uint32 `protobuf:"varint,5,opt,name=dstBusId" json:"dstBusId"`
	DstUin                uint64 `protobuf:"varint,6,opt,name=dstUin" json:"dstUin"`
	NewFileName           string `protobuf:"bytes,40,opt,name=newFileName" json:"newFileName"`
	TimCloudPdirKey       []byte `protobuf:"bytes,100,opt,name=timCloudPdirKey" json:"timCloudPdirKey"`
	TimCloudPpdirKey      []byte `protobuf:"bytes,101,opt,name=timCloudPpdirKey" json:"timCloudPpdirKey"`
	TimCloudExtensionInfo []byte `protobuf:"bytes,102,opt,name=timCloudExtensionInfo" json:"timCloudExtensionInfo"`
	TimFileExistOption    uint32 `protobuf:"varint,103,opt,name=timFileExistOption" json:"timFileExistOption"`
}

func (m *CopyToReqBody) Reset()         { *m = CopyToReqBody{} }
func (m *CopyToReqBody) String() string { return proto.CompactTextString(m) }
func (*CopyToReqBody) ProtoMessage()    {}
func (*CopyToReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9584920348a43c3, []int{2}
}
func (m *CopyToReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyToReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyToReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyToReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyToReqBody.Merge(m, src)
}
func (m *CopyToReqBody) XXX_Size() int {
	return m.Size()
}
func (m *CopyToReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyToReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_CopyToReqBody proto.InternalMessageInfo

func (m *CopyToReqBody) GetGroupCode() uint64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *CopyToReqBody) GetAppId() uint32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *CopyToReqBody) GetSrcBusId() uint32 {
	if m != nil {
		return m.SrcBusId
	}
	return 0
}

func (m *CopyToReqBody) GetSrcFileId() string {
	if m != nil {
		return m.SrcFileId
	}
	return ""
}

func (m *CopyToReqBody) GetDstBusId() uint32 {
	if m != nil {
		return m.DstBusId
	}
	return 0
}

func (m *CopyToReqBody) GetDstUin() uint64 {
	if m != nil {
		return m.DstUin
	}
	return 0
}

func (m *CopyToReqBody) GetNewFileName() string {
	if m != nil {
		return m.NewFileName
	}
	return ""
}

func (m *CopyToReqBody) GetTimCloudPdirKey() []byte {
	if m != nil {
		return m.TimCloudPdirKey
	}
	return nil
}

func (m *CopyToReqBody) GetTimCloudPpdirKey() []byte {
	if m != nil {
		return m.TimCloudPpdirKey
	}
	return nil
}

func (m *CopyToReqBody) GetTimCloudExtensionInfo() []byte {
	if m != nil {
		return m.TimCloudExtensionInfo
	}
	return nil
}

func (m *CopyToReqBody) GetTimFileExistOption() uint32 {
	if m != nil {
		return m.TimFileExistOption
	}
	return 0
}

type CopyToRspBody struct {
	RetCode       int32  `protobuf:"varint,1,opt,name=retCode" json:"retCode"`
	RetMsg        string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ClientWording string `protobuf:"bytes,3,opt,name=clientWording" json:"clientWording"`
	SaveFilePath  string `protobuf:"bytes,4,opt,name=saveFilePath" json:"saveFilePath"`
	BusId         uint32 `protobuf:"varint,5,opt,name=busId" json:"busId"`
	FileName      string `protobuf:"bytes,40,opt,name=fileName" json:"fileName"`
}

func (m *CopyToRspBody) Reset()         { *m = CopyToRspBody{} }
func (m *CopyToRspBody) String() string { return proto.CompactTextString(m) }
func (*CopyToRspBody) ProtoMessage()    {}
func (*CopyToRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9584920348a43c3, []int{3}
}
func (m *CopyToRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyToRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyToRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyToRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyToRspBody.Merge(m, src)
}
func (m *CopyToRspBody) XXX_Size() int {
	return m.Size()
}
func (m *CopyToRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyToRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_CopyToRspBody proto.InternalMessageInfo

func (m *CopyToRspBody) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *CopyToRspBody) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *CopyToRspBody) GetClientWording() string {
	if m != nil {
		return m.ClientWording
	}
	return ""
}

func (m *CopyToRspBody) GetSaveFilePath() string {
	if m != nil {
		return m.SaveFilePath
	}
	return ""
}

func (m *CopyToRspBody) GetBusId() uint32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

func (m *CopyToRspBody) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

type FeedsReqBody struct {
	GroupCode uint64 `protobuf:"varint,1,opt,name=groupCode" json:"groupCode"`
	AppId     uint32 `protobuf:"varint,2,opt,name=appId" json:"appId"`
	//repeated C8639group_file_common.FeedsInfo feedsInfoList = 3;
	MultiSendSeq uint32 `protobuf:"varint,4,opt,name=multiSendSeq" json:"multiSendSeq"`
}

func (m *FeedsReqBody) Reset()         { *m = FeedsReqBody{} }
func (m *FeedsReqBody) String() string { return proto.CompactTextString(m) }
func (*FeedsReqBody) ProtoMessage()    {}
func (*FeedsReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9584920348a43c3, []int{4}
}
func (m *FeedsReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedsReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedsReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedsReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedsReqBody.Merge(m, src)
}
func (m *FeedsReqBody) XXX_Size() int {
	return m.Size()
}
func (m *FeedsReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedsReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_FeedsReqBody proto.InternalMessageInfo

func (m *FeedsReqBody) GetGroupCode() uint64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *FeedsReqBody) GetAppId() uint32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *FeedsReqBody) GetMultiSendSeq() uint32 {
	if m != nil {
		return m.MultiSendSeq
	}
	return 0
}

type FeedsRspBody struct {
	RetCode       int32  `protobuf:"varint,1,opt,name=retCode" json:"retCode"`
	RetMsg        string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ClientWording string `protobuf:"bytes,3,opt,name=clientWording" json:"clientWording"`
	//repeated C8639group_file_common.FeedsResult feedsResultList = 4;
	SvrbusyWaitTime uint32 `protobuf:"varint,5,opt,name=svrbusyWaitTime" json:"svrbusyWaitTime"`
}

func (m *FeedsRspBody) Reset()         { *m = FeedsRspBody{} }
func (m *FeedsRspBody) String() string { return proto.CompactTextString(m) }
func (*FeedsRspBody) ProtoMessage()    {}
func (*FeedsRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9584920348a43c3, []int{5}
}
func (m *FeedsRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedsRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedsRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedsRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedsRspBody.Merge(m, src)
}
func (m *FeedsRspBody) XXX_Size() int {
	return m.Size()
}
func (m *FeedsRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedsRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_FeedsRspBody proto.InternalMessageInfo

func (m *FeedsRspBody) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *FeedsRspBody) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *FeedsRspBody) GetClientWording() string {
	if m != nil {
		return m.ClientWording
	}
	return ""
}

func (m *FeedsRspBody) GetSvrbusyWaitTime() uint32 {
	if m != nil {
		return m.SvrbusyWaitTime
	}
	return 0
}

type D6D9ReqBody struct {
	TransFileReq *TransFileReqBody `protobuf:"bytes,1,opt,name=transFileReq" json:"transFileReq,omitempty"`
	CopyFromReq  *CopyFromReqBody  `protobuf:"bytes,2,opt,name=copyFromReq" json:"copyFromReq,omitempty"`
	CopyToReq    *CopyToReqBody    `protobuf:"bytes,3,opt,name=copyToReq" json:"copyToReq,omitempty"`
	FeedsInfoReq *FeedsReqBody     `protobuf:"bytes,5,opt,name=feedsInfoReq" json:"feedsInfoReq,omitempty"`
}

func (m *D6D9ReqBody) Reset()         { *m = D6D9ReqBody{} }
func (m *D6D9ReqBody) String() string { return proto.CompactTextString(m) }
func (*D6D9ReqBody) ProtoMessage()    {}
func (*D6D9ReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9584920348a43c3, []int{6}
}
func (m *D6D9ReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D6D9ReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D6D9ReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D6D9ReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D6D9ReqBody.Merge(m, src)
}
func (m *D6D9ReqBody) XXX_Size() int {
	return m.Size()
}
func (m *D6D9ReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_D6D9ReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_D6D9ReqBody proto.InternalMessageInfo

func (m *D6D9ReqBody) GetTransFileReq() *TransFileReqBody {
	if m != nil {
		return m.TransFileReq
	}
	return nil
}

func (m *D6D9ReqBody) GetCopyFromReq() *CopyFromReqBody {
	if m != nil {
		return m.CopyFromReq
	}
	return nil
}

func (m *D6D9ReqBody) GetCopyToReq() *CopyToReqBody {
	if m != nil {
		return m.CopyToReq
	}
	return nil
}

func (m *D6D9ReqBody) GetFeedsInfoReq() *FeedsReqBody {
	if m != nil {
		return m.FeedsInfoReq
	}
	return nil
}

type D6D9RspBody struct {
	TransFileRsp *TransFileRspBody `protobuf:"bytes,1,opt,name=transFileRsp" json:"transFileRsp,omitempty"`
	CopyFromRsp  *CopyFromRspBody  `protobuf:"bytes,2,opt,name=copyFromRsp" json:"copyFromRsp,omitempty"`
	CopyToRsp    *CopyToRspBody    `protobuf:"bytes,3,opt,name=copyToRsp" json:"copyToRsp,omitempty"`
	FeedsInfoRsp *FeedsRspBody     `protobuf:"bytes,5,opt,name=feedsInfoRsp" json:"feedsInfoRsp,omitempty"`
}

func (m *D6D9RspBody) Reset()         { *m = D6D9RspBody{} }
func (m *D6D9RspBody) String() string { return proto.CompactTextString(m) }
func (*D6D9RspBody) ProtoMessage()    {}
func (*D6D9RspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9584920348a43c3, []int{7}
}
func (m *D6D9RspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *D6D9RspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_D6D9RspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *D6D9RspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_D6D9RspBody.Merge(m, src)
}
func (m *D6D9RspBody) XXX_Size() int {
	return m.Size()
}
func (m *D6D9RspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_D6D9RspBody.DiscardUnknown(m)
}

var xxx_messageInfo_D6D9RspBody proto.InternalMessageInfo

func (m *D6D9RspBody) GetTransFileRsp() *TransFileRspBody {
	if m != nil {
		return m.TransFileRsp
	}
	return nil
}

func (m *D6D9RspBody) GetCopyFromRsp() *CopyFromRspBody {
	if m != nil {
		return m.CopyFromRsp
	}
	return nil
}

func (m *D6D9RspBody) GetCopyToRsp() *CopyToRspBody {
	if m != nil {
		return m.CopyToRsp
	}
	return nil
}

func (m *D6D9RspBody) GetFeedsInfoRsp() *FeedsRspBody {
	if m != nil {
		return m.FeedsInfoRsp
	}
	return nil
}

type TransFileReqBody struct {
	GroupCode uint64 `protobuf:"varint,1,opt,name=groupCode" json:"groupCode"`
	AppId     uint32 `protobuf:"varint,2,opt,name=appId" json:"appId"`
	BusId     uint32 `protobuf:"varint,3,opt,name=busId" json:"busId"`
	FileId    string `protobuf:"bytes,4,opt,name=fileId" json:"fileId"`
}

func (m *TransFileReqBody) Reset()         { *m = TransFileReqBody{} }
func (m *TransFileReqBody) String() string { return proto.CompactTextString(m) }
func (*TransFileReqBody) ProtoMessage()    {}
func (*TransFileReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9584920348a43c3, []int{8}
}
func (m *TransFileReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransFileReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransFileReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransFileReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransFileReqBody.Merge(m, src)
}
func (m *TransFileReqBody) XXX_Size() int {
	return m.Size()
}
func (m *TransFileReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_TransFileReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_TransFileReqBody proto.InternalMessageInfo

func (m *TransFileReqBody) GetGroupCode() uint64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *TransFileReqBody) GetAppId() uint32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *TransFileReqBody) GetBusId() uint32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

func (m *TransFileReqBody) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

type TransFileRspBody struct {
	RetCode       int32  `protobuf:"varint,1,opt,name=retCode" json:"retCode"`
	RetMsg        string `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg"`
	ClientWording string `protobuf:"bytes,3,opt,name=clientWording" json:"clientWording"`
	SaveBusId     uint32 `protobuf:"varint,4,opt,name=saveBusId" json:"saveBusId"`
	SaveFilePath  string `protobuf:"bytes,5,opt,name=saveFilePath" json:"saveFilePath"`
}

func (m *TransFileRspBody) Reset()         { *m = TransFileRspBody{} }
func (m *TransFileRspBody) String() string { return proto.CompactTextString(m) }
func (*TransFileRspBody) ProtoMessage()    {}
func (*TransFileRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9584920348a43c3, []int{9}
}
func (m *TransFileRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransFileRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransFileRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransFileRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransFileRspBody.Merge(m, src)
}
func (m *TransFileRspBody) XXX_Size() int {
	return m.Size()
}
func (m *TransFileRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_TransFileRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_TransFileRspBody proto.InternalMessageInfo

func (m *TransFileRspBody) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *TransFileRspBody) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *TransFileRspBody) GetClientWording() string {
	if m != nil {
		return m.ClientWording
	}
	return ""
}

func (m *TransFileRspBody) GetSaveBusId() uint32 {
	if m != nil {
		return m.SaveBusId
	}
	return 0
}

func (m *TransFileRspBody) GetSaveFilePath() string {
	if m != nil {
		return m.SaveFilePath
	}
	return ""
}

func init() {
	proto.RegisterType((*CopyFromReqBody)(nil), "CopyFromReqBody")
	proto.RegisterType((*CopyFromRspBody)(nil), "CopyFromRspBody")
	proto.RegisterType((*CopyToReqBody)(nil), "CopyToReqBody")
	proto.RegisterType((*CopyToRspBody)(nil), "CopyToRspBody")
	proto.RegisterType((*FeedsReqBody)(nil), "FeedsReqBody")
	proto.RegisterType((*FeedsRspBody)(nil), "FeedsRspBody")
	proto.RegisterType((*D6D9ReqBody)(nil), "D6D9ReqBody")
	proto.RegisterType((*D6D9RspBody)(nil), "D6D9RspBody")
	proto.RegisterType((*TransFileReqBody)(nil), "TransFileReqBody")
	proto.RegisterType((*TransFileRspBody)(nil), "TransFileRspBody")
}

func init() { proto.RegisterFile("client/pb/oidb/oidb0x6d9.proto", fileDescriptor_b9584920348a43c3) }

var fileDescriptor_b9584920348a43c3 = []byte{
	// 782 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xbf, 0x34, 0x69, 0x73, 0x93, 0x7c, 0x2d, 0x23, 0x81, 0x2c, 0x54, 0x99, 0xc8, 0x0b,
	0x64, 0x21, 0x94, 0x96, 0x88, 0x56, 0x2a, 0xec, 0xd2, 0x36, 0x52, 0x84, 0x80, 0xca, 0x2d, 0xaa,
	0xc4, 0xce, 0xf5, 0x4c, 0xc2, 0x48, 0x8e, 0xc7, 0x9d, 0x99, 0x94, 0x84, 0x67, 0x60, 0xc1, 0x63,
	0xb0, 0xe7, 0x09, 0xd8, 0x55, 0xac, 0xca, 0x0e, 0x36, 0x08, 0xda, 0x17, 0x41, 0xe3, 0xd8, 0xce,
	0x38, 0x09, 0x0b, 0x04, 0xaa, 0xd8, 0x64, 0x71, 0xee, 0x99, 0xb9, 0x3f, 0xe7, 0xdc, 0x71, 0xc0,
	0xf2, 0x03, 0x4a, 0x42, 0xb9, 0x11, 0x9d, 0x6c, 0x30, 0x8a, 0x27, 0x3f, 0x9b, 0xa3, 0x6d, 0xbc,
	0xd3, 0x8c, 0x38, 0x93, 0xcc, 0xfe, 0x50, 0x84, 0xd5, 0x5d, 0x16, 0x8d, 0x3b, 0x9c, 0x0d, 0x5c,
	0x72, 0xda, 0x66, 0x78, 0x8c, 0x6c, 0xa8, 0xf4, 0x39, 0x1b, 0x46, 0xbb, 0x0c, 0x13, 0xd3, 0x68,
	0x18, 0xce, 0x52, 0x7b, 0xe9, 0xfc, 0xdb, 0x9d, 0x82, 0x3b, 0x85, 0xd1, 0x6d, 0x28, 0x79, 0x51,
	0xd4, 0xc5, 0xe6, 0x7f, 0x0d, 0xc3, 0xa9, 0x27, 0xf1, 0x09, 0x84, 0x1a, 0xb0, 0x22, 0xb8, 0xdf,
	0x1e, 0x8a, 0x2e, 0x36, 0x8b, 0x5a, 0x38, 0x43, 0x51, 0x13, 0x56, 0x05, 0xf7, 0x0f, 0x3c, 0x4e,
	0x42, 0xd9, 0x61, 0x01, 0x26, 0xdc, 0x5c, 0x6a, 0x18, 0x4e, 0x2d, 0x21, 0xce, 0x06, 0xd1, 0x5d,
	0xa8, 0x0a, 0xee, 0x77, 0x68, 0x40, 0x0e, 0x3c, 0xf9, 0xca, 0x2c, 0x69, 0x5c, 0x3d, 0xa0, 0x32,
	0x63, 0x21, 0x27, 0x99, 0xcb, 0x7a, 0xe6, 0x14, 0x55, 0x37, 0x61, 0x91, 0x5c, 0xdb, 0xc5, 0xe6,
	0xb2, 0x7e, 0x93, 0x16, 0x50, 0x37, 0xf5, 0x68, 0x40, 0x0e, 0xe9, 0x1b, 0x62, 0xae, 0x68, 0x23,
	0xc8, 0x50, 0x35, 0xa5, 0x80, 0xf9, 0x5e, 0x10, 0x57, 0x54, 0x69, 0x18, 0x4e, 0x25, 0x9d, 0x52,
	0x06, 0xa7, 0xb7, 0x3c, 0xf3, 0x06, 0xc4, 0x04, 0x8d, 0x92, 0xa1, 0x68, 0x1d, 0xca, 0x82, 0xfb,
	0x2f, 0x68, 0x68, 0x56, 0xb5, 0x2c, 0x09, 0x86, 0x6e, 0x41, 0x71, 0x80, 0xb7, 0xcc, 0x9a, 0x56,
	0xa5, 0x02, 0xec, 0x8f, 0x86, 0xa6, 0x9a, 0x88, 0x62, 0xd5, 0x2c, 0x58, 0xe6, 0x44, 0x66, 0x9a,
	0x95, 0x12, 0x7e, 0x0a, 0xaa, 0x4c, 0x9c, 0xc8, 0xa7, 0xa2, 0x1f, 0x4b, 0x96, 0x56, 0x92, 0x60,
	0xe8, 0x1e, 0xd4, 0x27, 0x4e, 0x39, 0x66, 0x1c, 0xd3, 0xb0, 0x1f, 0x0b, 0x97, 0x92, 0xf2, 0x21,
	0xe4, 0x40, 0x4d, 0x78, 0x67, 0x24, 0x93, 0x43, 0x97, 0x2e, 0x17, 0x51, 0x2e, 0x39, 0x89, 0xc5,
	0x28, 0xe9, 0x2e, 0x89, 0x21, 0xfb, 0x73, 0x11, 0xea, 0xaa, 0x87, 0x23, 0x76, 0x7d, 0xbe, 0xb3,
	0xa1, 0x92, 0xd8, 0xa5, 0x8b, 0xe3, 0xb2, 0x33, 0xcd, 0x32, 0x38, 0xe7, 0xa1, 0xd2, 0x42, 0x0f,
	0xad, 0x43, 0x19, 0x0b, 0xa9, 0x34, 0x2b, 0xeb, 0x9a, 0x4d, 0x30, 0xe5, 0xb0, 0x90, 0xbc, 0xee,
	0xa4, 0xb2, 0x3b, 0x5a, 0x16, 0x3d, 0xa0, 0x76, 0x40, 0xd2, 0xc1, 0x6e, 0xc0, 0x86, 0xf8, 0x00,
	0x53, 0xfe, 0x84, 0x8c, 0x4d, 0xac, 0xef, 0xc0, 0x4c, 0x10, 0x6d, 0xc2, 0x5a, 0x06, 0x45, 0xc9,
	0x01, 0xa2, 0x1d, 0x98, 0x8b, 0xa2, 0x47, 0x70, 0x33, 0xc5, 0xf6, 0x47, 0x92, 0x84, 0x82, 0xb2,
	0xb0, 0x1b, 0xf6, 0x98, 0xd9, 0xd3, 0x8e, 0x2d, 0xa6, 0xa0, 0x87, 0x80, 0x24, 0x1d, 0xa8, 0x62,
	0xf7, 0x47, 0x54, 0xc8, 0xe7, 0x91, 0xa4, 0x2c, 0x34, 0xfb, 0xda, 0x3c, 0x16, 0xc4, 0xed, 0x1f,
	0x46, 0xa6, 0xe9, 0x3f, 0xe1, 0xca, 0xca, 0xef, 0xba, 0x32, 0xb7, 0xb1, 0xce, 0xa2, 0x8d, 0xb5,
	0x47, 0x50, 0xeb, 0x10, 0x82, 0xc5, 0xdf, 0x72, 0xad, 0x03, 0xb5, 0xc1, 0x30, 0x90, 0xf4, 0x90,
	0x84, 0xf8, 0x90, 0x9c, 0xc6, 0x75, 0xa7, 0x94, 0x5c, 0xc4, 0x7e, 0x6f, 0xa4, 0xa9, 0xaf, 0x7d,
	0xb8, 0xea, 0xc1, 0x3e, 0xe3, 0x27, 0x43, 0x31, 0x3e, 0xf6, 0xa8, 0x3c, 0xa2, 0x03, 0x92, 0x1b,
	0xde, 0x6c, 0xd0, 0xfe, 0x6a, 0x40, 0x75, 0x6f, 0x7b, 0x6f, 0x27, 0x1d, 0xd2, 0x16, 0xd4, 0x24,
	0xf7, 0x42, 0xa1, 0x34, 0x70, 0xc9, 0x69, 0x5c, 0x6e, 0xb5, 0x75, 0xa3, 0x79, 0xa4, 0x81, 0x8a,
	0xe8, 0xe6, 0x68, 0xa8, 0x05, 0x55, 0x7f, 0xfa, 0x71, 0x8a, 0xbb, 0xa8, 0xb6, 0xd6, 0x9a, 0x33,
	0x1f, 0x2c, 0x57, 0x27, 0xa1, 0xfb, 0x50, 0xf1, 0xd3, 0x67, 0x25, 0x6e, 0xa9, 0xda, 0xfa, 0xbf,
	0x99, 0x7b, 0x68, 0xdc, 0x29, 0x01, 0x3d, 0x80, 0x5a, 0x4f, 0x8d, 0x54, 0x99, 0x5e, 0x1d, 0x28,
	0xc5, 0x07, 0xea, 0x4d, 0x5d, 0x62, 0x37, 0x47, 0x99, 0xf6, 0x96, 0xa8, 0x90, 0xeb, 0x4d, 0x44,
	0x0b, 0x7a, 0x9b, 0x10, 0xdd, 0x1c, 0x2d, 0xd7, 0x9b, 0x88, 0xe6, 0x7b, 0x4b, 0x0e, 0xe9, 0x24,
	0xad, 0x37, 0x11, 0xcd, 0xf6, 0x96, 0xf0, 0xa7, 0x84, 0x7c, 0x6f, 0x22, 0x9a, 0xe9, 0x2d, 0x2d,
	0x4a, 0xa7, 0xd8, 0x6f, 0x0d, 0x58, 0x9b, 0xd5, 0xe4, 0x8f, 0x1d, 0x9e, 0xed, 0x5b, 0x71, 0x7e,
	0xdf, 0xd6, 0xa1, 0xdc, 0x9b, 0x7f, 0x8e, 0x13, 0xcc, 0xfe, 0x94, 0x2b, 0xe7, 0xda, 0x5d, 0xaf,
	0x3e, 0x17, 0xde, 0x19, 0x99, 0x7c, 0x0b, 0xf4, 0xbd, 0x9c, 0xc2, 0x73, 0xcf, 0x4e, 0xe9, 0x57,
	0xcf, 0x4e, 0xbb, 0x71, 0x7e, 0x69, 0x19, 0x17, 0x97, 0x96, 0xf1, 0xfd, 0xd2, 0x32, 0xde, 0x5d,
	0x59, 0x85, 0x8b, 0x2b, 0xab, 0xf0, 0xe5, 0xca, 0x2a, 0xbc, 0x2c, 0x37, 0x1f, 0xab, 0xff, 0x65,
	0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x3a, 0xf4, 0x4d, 0xad, 0x09, 0x00, 0x00,
}

func (m *CopyFromReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyFromReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyFromReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Md5 != nil {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x62
	}
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.SrcUin))
	i--
	dAtA[i] = 0x58
	i -= len(m.FileName)
	copy(dAtA[i:], m.FileName)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.FileName)))
	i--
	dAtA[i] = 0x52
	i -= len(m.LocalPath)
	copy(dAtA[i:], m.LocalPath)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.LocalPath)))
	i--
	dAtA[i] = 0x4a
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.FileSize))
	i--
	dAtA[i] = 0x40
	if m.DstFolderId != nil {
		i -= len(m.DstFolderId)
		copy(dAtA[i:], m.DstFolderId)
		i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.DstFolderId)))
		i--
		dAtA[i] = 0x3a
	}
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.DstBusId))
	i--
	dAtA[i] = 0x30
	if m.SrcFilePath != nil {
		i -= len(m.SrcFilePath)
		copy(dAtA[i:], m.SrcFilePath)
		i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.SrcFilePath)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SrcParentFolder != nil {
		i -= len(m.SrcParentFolder)
		copy(dAtA[i:], m.SrcParentFolder)
		i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.SrcParentFolder)))
		i--
		dAtA[i] = 0x22
	}
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.SrcBusId))
	i--
	dAtA[i] = 0x18
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.AppId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.GroupCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CopyFromRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyFromRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyFromRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.BusId))
	i--
	dAtA[i] = 0x28
	if m.SaveFilePath != nil {
		i -= len(m.SaveFilePath)
		copy(dAtA[i:], m.SaveFilePath)
		i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.SaveFilePath)))
		i--
		dAtA[i] = 0x22
	}
	i -= len(m.ClientWording)
	copy(dAtA[i:], m.ClientWording)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.ClientWording)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.RetCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CopyToReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyToReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyToReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.TimFileExistOption))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb8
	if m.TimCloudExtensionInfo != nil {
		i -= len(m.TimCloudExtensionInfo)
		copy(dAtA[i:], m.TimCloudExtensionInfo)
		i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.TimCloudExtensionInfo)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if m.TimCloudPpdirKey != nil {
		i -= len(m.TimCloudPpdirKey)
		copy(dAtA[i:], m.TimCloudPpdirKey)
		i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.TimCloudPpdirKey)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.TimCloudPdirKey != nil {
		i -= len(m.TimCloudPdirKey)
		copy(dAtA[i:], m.TimCloudPdirKey)
		i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.TimCloudPdirKey)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	i -= len(m.NewFileName)
	copy(dAtA[i:], m.NewFileName)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.NewFileName)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc2
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.DstUin))
	i--
	dAtA[i] = 0x30
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.DstBusId))
	i--
	dAtA[i] = 0x28
	i -= len(m.SrcFileId)
	copy(dAtA[i:], m.SrcFileId)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.SrcFileId)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.SrcBusId))
	i--
	dAtA[i] = 0x18
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.AppId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.GroupCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *CopyToRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyToRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyToRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.FileName)
	copy(dAtA[i:], m.FileName)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.FileName)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc2
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.BusId))
	i--
	dAtA[i] = 0x28
	i -= len(m.SaveFilePath)
	copy(dAtA[i:], m.SaveFilePath)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.SaveFilePath)))
	i--
	dAtA[i] = 0x22
	i -= len(m.ClientWording)
	copy(dAtA[i:], m.ClientWording)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.ClientWording)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.RetCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FeedsReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedsReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedsReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.MultiSendSeq))
	i--
	dAtA[i] = 0x20
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.AppId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.GroupCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *FeedsRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedsRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedsRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.SvrbusyWaitTime))
	i--
	dAtA[i] = 0x28
	i -= len(m.ClientWording)
	copy(dAtA[i:], m.ClientWording)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.ClientWording)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.RetCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *D6D9ReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D6D9ReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D6D9ReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeedsInfoReq != nil {
		{
			size, err := m.FeedsInfoReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D9(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CopyToReq != nil {
		{
			size, err := m.CopyToReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D9(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CopyFromReq != nil {
		{
			size, err := m.CopyFromReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D9(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TransFileReq != nil {
		{
			size, err := m.TransFileReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D9(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *D6D9RspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *D6D9RspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *D6D9RspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeedsInfoRsp != nil {
		{
			size, err := m.FeedsInfoRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D9(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CopyToRsp != nil {
		{
			size, err := m.CopyToRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D9(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CopyFromRsp != nil {
		{
			size, err := m.CopyFromRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D9(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TransFileRsp != nil {
		{
			size, err := m.TransFileRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X6D9(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransFileReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransFileReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransFileReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.FileId)
	copy(dAtA[i:], m.FileId)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.FileId)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.BusId))
	i--
	dAtA[i] = 0x18
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.AppId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.GroupCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TransFileRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransFileRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransFileRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.SaveFilePath)
	copy(dAtA[i:], m.SaveFilePath)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.SaveFilePath)))
	i--
	dAtA[i] = 0x2a
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.SaveBusId))
	i--
	dAtA[i] = 0x20
	i -= len(m.ClientWording)
	copy(dAtA[i:], m.ClientWording)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.ClientWording)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.RetMsg)
	copy(dAtA[i:], m.RetMsg)
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(len(m.RetMsg)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintOidb0X6D9(dAtA, i, uint64(m.RetCode))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintOidb0X6D9(dAtA []byte, offset int, v uint64) int {
	offset -= sovOidb0X6D9(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CopyFromReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X6D9(uint64(m.GroupCode))
	n += 1 + sovOidb0X6D9(uint64(m.AppId))
	n += 1 + sovOidb0X6D9(uint64(m.SrcBusId))
	if m.SrcParentFolder != nil {
		l = len(m.SrcParentFolder)
		n += 1 + l + sovOidb0X6D9(uint64(l))
	}
	if m.SrcFilePath != nil {
		l = len(m.SrcFilePath)
		n += 1 + l + sovOidb0X6D9(uint64(l))
	}
	n += 1 + sovOidb0X6D9(uint64(m.DstBusId))
	if m.DstFolderId != nil {
		l = len(m.DstFolderId)
		n += 1 + l + sovOidb0X6D9(uint64(l))
	}
	n += 1 + sovOidb0X6D9(uint64(m.FileSize))
	l = len(m.LocalPath)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	l = len(m.FileName)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	n += 1 + sovOidb0X6D9(uint64(m.SrcUin))
	if m.Md5 != nil {
		l = len(m.Md5)
		n += 1 + l + sovOidb0X6D9(uint64(l))
	}
	return n
}

func (m *CopyFromRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X6D9(uint64(m.RetCode))
	l = len(m.RetMsg)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	l = len(m.ClientWording)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	if m.SaveFilePath != nil {
		l = len(m.SaveFilePath)
		n += 1 + l + sovOidb0X6D9(uint64(l))
	}
	n += 1 + sovOidb0X6D9(uint64(m.BusId))
	return n
}

func (m *CopyToReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X6D9(uint64(m.GroupCode))
	n += 1 + sovOidb0X6D9(uint64(m.AppId))
	n += 1 + sovOidb0X6D9(uint64(m.SrcBusId))
	l = len(m.SrcFileId)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	n += 1 + sovOidb0X6D9(uint64(m.DstBusId))
	n += 1 + sovOidb0X6D9(uint64(m.DstUin))
	l = len(m.NewFileName)
	n += 2 + l + sovOidb0X6D9(uint64(l))
	if m.TimCloudPdirKey != nil {
		l = len(m.TimCloudPdirKey)
		n += 2 + l + sovOidb0X6D9(uint64(l))
	}
	if m.TimCloudPpdirKey != nil {
		l = len(m.TimCloudPpdirKey)
		n += 2 + l + sovOidb0X6D9(uint64(l))
	}
	if m.TimCloudExtensionInfo != nil {
		l = len(m.TimCloudExtensionInfo)
		n += 2 + l + sovOidb0X6D9(uint64(l))
	}
	n += 2 + sovOidb0X6D9(uint64(m.TimFileExistOption))
	return n
}

func (m *CopyToRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X6D9(uint64(m.RetCode))
	l = len(m.RetMsg)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	l = len(m.ClientWording)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	l = len(m.SaveFilePath)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	n += 1 + sovOidb0X6D9(uint64(m.BusId))
	l = len(m.FileName)
	n += 2 + l + sovOidb0X6D9(uint64(l))
	return n
}

func (m *FeedsReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X6D9(uint64(m.GroupCode))
	n += 1 + sovOidb0X6D9(uint64(m.AppId))
	n += 1 + sovOidb0X6D9(uint64(m.MultiSendSeq))
	return n
}

func (m *FeedsRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X6D9(uint64(m.RetCode))
	l = len(m.RetMsg)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	l = len(m.ClientWording)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	n += 1 + sovOidb0X6D9(uint64(m.SvrbusyWaitTime))
	return n
}

func (m *D6D9ReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransFileReq != nil {
		l = m.TransFileReq.Size()
		n += 1 + l + sovOidb0X6D9(uint64(l))
	}
	if m.CopyFromReq != nil {
		l = m.CopyFromReq.Size()
		n += 1 + l + sovOidb0X6D9(uint64(l))
	}
	if m.CopyToReq != nil {
		l = m.CopyToReq.Size()
		n += 1 + l + sovOidb0X6D9(uint64(l))
	}
	if m.FeedsInfoReq != nil {
		l = m.FeedsInfoReq.Size()
		n += 1 + l + sovOidb0X6D9(uint64(l))
	}
	return n
}

func (m *D6D9RspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransFileRsp != nil {
		l = m.TransFileRsp.Size()
		n += 1 + l + sovOidb0X6D9(uint64(l))
	}
	if m.CopyFromRsp != nil {
		l = m.CopyFromRsp.Size()
		n += 1 + l + sovOidb0X6D9(uint64(l))
	}
	if m.CopyToRsp != nil {
		l = m.CopyToRsp.Size()
		n += 1 + l + sovOidb0X6D9(uint64(l))
	}
	if m.FeedsInfoRsp != nil {
		l = m.FeedsInfoRsp.Size()
		n += 1 + l + sovOidb0X6D9(uint64(l))
	}
	return n
}

func (m *TransFileReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X6D9(uint64(m.GroupCode))
	n += 1 + sovOidb0X6D9(uint64(m.AppId))
	n += 1 + sovOidb0X6D9(uint64(m.BusId))
	l = len(m.FileId)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	return n
}

func (m *TransFileRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOidb0X6D9(uint64(m.RetCode))
	l = len(m.RetMsg)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	l = len(m.ClientWording)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	n += 1 + sovOidb0X6D9(uint64(m.SaveBusId))
	l = len(m.SaveFilePath)
	n += 1 + l + sovOidb0X6D9(uint64(l))
	return n
}

func sovOidb0X6D9(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOidb0X6D9(x uint64) (n int) {
	return sovOidb0X6D9(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CopyFromReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyFromReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyFromReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcBusId", wireType)
			}
			m.SrcBusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcBusId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcParentFolder", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcParentFolder = append(m.SrcParentFolder[:0], dAtA[iNdEx:postIndex]...)
			if m.SrcParentFolder == nil {
				m.SrcParentFolder = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcFilePath", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcFilePath = append(m.SrcFilePath[:0], dAtA[iNdEx:postIndex]...)
			if m.SrcFilePath == nil {
				m.SrcFilePath = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstBusId", wireType)
			}
			m.DstBusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstBusId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstFolderId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstFolderId = append(m.DstFolderId[:0], dAtA[iNdEx:postIndex]...)
			if m.DstFolderId == nil {
				m.DstFolderId = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcUin", wireType)
			}
			m.SrcUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcUin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = append(m.Md5[:0], dAtA[iNdEx:postIndex]...)
			if m.Md5 == nil {
				m.Md5 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyFromRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyFromRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyFromRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientWording", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientWording = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveFilePath", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaveFilePath = append(m.SaveFilePath[:0], dAtA[iNdEx:postIndex]...)
			if m.SaveFilePath == nil {
				m.SaveFilePath = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusId", wireType)
			}
			m.BusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyToReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyToReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyToReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcBusId", wireType)
			}
			m.SrcBusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcBusId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcFileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcFileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstBusId", wireType)
			}
			m.DstBusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstBusId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstUin", wireType)
			}
			m.DstUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstUin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimCloudPdirKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimCloudPdirKey = append(m.TimCloudPdirKey[:0], dAtA[iNdEx:postIndex]...)
			if m.TimCloudPdirKey == nil {
				m.TimCloudPdirKey = []byte{}
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimCloudPpdirKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimCloudPpdirKey = append(m.TimCloudPpdirKey[:0], dAtA[iNdEx:postIndex]...)
			if m.TimCloudPpdirKey == nil {
				m.TimCloudPpdirKey = []byte{}
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimCloudExtensionInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimCloudExtensionInfo = append(m.TimCloudExtensionInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.TimCloudExtensionInfo == nil {
				m.TimCloudExtensionInfo = []byte{}
			}
			iNdEx = postIndex
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimFileExistOption", wireType)
			}
			m.TimFileExistOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimFileExistOption |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyToRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyToRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyToRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientWording", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientWording = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaveFilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusId", wireType)
			}
			m.BusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedsReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedsReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedsReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiSendSeq", wireType)
			}
			m.MultiSendSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MultiSendSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedsRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedsRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedsRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientWording", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientWording = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrbusyWaitTime", wireType)
			}
			m.SvrbusyWaitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrbusyWaitTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D6D9ReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D6D9ReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D6D9ReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransFileReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransFileReq == nil {
				m.TransFileReq = &TransFileReqBody{}
			}
			if err := m.TransFileReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyFromReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CopyFromReq == nil {
				m.CopyFromReq = &CopyFromReqBody{}
			}
			if err := m.CopyFromReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyToReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CopyToReq == nil {
				m.CopyToReq = &CopyToReqBody{}
			}
			if err := m.CopyToReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedsInfoReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedsInfoReq == nil {
				m.FeedsInfoReq = &FeedsReqBody{}
			}
			if err := m.FeedsInfoReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *D6D9RspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: D6D9RspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: D6D9RspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransFileRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransFileRsp == nil {
				m.TransFileRsp = &TransFileRspBody{}
			}
			if err := m.TransFileRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyFromRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CopyFromRsp == nil {
				m.CopyFromRsp = &CopyFromRspBody{}
			}
			if err := m.CopyFromRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyToRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CopyToRsp == nil {
				m.CopyToRsp = &CopyToRspBody{}
			}
			if err := m.CopyToRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedsInfoRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedsInfoRsp == nil {
				m.FeedsInfoRsp = &FeedsRspBody{}
			}
			if err := m.FeedsInfoRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransFileReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransFileReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransFileReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusId", wireType)
			}
			m.BusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransFileRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X6D9
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransFileRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransFileRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientWording", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientWording = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveBusId", wireType)
			}
			m.SaveBusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaveBusId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaveFilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X6D9(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X6D9
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOidb0X6D9(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOidb0X6D9
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0X6D9
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOidb0X6D9
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOidb0X6D9
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOidb0X6D9
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOidb0X6D9        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOidb0X6D9          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOidb0X6D9 = fmt.Errorf("proto: unexpected end of group")
)
