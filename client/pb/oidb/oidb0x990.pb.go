// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/pb/oidb/oidb0x990.proto

package oidb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TranslateReqBody struct {
	// TranslateReq translate_req = 1;
	BatchTranslateReq *BatchTranslateReq `protobuf:"bytes,2,opt,name=batch_translate_req,json=batchTranslateReq,proto3" json:"batch_translate_req,omitempty"`
}

func (m *TranslateReqBody) Reset()         { *m = TranslateReqBody{} }
func (m *TranslateReqBody) String() string { return proto.CompactTextString(m) }
func (*TranslateReqBody) ProtoMessage()    {}
func (*TranslateReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c60dc596ab6c931, []int{0}
}
func (m *TranslateReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TranslateReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TranslateReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TranslateReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranslateReqBody.Merge(m, src)
}
func (m *TranslateReqBody) XXX_Size() int {
	return m.Size()
}
func (m *TranslateReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_TranslateReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_TranslateReqBody proto.InternalMessageInfo

func (m *TranslateReqBody) GetBatchTranslateReq() *BatchTranslateReq {
	if m != nil {
		return m.BatchTranslateReq
	}
	return nil
}

type TranslateRspBody struct {
	// TranslateRsp translate_rsp = 1;
	BatchTranslateRsp *BatchTranslateRsp `protobuf:"bytes,2,opt,name=batch_translate_rsp,json=batchTranslateRsp,proto3" json:"batch_translate_rsp,omitempty"`
}

func (m *TranslateRspBody) Reset()         { *m = TranslateRspBody{} }
func (m *TranslateRspBody) String() string { return proto.CompactTextString(m) }
func (*TranslateRspBody) ProtoMessage()    {}
func (*TranslateRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c60dc596ab6c931, []int{1}
}
func (m *TranslateRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TranslateRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TranslateRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TranslateRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranslateRspBody.Merge(m, src)
}
func (m *TranslateRspBody) XXX_Size() int {
	return m.Size()
}
func (m *TranslateRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_TranslateRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_TranslateRspBody proto.InternalMessageInfo

func (m *TranslateRspBody) GetBatchTranslateRsp() *BatchTranslateRsp {
	if m != nil {
		return m.BatchTranslateRsp
	}
	return nil
}

type BatchTranslateReq struct {
	SrcLanguage string   `protobuf:"bytes,1,opt,name=src_language,json=srcLanguage,proto3" json:"src_language,omitempty"`
	DstLanguage string   `protobuf:"bytes,2,opt,name=dst_language,json=dstLanguage,proto3" json:"dst_language,omitempty"`
	SrcTextList []string `protobuf:"bytes,3,rep,name=src_text_list,json=srcTextList,proto3" json:"src_text_list,omitempty"`
}

func (m *BatchTranslateReq) Reset()         { *m = BatchTranslateReq{} }
func (m *BatchTranslateReq) String() string { return proto.CompactTextString(m) }
func (*BatchTranslateReq) ProtoMessage()    {}
func (*BatchTranslateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c60dc596ab6c931, []int{2}
}
func (m *BatchTranslateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTranslateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTranslateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTranslateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTranslateReq.Merge(m, src)
}
func (m *BatchTranslateReq) XXX_Size() int {
	return m.Size()
}
func (m *BatchTranslateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTranslateReq.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTranslateReq proto.InternalMessageInfo

func (m *BatchTranslateReq) GetSrcLanguage() string {
	if m != nil {
		return m.SrcLanguage
	}
	return ""
}

func (m *BatchTranslateReq) GetDstLanguage() string {
	if m != nil {
		return m.DstLanguage
	}
	return ""
}

func (m *BatchTranslateReq) GetSrcTextList() []string {
	if m != nil {
		return m.SrcTextList
	}
	return nil
}

type BatchTranslateRsp struct {
	ErrorCode   int32    `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg    []byte   `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	SrcLanguage string   `protobuf:"bytes,3,opt,name=src_language,json=srcLanguage,proto3" json:"src_language,omitempty"`
	DstLanguage string   `protobuf:"bytes,4,opt,name=dst_language,json=dstLanguage,proto3" json:"dst_language,omitempty"`
	SrcTextList []string `protobuf:"bytes,5,rep,name=src_text_list,json=srcTextList,proto3" json:"src_text_list,omitempty"`
	DstTextList []string `protobuf:"bytes,6,rep,name=dst_text_list,json=dstTextList,proto3" json:"dst_text_list,omitempty"`
}

func (m *BatchTranslateRsp) Reset()         { *m = BatchTranslateRsp{} }
func (m *BatchTranslateRsp) String() string { return proto.CompactTextString(m) }
func (*BatchTranslateRsp) ProtoMessage()    {}
func (*BatchTranslateRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c60dc596ab6c931, []int{3}
}
func (m *BatchTranslateRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTranslateRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTranslateRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTranslateRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTranslateRsp.Merge(m, src)
}
func (m *BatchTranslateRsp) XXX_Size() int {
	return m.Size()
}
func (m *BatchTranslateRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTranslateRsp.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTranslateRsp proto.InternalMessageInfo

func (m *BatchTranslateRsp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *BatchTranslateRsp) GetErrorMsg() []byte {
	if m != nil {
		return m.ErrorMsg
	}
	return nil
}

func (m *BatchTranslateRsp) GetSrcLanguage() string {
	if m != nil {
		return m.SrcLanguage
	}
	return ""
}

func (m *BatchTranslateRsp) GetDstLanguage() string {
	if m != nil {
		return m.DstLanguage
	}
	return ""
}

func (m *BatchTranslateRsp) GetSrcTextList() []string {
	if m != nil {
		return m.SrcTextList
	}
	return nil
}

func (m *BatchTranslateRsp) GetDstTextList() []string {
	if m != nil {
		return m.DstTextList
	}
	return nil
}

func init() {
	proto.RegisterType((*TranslateReqBody)(nil), "TranslateReqBody")
	proto.RegisterType((*TranslateRspBody)(nil), "TranslateRspBody")
	proto.RegisterType((*BatchTranslateReq)(nil), "BatchTranslateReq")
	proto.RegisterType((*BatchTranslateRsp)(nil), "BatchTranslateRsp")
}

func init() { proto.RegisterFile("client/pb/oidb/oidb0x990.proto", fileDescriptor_4c60dc596ab6c931) }

var fileDescriptor_4c60dc596ab6c931 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x4f, 0xc2, 0x40,
	0x18, 0x86, 0x39, 0x10, 0x22, 0x07, 0x26, 0x52, 0x17, 0x12, 0xe3, 0xa5, 0x76, 0x62, 0x02, 0xa2,
	0x13, 0x71, 0xab, 0x2b, 0x2e, 0x0d, 0x71, 0x70, 0xb9, 0xb4, 0xbd, 0x4b, 0x6d, 0x52, 0xb9, 0xe3,
	0xbe, 0xcf, 0x04, 0x07, 0xff, 0x83, 0x3f, 0xcb, 0x91, 0xd1, 0xc5, 0xc4, 0xd0, 0x3f, 0x62, 0xae,
	0x05, 0x51, 0x1b, 0xa2, 0x4b, 0x93, 0xbe, 0xf7, 0xdc, 0xf3, 0xbe, 0xc3, 0x51, 0x16, 0x67, 0xa9,
	0x9c, 0xe3, 0x48, 0x47, 0x23, 0x95, 0x8a, 0xf2, 0x33, 0x5e, 0x4e, 0x26, 0xe3, 0xa1, 0x36, 0x0a,
	0x95, 0x77, 0x4b, 0x8f, 0x67, 0x26, 0x9c, 0x43, 0x16, 0xa2, 0x0c, 0xe4, 0xc2, 0x57, 0xe2, 0xc9,
	0xf1, 0xe9, 0x49, 0x14, 0x62, 0x7c, 0xcf, 0x71, 0x7b, 0xc2, 0x8d, 0x5c, 0xf4, 0xeb, 0x2e, 0x19,
	0x74, 0x2e, 0x9c, 0xa1, 0x6f, 0xcf, 0xbe, 0x5f, 0x0a, 0x7a, 0xd1, 0xef, 0xe8, 0xa7, 0x17, 0xf4,
	0x5e, 0x2f, 0xe8, 0x7d, 0x5e, 0xd0, 0x15, 0x2f, 0x68, 0xef, 0x99, 0xf6, 0x2a, 0xfd, 0xce, 0x39,
	0xed, 0x82, 0x89, 0x79, 0x16, 0xce, 0x93, 0xc7, 0x30, 0x91, 0x7d, 0xe2, 0x92, 0x41, 0x3b, 0xe8,
	0x80, 0x89, 0xa7, 0x9b, 0xc8, 0x22, 0x02, 0x70, 0x87, 0xd4, 0x4b, 0x44, 0x00, 0x7e, 0x21, 0x1e,
	0x3d, 0xb2, 0x16, 0x94, 0x4b, 0xe4, 0x59, 0x0a, 0xd8, 0x6f, 0xb8, 0x8d, 0x8d, 0x66, 0x26, 0x97,
	0x38, 0x4d, 0x01, 0xbd, 0x77, 0x52, 0xe9, 0x07, 0xed, 0x9c, 0x51, 0x2a, 0x8d, 0x51, 0x86, 0xc7,
	0x4a, 0x94, 0xed, 0xcd, 0xa0, 0x5d, 0x24, 0xd7, 0x4a, 0x48, 0xe7, 0x94, 0x96, 0x3f, 0xfc, 0x01,
	0x92, 0xa2, 0xb8, 0x1b, 0x1c, 0x16, 0xc1, 0x0d, 0x24, 0x95, 0xed, 0x8d, 0xbf, 0xb7, 0x1f, 0xfc,
	0x63, 0x7b, 0xb3, 0xb2, 0xdd, 0x32, 0x56, 0xb3, 0x63, 0x5a, 0x25, 0x23, 0x00, 0xb7, 0x8c, 0xef,
	0xbe, 0xae, 0x19, 0x59, 0xad, 0x19, 0xf9, 0x58, 0x33, 0xf2, 0x92, 0xb3, 0xda, 0x2a, 0x67, 0xb5,
	0xb7, 0x9c, 0xd5, 0xee, 0x5a, 0xc3, 0x2b, 0xfb, 0x76, 0xa2, 0x56, 0xf1, 0x6e, 0x2e, 0x3f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xc0, 0x99, 0x4c, 0x56, 0x59, 0x02, 0x00, 0x00,
}

func (m *TranslateReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TranslateReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TranslateReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchTranslateReq != nil {
		{
			size, err := m.BatchTranslateReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X990(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TranslateRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TranslateRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TranslateRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchTranslateRsp != nil {
		{
			size, err := m.BatchTranslateRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOidb0X990(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *BatchTranslateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTranslateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTranslateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SrcTextList) > 0 {
		for iNdEx := len(m.SrcTextList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SrcTextList[iNdEx])
			copy(dAtA[i:], m.SrcTextList[iNdEx])
			i = encodeVarintOidb0X990(dAtA, i, uint64(len(m.SrcTextList[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DstLanguage) > 0 {
		i -= len(m.DstLanguage)
		copy(dAtA[i:], m.DstLanguage)
		i = encodeVarintOidb0X990(dAtA, i, uint64(len(m.DstLanguage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcLanguage) > 0 {
		i -= len(m.SrcLanguage)
		copy(dAtA[i:], m.SrcLanguage)
		i = encodeVarintOidb0X990(dAtA, i, uint64(len(m.SrcLanguage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchTranslateRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTranslateRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTranslateRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DstTextList) > 0 {
		for iNdEx := len(m.DstTextList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DstTextList[iNdEx])
			copy(dAtA[i:], m.DstTextList[iNdEx])
			i = encodeVarintOidb0X990(dAtA, i, uint64(len(m.DstTextList[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SrcTextList) > 0 {
		for iNdEx := len(m.SrcTextList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SrcTextList[iNdEx])
			copy(dAtA[i:], m.SrcTextList[iNdEx])
			i = encodeVarintOidb0X990(dAtA, i, uint64(len(m.SrcTextList[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DstLanguage) > 0 {
		i -= len(m.DstLanguage)
		copy(dAtA[i:], m.DstLanguage)
		i = encodeVarintOidb0X990(dAtA, i, uint64(len(m.DstLanguage)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SrcLanguage) > 0 {
		i -= len(m.SrcLanguage)
		copy(dAtA[i:], m.SrcLanguage)
		i = encodeVarintOidb0X990(dAtA, i, uint64(len(m.SrcLanguage)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintOidb0X990(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.ErrorCode != 0 {
		i = encodeVarintOidb0X990(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOidb0X990(dAtA []byte, offset int, v uint64) int {
	offset -= sovOidb0X990(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TranslateReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchTranslateReq != nil {
		l = m.BatchTranslateReq.Size()
		n += 1 + l + sovOidb0X990(uint64(l))
	}
	return n
}

func (m *TranslateRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchTranslateRsp != nil {
		l = m.BatchTranslateRsp.Size()
		n += 1 + l + sovOidb0X990(uint64(l))
	}
	return n
}

func (m *BatchTranslateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcLanguage)
	if l > 0 {
		n += 1 + l + sovOidb0X990(uint64(l))
	}
	l = len(m.DstLanguage)
	if l > 0 {
		n += 1 + l + sovOidb0X990(uint64(l))
	}
	if len(m.SrcTextList) > 0 {
		for _, s := range m.SrcTextList {
			l = len(s)
			n += 1 + l + sovOidb0X990(uint64(l))
		}
	}
	return n
}

func (m *BatchTranslateRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovOidb0X990(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovOidb0X990(uint64(l))
	}
	l = len(m.SrcLanguage)
	if l > 0 {
		n += 1 + l + sovOidb0X990(uint64(l))
	}
	l = len(m.DstLanguage)
	if l > 0 {
		n += 1 + l + sovOidb0X990(uint64(l))
	}
	if len(m.SrcTextList) > 0 {
		for _, s := range m.SrcTextList {
			l = len(s)
			n += 1 + l + sovOidb0X990(uint64(l))
		}
	}
	if len(m.DstTextList) > 0 {
		for _, s := range m.DstTextList {
			l = len(s)
			n += 1 + l + sovOidb0X990(uint64(l))
		}
	}
	return n
}

func sovOidb0X990(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOidb0X990(x uint64) (n int) {
	return sovOidb0X990(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TranslateReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X990
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TranslateReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TranslateReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTranslateReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X990
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X990
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchTranslateReq == nil {
				m.BatchTranslateReq = &BatchTranslateReq{}
			}
			if err := m.BatchTranslateReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X990(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TranslateRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X990
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TranslateRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TranslateRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTranslateRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X990
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOidb0X990
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchTranslateRsp == nil {
				m.BatchTranslateRsp = &BatchTranslateRsp{}
			}
			if err := m.BatchTranslateRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X990(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTranslateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X990
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTranslateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTranslateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcLanguage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X990
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X990
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcLanguage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstLanguage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X990
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X990
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstLanguage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTextList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X990
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X990
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTextList = append(m.SrcTextList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X990(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTranslateRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOidb0X990
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTranslateRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTranslateRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X990
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X990
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOidb0X990
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = append(m.ErrorMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.ErrorMsg == nil {
				m.ErrorMsg = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcLanguage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X990
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X990
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcLanguage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstLanguage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X990
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X990
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstLanguage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTextList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X990
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X990
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTextList = append(m.SrcTextList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstTextList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOidb0X990
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOidb0X990
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstTextList = append(m.DstTextList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOidb0X990(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOidb0X990
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOidb0X990(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOidb0X990
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0X990
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOidb0X990
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOidb0X990
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOidb0X990
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOidb0X990
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOidb0X990        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOidb0X990          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOidb0X990 = fmt.Errorf("proto: unexpected end of group")
)
