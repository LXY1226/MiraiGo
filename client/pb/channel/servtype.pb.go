// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: pb/channel/servtype.proto

package channel

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppChannelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary      *string `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
	Msg          *string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	ExpireTimeMs *uint64 `protobuf:"varint,3,opt,name=expireTimeMs" json:"expireTimeMs,omitempty"`
	SchemaType   *uint32 `protobuf:"varint,4,opt,name=schemaType" json:"schemaType,omitempty"`
	Schema       *string `protobuf:"bytes,5,opt,name=schema" json:"schema,omitempty"`
}

func (x *AppChannelMsg) Reset() {
	*x = AppChannelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppChannelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppChannelMsg) ProtoMessage() {}

func (x *AppChannelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppChannelMsg.ProtoReflect.Descriptor instead.
func (*AppChannelMsg) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{0}
}

func (x *AppChannelMsg) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *AppChannelMsg) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *AppChannelMsg) GetExpireTimeMs() uint64 {
	if x != nil && x.ExpireTimeMs != nil {
		return *x.ExpireTimeMs
	}
	return 0
}

func (x *AppChannelMsg) GetSchemaType() uint32 {
	if x != nil && x.SchemaType != nil {
		return *x.SchemaType
	}
	return 0
}

func (x *AppChannelMsg) GetSchema() string {
	if x != nil && x.Schema != nil {
		return *x.Schema
	}
	return ""
}

type CategoryChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelIndex *uint32 `protobuf:"varint,1,opt,name=channelIndex" json:"channelIndex,omitempty"`
	ChannelId    *uint64 `protobuf:"varint,2,opt,name=channelId" json:"channelId,omitempty"`
}

func (x *CategoryChannelInfo) Reset() {
	*x = CategoryChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryChannelInfo) ProtoMessage() {}

func (x *CategoryChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryChannelInfo.ProtoReflect.Descriptor instead.
func (*CategoryChannelInfo) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{1}
}

func (x *CategoryChannelInfo) GetChannelIndex() uint32 {
	if x != nil && x.ChannelIndex != nil {
		return *x.ChannelIndex
	}
	return 0
}

func (x *CategoryChannelInfo) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

type CategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryIndex *uint32                `protobuf:"varint,1,opt,name=categoryIndex" json:"categoryIndex,omitempty"`
	ChannelInfo   []*CategoryChannelInfo `protobuf:"bytes,2,rep,name=channelInfo" json:"channelInfo,omitempty"`
	CategoryName  []byte                 `protobuf:"bytes,3,opt,name=categoryName" json:"categoryName,omitempty"`
	CategoryId    *uint64                `protobuf:"varint,4,opt,name=categoryId" json:"categoryId,omitempty"`
}

func (x *CategoryInfo) Reset() {
	*x = CategoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryInfo) ProtoMessage() {}

func (x *CategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryInfo.ProtoReflect.Descriptor instead.
func (*CategoryInfo) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{2}
}

func (x *CategoryInfo) GetCategoryIndex() uint32 {
	if x != nil && x.CategoryIndex != nil {
		return *x.CategoryIndex
	}
	return 0
}

func (x *CategoryInfo) GetChannelInfo() []*CategoryChannelInfo {
	if x != nil {
		return x.ChannelInfo
	}
	return nil
}

func (x *CategoryInfo) GetCategoryName() []byte {
	if x != nil {
		return x.CategoryName
	}
	return nil
}

func (x *CategoryInfo) GetCategoryId() uint64 {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return 0
}

type ChanInfoFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName            *uint32                 `protobuf:"varint,2,opt,name=channelName" json:"channelName,omitempty"`
	CreatorId              *uint32                 `protobuf:"varint,3,opt,name=creatorId" json:"creatorId,omitempty"`
	CreateTime             *uint32                 `protobuf:"varint,4,opt,name=createTime" json:"createTime,omitempty"`
	GuildId                *uint32                 `protobuf:"varint,5,opt,name=guildId" json:"guildId,omitempty"`
	MsgNotifyType          *uint32                 `protobuf:"varint,6,opt,name=msgNotifyType" json:"msgNotifyType,omitempty"`
	ChannelType            *uint32                 `protobuf:"varint,7,opt,name=channelType" json:"channelType,omitempty"`
	SpeakPermission        *uint32                 `protobuf:"varint,8,opt,name=speakPermission" json:"speakPermission,omitempty"`
	LastMsgSeq             *uint32                 `protobuf:"varint,11,opt,name=lastMsgSeq" json:"lastMsgSeq,omitempty"`
	LastCntMsgSeq          *uint32                 `protobuf:"varint,12,opt,name=lastCntMsgSeq" json:"lastCntMsgSeq,omitempty"`
	VoiceChannelInfoFilter *VoiceChannelInfoFilter `protobuf:"bytes,14,opt,name=voiceChannelInfoFilter" json:"voiceChannelInfoFilter,omitempty"`
	LiveChannelInfoFilter  *LiveChannelInfoFilter  `protobuf:"bytes,15,opt,name=liveChannelInfoFilter" json:"liveChannelInfoFilter,omitempty"`
	BannedSpeak            *uint32                 `protobuf:"varint,16,opt,name=bannedSpeak" json:"bannedSpeak,omitempty"`
}

func (x *ChanInfoFilter) Reset() {
	*x = ChanInfoFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChanInfoFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChanInfoFilter) ProtoMessage() {}

func (x *ChanInfoFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChanInfoFilter.ProtoReflect.Descriptor instead.
func (*ChanInfoFilter) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{3}
}

func (x *ChanInfoFilter) GetChannelName() uint32 {
	if x != nil && x.ChannelName != nil {
		return *x.ChannelName
	}
	return 0
}

func (x *ChanInfoFilter) GetCreatorId() uint32 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *ChanInfoFilter) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *ChanInfoFilter) GetGuildId() uint32 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *ChanInfoFilter) GetMsgNotifyType() uint32 {
	if x != nil && x.MsgNotifyType != nil {
		return *x.MsgNotifyType
	}
	return 0
}

func (x *ChanInfoFilter) GetChannelType() uint32 {
	if x != nil && x.ChannelType != nil {
		return *x.ChannelType
	}
	return 0
}

func (x *ChanInfoFilter) GetSpeakPermission() uint32 {
	if x != nil && x.SpeakPermission != nil {
		return *x.SpeakPermission
	}
	return 0
}

func (x *ChanInfoFilter) GetLastMsgSeq() uint32 {
	if x != nil && x.LastMsgSeq != nil {
		return *x.LastMsgSeq
	}
	return 0
}

func (x *ChanInfoFilter) GetLastCntMsgSeq() uint32 {
	if x != nil && x.LastCntMsgSeq != nil {
		return *x.LastCntMsgSeq
	}
	return 0
}

func (x *ChanInfoFilter) GetVoiceChannelInfoFilter() *VoiceChannelInfoFilter {
	if x != nil {
		return x.VoiceChannelInfoFilter
	}
	return nil
}

func (x *ChanInfoFilter) GetLiveChannelInfoFilter() *LiveChannelInfoFilter {
	if x != nil {
		return x.LiveChannelInfoFilter
	}
	return nil
}

func (x *ChanInfoFilter) GetBannedSpeak() uint32 {
	if x != nil && x.BannedSpeak != nil {
		return *x.BannedSpeak
	}
	return 0
}

type ChangeChanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId        *uint64          `protobuf:"varint,1,opt,name=guildId" json:"guildId,omitempty"`
	ChanId         *uint64          `protobuf:"varint,2,opt,name=chanId" json:"chanId,omitempty"`
	OperatorId     *uint64          `protobuf:"varint,3,opt,name=operatorId" json:"operatorId,omitempty"`
	InfoSeq        *MsgSeq          `protobuf:"bytes,4,opt,name=infoSeq" json:"infoSeq,omitempty"`
	UpdateType     *uint32          `protobuf:"varint,5,opt,name=updateType" json:"updateType,omitempty"`
	ChanInfoFilter *ChanInfoFilter  `protobuf:"bytes,6,opt,name=chanInfoFilter" json:"chanInfoFilter,omitempty"`
	ChanInfo       *ServChannelInfo `protobuf:"bytes,7,opt,name=chanInfo" json:"chanInfo,omitempty"`
}

func (x *ChangeChanInfo) Reset() {
	*x = ChangeChanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeChanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeChanInfo) ProtoMessage() {}

func (x *ChangeChanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeChanInfo.ProtoReflect.Descriptor instead.
func (*ChangeChanInfo) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{4}
}

func (x *ChangeChanInfo) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *ChangeChanInfo) GetChanId() uint64 {
	if x != nil && x.ChanId != nil {
		return *x.ChanId
	}
	return 0
}

func (x *ChangeChanInfo) GetOperatorId() uint64 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *ChangeChanInfo) GetInfoSeq() *MsgSeq {
	if x != nil {
		return x.InfoSeq
	}
	return nil
}

func (x *ChangeChanInfo) GetUpdateType() uint32 {
	if x != nil && x.UpdateType != nil {
		return *x.UpdateType
	}
	return 0
}

func (x *ChangeChanInfo) GetChanInfoFilter() *ChanInfoFilter {
	if x != nil {
		return x.ChanInfoFilter
	}
	return nil
}

func (x *ChangeChanInfo) GetChanInfo() *ServChannelInfo {
	if x != nil {
		return x.ChanInfo
	}
	return nil
}

type ChangeGuildInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId         *uint64          `protobuf:"varint,1,opt,name=guildId" json:"guildId,omitempty"`
	OperatorId      *uint64          `protobuf:"varint,2,opt,name=operatorId" json:"operatorId,omitempty"`
	InfoSeq         *MsgSeq          `protobuf:"bytes,3,opt,name=infoSeq" json:"infoSeq,omitempty"`
	FaceSeq         *MsgSeq          `protobuf:"bytes,4,opt,name=faceSeq" json:"faceSeq,omitempty"`
	UpdateType      *uint32          `protobuf:"varint,5,opt,name=updateType" json:"updateType,omitempty"`
	GuildInfoFilter *GuildInfoFilter `protobuf:"bytes,6,opt,name=guildInfoFilter" json:"guildInfoFilter,omitempty"`
	GuildInfo       *GuildInfo       `protobuf:"bytes,7,opt,name=guildInfo" json:"guildInfo,omitempty"`
}

func (x *ChangeGuildInfo) Reset() {
	*x = ChangeGuildInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeGuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeGuildInfo) ProtoMessage() {}

func (x *ChangeGuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeGuildInfo.ProtoReflect.Descriptor instead.
func (*ChangeGuildInfo) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeGuildInfo) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *ChangeGuildInfo) GetOperatorId() uint64 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *ChangeGuildInfo) GetInfoSeq() *MsgSeq {
	if x != nil {
		return x.InfoSeq
	}
	return nil
}

func (x *ChangeGuildInfo) GetFaceSeq() *MsgSeq {
	if x != nil {
		return x.FaceSeq
	}
	return nil
}

func (x *ChangeGuildInfo) GetUpdateType() uint32 {
	if x != nil && x.UpdateType != nil {
		return *x.UpdateType
	}
	return 0
}

func (x *ChangeGuildInfo) GetGuildInfoFilter() *GuildInfoFilter {
	if x != nil {
		return x.GuildInfoFilter
	}
	return nil
}

func (x *ChangeGuildInfo) GetGuildInfo() *GuildInfo {
	if x != nil {
		return x.GuildInfo
	}
	return nil
}

type ChannelID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChanId *uint64 `protobuf:"varint,1,opt,name=chanId" json:"chanId,omitempty"`
}

func (x *ChannelID) Reset() {
	*x = ChannelID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelID) ProtoMessage() {}

func (x *ChannelID) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelID.ProtoReflect.Descriptor instead.
func (*ChannelID) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{6}
}

func (x *ChannelID) GetChanId() uint64 {
	if x != nil && x.ChanId != nil {
		return *x.ChanId
	}
	return 0
}

type ServChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId        *uint64           `protobuf:"varint,1,opt,name=channelId" json:"channelId,omitempty"`
	ChannelName      []byte            `protobuf:"bytes,2,opt,name=channelName" json:"channelName,omitempty"`
	CreatorId        *uint64           `protobuf:"varint,3,opt,name=creatorId" json:"creatorId,omitempty"`
	CreateTime       *uint64           `protobuf:"varint,4,opt,name=createTime" json:"createTime,omitempty"`
	GuildId          *uint64           `protobuf:"varint,5,opt,name=guildId" json:"guildId,omitempty"`
	MsgNotifyType    *uint32           `protobuf:"varint,6,opt,name=msgNotifyType" json:"msgNotifyType,omitempty"`
	ChannelType      *uint32           `protobuf:"varint,7,opt,name=channelType" json:"channelType,omitempty"`
	SpeakPermission  *uint32           `protobuf:"varint,8,opt,name=speakPermission" json:"speakPermission,omitempty"`
	LastMsgSeq       *MsgSeq           `protobuf:"bytes,11,opt,name=lastMsgSeq" json:"lastMsgSeq,omitempty"`
	LastCntMsgSeq    *MsgSeq           `protobuf:"bytes,12,opt,name=lastCntMsgSeq" json:"lastCntMsgSeq,omitempty"`
	VoiceChannelInfo *VoiceChannelInfo `protobuf:"bytes,14,opt,name=voiceChannelInfo" json:"voiceChannelInfo,omitempty"`
	LiveChannelInfo  *LiveChannelInfo  `protobuf:"bytes,15,opt,name=liveChannelInfo" json:"liveChannelInfo,omitempty"`
	BannedSpeak      *uint32           `protobuf:"varint,16,opt,name=bannedSpeak" json:"bannedSpeak,omitempty"`
}

func (x *ServChannelInfo) Reset() {
	*x = ServChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServChannelInfo) ProtoMessage() {}

func (x *ServChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServChannelInfo.ProtoReflect.Descriptor instead.
func (*ServChannelInfo) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{7}
}

func (x *ServChannelInfo) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *ServChannelInfo) GetChannelName() []byte {
	if x != nil {
		return x.ChannelName
	}
	return nil
}

func (x *ServChannelInfo) GetCreatorId() uint64 {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return 0
}

func (x *ServChannelInfo) GetCreateTime() uint64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *ServChannelInfo) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *ServChannelInfo) GetMsgNotifyType() uint32 {
	if x != nil && x.MsgNotifyType != nil {
		return *x.MsgNotifyType
	}
	return 0
}

func (x *ServChannelInfo) GetChannelType() uint32 {
	if x != nil && x.ChannelType != nil {
		return *x.ChannelType
	}
	return 0
}

func (x *ServChannelInfo) GetSpeakPermission() uint32 {
	if x != nil && x.SpeakPermission != nil {
		return *x.SpeakPermission
	}
	return 0
}

func (x *ServChannelInfo) GetLastMsgSeq() *MsgSeq {
	if x != nil {
		return x.LastMsgSeq
	}
	return nil
}

func (x *ServChannelInfo) GetLastCntMsgSeq() *MsgSeq {
	if x != nil {
		return x.LastCntMsgSeq
	}
	return nil
}

func (x *ServChannelInfo) GetVoiceChannelInfo() *VoiceChannelInfo {
	if x != nil {
		return x.VoiceChannelInfo
	}
	return nil
}

func (x *ServChannelInfo) GetLiveChannelInfo() *LiveChannelInfo {
	if x != nil {
		return x.LiveChannelInfo
	}
	return nil
}

func (x *ServChannelInfo) GetBannedSpeak() uint32 {
	if x != nil && x.BannedSpeak != nil {
		return *x.BannedSpeak
	}
	return 0
}

type CommGrayTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusiType   *uint64                    `protobuf:"varint,1,opt,name=busiType" json:"busiType,omitempty"`
	BusiId     *uint64                    `protobuf:"varint,2,opt,name=busiId" json:"busiId,omitempty"`
	CtrlFlag   *uint32                    `protobuf:"varint,3,opt,name=ctrlFlag" json:"ctrlFlag,omitempty"`
	TemplId    *uint64                    `protobuf:"varint,4,opt,name=templId" json:"templId,omitempty"`
	TemplParam []*CommGrayTips_TemplParam `protobuf:"bytes,5,rep,name=templParam" json:"templParam,omitempty"`
	Content    []byte                     `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	TipsSeqId  *uint64                    `protobuf:"varint,10,opt,name=tipsSeqId" json:"tipsSeqId,omitempty"`
	PbReserv   []byte                     `protobuf:"bytes,100,opt,name=pbReserv" json:"pbReserv,omitempty"`
}

func (x *CommGrayTips) Reset() {
	*x = CommGrayTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommGrayTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommGrayTips) ProtoMessage() {}

func (x *CommGrayTips) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommGrayTips.ProtoReflect.Descriptor instead.
func (*CommGrayTips) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{8}
}

func (x *CommGrayTips) GetBusiType() uint64 {
	if x != nil && x.BusiType != nil {
		return *x.BusiType
	}
	return 0
}

func (x *CommGrayTips) GetBusiId() uint64 {
	if x != nil && x.BusiId != nil {
		return *x.BusiId
	}
	return 0
}

func (x *CommGrayTips) GetCtrlFlag() uint32 {
	if x != nil && x.CtrlFlag != nil {
		return *x.CtrlFlag
	}
	return 0
}

func (x *CommGrayTips) GetTemplId() uint64 {
	if x != nil && x.TemplId != nil {
		return *x.TemplId
	}
	return 0
}

func (x *CommGrayTips) GetTemplParam() []*CommGrayTips_TemplParam {
	if x != nil {
		return x.TemplParam
	}
	return nil
}

func (x *CommGrayTips) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *CommGrayTips) GetTipsSeqId() uint64 {
	if x != nil && x.TipsSeqId != nil {
		return *x.TipsSeqId
	}
	return 0
}

func (x *CommGrayTips) GetPbReserv() []byte {
	if x != nil {
		return x.PbReserv
	}
	return nil
}

type CreateChan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId    *uint64      `protobuf:"varint,1,opt,name=guildId" json:"guildId,omitempty"`
	OperatorId *uint64      `protobuf:"varint,3,opt,name=operatorId" json:"operatorId,omitempty"`
	CreateId   []*ChannelID `protobuf:"bytes,4,rep,name=createId" json:"createId,omitempty"`
}

func (x *CreateChan) Reset() {
	*x = CreateChan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChan) ProtoMessage() {}

func (x *CreateChan) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChan.ProtoReflect.Descriptor instead.
func (*CreateChan) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{9}
}

func (x *CreateChan) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *CreateChan) GetOperatorId() uint64 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *CreateChan) GetCreateId() []*ChannelID {
	if x != nil {
		return x.CreateId
	}
	return nil
}

type CreateGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId *uint64 `protobuf:"varint,1,opt,name=operatorId" json:"operatorId,omitempty"`
	GuildId    *uint64 `protobuf:"varint,2,opt,name=guildId" json:"guildId,omitempty"`
}

func (x *CreateGuild) Reset() {
	*x = CreateGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGuild) ProtoMessage() {}

func (x *CreateGuild) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGuild.ProtoReflect.Descriptor instead.
func (*CreateGuild) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{10}
}

func (x *CreateGuild) GetOperatorId() uint64 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *CreateGuild) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

type DestroyChan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId    *uint64      `protobuf:"varint,1,opt,name=guildId" json:"guildId,omitempty"`
	OperatorId *uint64      `protobuf:"varint,3,opt,name=operatorId" json:"operatorId,omitempty"`
	DeleteId   []*ChannelID `protobuf:"bytes,4,rep,name=deleteId" json:"deleteId,omitempty"`
}

func (x *DestroyChan) Reset() {
	*x = DestroyChan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyChan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyChan) ProtoMessage() {}

func (x *DestroyChan) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyChan.ProtoReflect.Descriptor instead.
func (*DestroyChan) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{11}
}

func (x *DestroyChan) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *DestroyChan) GetOperatorId() uint64 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *DestroyChan) GetDeleteId() []*ChannelID {
	if x != nil {
		return x.DeleteId
	}
	return nil
}

type DestroyGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId *uint64 `protobuf:"varint,1,opt,name=operatorId" json:"operatorId,omitempty"`
	GuildId    *uint64 `protobuf:"varint,2,opt,name=guildId" json:"guildId,omitempty"`
}

func (x *DestroyGuild) Reset() {
	*x = DestroyGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyGuild) ProtoMessage() {}

func (x *DestroyGuild) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyGuild.ProtoReflect.Descriptor instead.
func (*DestroyGuild) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{12}
}

func (x *DestroyGuild) GetOperatorId() uint64 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *DestroyGuild) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

type EventBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadNotify           *ReadNotify              `protobuf:"bytes,1,opt,name=readNotify" json:"readNotify,omitempty"`
	CommGrayTips         *CommGrayTips            `protobuf:"bytes,2,opt,name=commGrayTips" json:"commGrayTips,omitempty"`
	CreateGuild          *CreateGuild             `protobuf:"bytes,3,opt,name=createGuild" json:"createGuild,omitempty"`
	DestroyGuild         *DestroyGuild            `protobuf:"bytes,4,opt,name=destroyGuild" json:"destroyGuild,omitempty"`
	JoinGuild            *JoinGuild               `protobuf:"bytes,5,opt,name=joinGuild" json:"joinGuild,omitempty"`
	KickOffGuild         *KickOffGuild            `protobuf:"bytes,6,opt,name=kickOffGuild" json:"kickOffGuild,omitempty"`
	QuitGuild            *QuitGuild               `protobuf:"bytes,7,opt,name=quitGuild" json:"quitGuild,omitempty"`
	ChangeGuildInfo      *ChangeGuildInfo         `protobuf:"bytes,8,opt,name=changeGuildInfo" json:"changeGuildInfo,omitempty"`
	CreateChan           *CreateChan              `protobuf:"bytes,9,opt,name=createChan" json:"createChan,omitempty"`
	DestroyChan          *DestroyChan             `protobuf:"bytes,10,opt,name=destroyChan" json:"destroyChan,omitempty"`
	ChangeChanInfo       *ChangeChanInfo          `protobuf:"bytes,11,opt,name=changeChanInfo" json:"changeChanInfo,omitempty"`
	SetAdmin             *SetAdmin                `protobuf:"bytes,12,opt,name=setAdmin" json:"setAdmin,omitempty"`
	SetMsgRecvType       *SetMsgRecvType          `protobuf:"bytes,13,opt,name=setMsgRecvType" json:"setMsgRecvType,omitempty"`
	UpdateMsg            *UpdateMsg               `protobuf:"bytes,14,opt,name=updateMsg" json:"updateMsg,omitempty"`
	SetTop               *SetTop                  `protobuf:"bytes,17,opt,name=setTop" json:"setTop,omitempty"`
	SwitchChannel        *SwitchVoiceChannel      `protobuf:"bytes,18,opt,name=switchChannel" json:"switchChannel,omitempty"`
	UpdateCategory       *UpdateCategory          `protobuf:"bytes,21,opt,name=updateCategory" json:"updateCategory,omitempty"`
	UpdateVoiceBlockList *UpdateVoiceBlockList    `protobuf:"bytes,22,opt,name=updateVoiceBlockList" json:"updateVoiceBlockList,omitempty"`
	SetMute              *SetMute                 `protobuf:"bytes,23,opt,name=setMute" json:"setMute,omitempty"`
	LiveStatusChangeRoom *LiveRoomStatusChangeMsg `protobuf:"bytes,24,opt,name=liveStatusChangeRoom" json:"liveStatusChangeRoom,omitempty"`
	SwitchLiveRoom       *SwitchLiveRoom          `protobuf:"bytes,25,opt,name=switchLiveRoom" json:"switchLiveRoom,omitempty"`
	Events               []*MsgEvent              `protobuf:"bytes,39,rep,name=events" json:"events,omitempty"`
	Scheduler            *SchedulerMsg            `protobuf:"bytes,40,opt,name=scheduler" json:"scheduler,omitempty"`
	AppChannel           *AppChannelMsg           `protobuf:"bytes,41,opt,name=appChannel" json:"appChannel,omitempty"`
	WeakMsgAppChannel    *AppChannelMsg           `protobuf:"bytes,46,opt,name=weakMsgAppChannel" json:"weakMsgAppChannel,omitempty"`
}

func (x *EventBody) Reset() {
	*x = EventBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBody) ProtoMessage() {}

func (x *EventBody) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBody.ProtoReflect.Descriptor instead.
func (*EventBody) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{13}
}

func (x *EventBody) GetReadNotify() *ReadNotify {
	if x != nil {
		return x.ReadNotify
	}
	return nil
}

func (x *EventBody) GetCommGrayTips() *CommGrayTips {
	if x != nil {
		return x.CommGrayTips
	}
	return nil
}

func (x *EventBody) GetCreateGuild() *CreateGuild {
	if x != nil {
		return x.CreateGuild
	}
	return nil
}

func (x *EventBody) GetDestroyGuild() *DestroyGuild {
	if x != nil {
		return x.DestroyGuild
	}
	return nil
}

func (x *EventBody) GetJoinGuild() *JoinGuild {
	if x != nil {
		return x.JoinGuild
	}
	return nil
}

func (x *EventBody) GetKickOffGuild() *KickOffGuild {
	if x != nil {
		return x.KickOffGuild
	}
	return nil
}

func (x *EventBody) GetQuitGuild() *QuitGuild {
	if x != nil {
		return x.QuitGuild
	}
	return nil
}

func (x *EventBody) GetChangeGuildInfo() *ChangeGuildInfo {
	if x != nil {
		return x.ChangeGuildInfo
	}
	return nil
}

func (x *EventBody) GetCreateChan() *CreateChan {
	if x != nil {
		return x.CreateChan
	}
	return nil
}

func (x *EventBody) GetDestroyChan() *DestroyChan {
	if x != nil {
		return x.DestroyChan
	}
	return nil
}

func (x *EventBody) GetChangeChanInfo() *ChangeChanInfo {
	if x != nil {
		return x.ChangeChanInfo
	}
	return nil
}

func (x *EventBody) GetSetAdmin() *SetAdmin {
	if x != nil {
		return x.SetAdmin
	}
	return nil
}

func (x *EventBody) GetSetMsgRecvType() *SetMsgRecvType {
	if x != nil {
		return x.SetMsgRecvType
	}
	return nil
}

func (x *EventBody) GetUpdateMsg() *UpdateMsg {
	if x != nil {
		return x.UpdateMsg
	}
	return nil
}

func (x *EventBody) GetSetTop() *SetTop {
	if x != nil {
		return x.SetTop
	}
	return nil
}

func (x *EventBody) GetSwitchChannel() *SwitchVoiceChannel {
	if x != nil {
		return x.SwitchChannel
	}
	return nil
}

func (x *EventBody) GetUpdateCategory() *UpdateCategory {
	if x != nil {
		return x.UpdateCategory
	}
	return nil
}

func (x *EventBody) GetUpdateVoiceBlockList() *UpdateVoiceBlockList {
	if x != nil {
		return x.UpdateVoiceBlockList
	}
	return nil
}

func (x *EventBody) GetSetMute() *SetMute {
	if x != nil {
		return x.SetMute
	}
	return nil
}

func (x *EventBody) GetLiveStatusChangeRoom() *LiveRoomStatusChangeMsg {
	if x != nil {
		return x.LiveStatusChangeRoom
	}
	return nil
}

func (x *EventBody) GetSwitchLiveRoom() *SwitchLiveRoom {
	if x != nil {
		return x.SwitchLiveRoom
	}
	return nil
}

func (x *EventBody) GetEvents() []*MsgEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *EventBody) GetScheduler() *SchedulerMsg {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

func (x *EventBody) GetAppChannel() *AppChannelMsg {
	if x != nil {
		return x.AppChannel
	}
	return nil
}

func (x *EventBody) GetWeakMsgAppChannel() *AppChannelMsg {
	if x != nil {
		return x.WeakMsgAppChannel
	}
	return nil
}

type GroupProStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnable *uint32 `protobuf:"varint,1,opt,name=isEnable" json:"isEnable,omitempty"`
	IsBanned *uint32 `protobuf:"varint,2,opt,name=isBanned" json:"isBanned,omitempty"`
	IsFrozen *uint32 `protobuf:"varint,3,opt,name=isFrozen" json:"isFrozen,omitempty"`
}

func (x *GroupProStatus) Reset() {
	*x = GroupProStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupProStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupProStatus) ProtoMessage() {}

func (x *GroupProStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupProStatus.ProtoReflect.Descriptor instead.
func (*GroupProStatus) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{14}
}

func (x *GroupProStatus) GetIsEnable() uint32 {
	if x != nil && x.IsEnable != nil {
		return *x.IsEnable
	}
	return 0
}

func (x *GroupProStatus) GetIsBanned() uint32 {
	if x != nil && x.IsBanned != nil {
		return *x.IsBanned
	}
	return 0
}

func (x *GroupProStatus) GetIsFrozen() uint32 {
	if x != nil && x.IsFrozen != nil {
		return *x.IsFrozen
	}
	return 0
}

type GuildInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildCode          *uint64         `protobuf:"varint,2,opt,name=guildCode" json:"guildCode,omitempty"`
	OwnerId            *uint64         `protobuf:"varint,3,opt,name=ownerId" json:"ownerId,omitempty"`
	CreateTime         *uint64         `protobuf:"varint,4,opt,name=createTime" json:"createTime,omitempty"`
	MemberMaxNum       *uint32         `protobuf:"varint,5,opt,name=memberMaxNum" json:"memberMaxNum,omitempty"`
	MemberNum          *uint32         `protobuf:"varint,6,opt,name=memberNum" json:"memberNum,omitempty"`
	GuildType          *uint32         `protobuf:"varint,7,opt,name=guildType" json:"guildType,omitempty"`
	GuildName          []byte          `protobuf:"bytes,8,opt,name=guildName" json:"guildName,omitempty"`
	RobotList          []uint64        `protobuf:"varint,9,rep,name=robotList" json:"robotList,omitempty"`
	AdminList          []uint64        `protobuf:"varint,10,rep,name=adminList" json:"adminList,omitempty"`
	RobotMaxNum        *uint32         `protobuf:"varint,11,opt,name=robotMaxNum" json:"robotMaxNum,omitempty"`
	AdminMaxNum        *uint32         `protobuf:"varint,12,opt,name=adminMaxNum" json:"adminMaxNum,omitempty"`
	Profile            []byte          `protobuf:"bytes,13,opt,name=profile" json:"profile,omitempty"`
	FaceSeq            *uint64         `protobuf:"varint,14,opt,name=faceSeq" json:"faceSeq,omitempty"`
	GuildStatus        *GroupProStatus `protobuf:"bytes,15,opt,name=guildStatus" json:"guildStatus,omitempty"`
	ChannelNum         *uint32         `protobuf:"varint,16,opt,name=channelNum" json:"channelNum,omitempty"`
	MemberChangeSeq    *MsgSeq         `protobuf:"bytes,5002,opt,name=memberChangeSeq" json:"memberChangeSeq,omitempty"`
	GuildInfoChangeSeq *MsgSeq         `protobuf:"bytes,5003,opt,name=guildInfoChangeSeq" json:"guildInfoChangeSeq,omitempty"`
	ChannelChangeSeq   *MsgSeq         `protobuf:"bytes,5004,opt,name=channelChangeSeq" json:"channelChangeSeq,omitempty"`
}

func (x *GuildInfo) Reset() {
	*x = GuildInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildInfo) ProtoMessage() {}

func (x *GuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildInfo.ProtoReflect.Descriptor instead.
func (*GuildInfo) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{15}
}

func (x *GuildInfo) GetGuildCode() uint64 {
	if x != nil && x.GuildCode != nil {
		return *x.GuildCode
	}
	return 0
}

func (x *GuildInfo) GetOwnerId() uint64 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *GuildInfo) GetCreateTime() uint64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *GuildInfo) GetMemberMaxNum() uint32 {
	if x != nil && x.MemberMaxNum != nil {
		return *x.MemberMaxNum
	}
	return 0
}

func (x *GuildInfo) GetMemberNum() uint32 {
	if x != nil && x.MemberNum != nil {
		return *x.MemberNum
	}
	return 0
}

func (x *GuildInfo) GetGuildType() uint32 {
	if x != nil && x.GuildType != nil {
		return *x.GuildType
	}
	return 0
}

func (x *GuildInfo) GetGuildName() []byte {
	if x != nil {
		return x.GuildName
	}
	return nil
}

func (x *GuildInfo) GetRobotList() []uint64 {
	if x != nil {
		return x.RobotList
	}
	return nil
}

func (x *GuildInfo) GetAdminList() []uint64 {
	if x != nil {
		return x.AdminList
	}
	return nil
}

func (x *GuildInfo) GetRobotMaxNum() uint32 {
	if x != nil && x.RobotMaxNum != nil {
		return *x.RobotMaxNum
	}
	return 0
}

func (x *GuildInfo) GetAdminMaxNum() uint32 {
	if x != nil && x.AdminMaxNum != nil {
		return *x.AdminMaxNum
	}
	return 0
}

func (x *GuildInfo) GetProfile() []byte {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *GuildInfo) GetFaceSeq() uint64 {
	if x != nil && x.FaceSeq != nil {
		return *x.FaceSeq
	}
	return 0
}

func (x *GuildInfo) GetGuildStatus() *GroupProStatus {
	if x != nil {
		return x.GuildStatus
	}
	return nil
}

func (x *GuildInfo) GetChannelNum() uint32 {
	if x != nil && x.ChannelNum != nil {
		return *x.ChannelNum
	}
	return 0
}

func (x *GuildInfo) GetMemberChangeSeq() *MsgSeq {
	if x != nil {
		return x.MemberChangeSeq
	}
	return nil
}

func (x *GuildInfo) GetGuildInfoChangeSeq() *MsgSeq {
	if x != nil {
		return x.GuildInfoChangeSeq
	}
	return nil
}

func (x *GuildInfo) GetChannelChangeSeq() *MsgSeq {
	if x != nil {
		return x.ChannelChangeSeq
	}
	return nil
}

type GuildInfoFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildCode          *uint32 `protobuf:"varint,2,opt,name=guildCode" json:"guildCode,omitempty"`
	OwnerId            *uint32 `protobuf:"varint,3,opt,name=ownerId" json:"ownerId,omitempty"`
	CreateTime         *uint32 `protobuf:"varint,4,opt,name=createTime" json:"createTime,omitempty"`
	MemberMaxNum       *uint32 `protobuf:"varint,5,opt,name=memberMaxNum" json:"memberMaxNum,omitempty"`
	MemberNum          *uint32 `protobuf:"varint,6,opt,name=memberNum" json:"memberNum,omitempty"`
	GuildType          *uint32 `protobuf:"varint,7,opt,name=guildType" json:"guildType,omitempty"`
	GuildName          *uint32 `protobuf:"varint,8,opt,name=guildName" json:"guildName,omitempty"`
	RobotList          *uint32 `protobuf:"varint,9,opt,name=robotList" json:"robotList,omitempty"`
	AdminList          *uint32 `protobuf:"varint,10,opt,name=adminList" json:"adminList,omitempty"`
	RobotMaxNum        *uint32 `protobuf:"varint,11,opt,name=robotMaxNum" json:"robotMaxNum,omitempty"`
	AdminMaxNum        *uint32 `protobuf:"varint,12,opt,name=adminMaxNum" json:"adminMaxNum,omitempty"`
	Profile            *uint32 `protobuf:"varint,13,opt,name=profile" json:"profile,omitempty"`
	FaceSeq            *uint32 `protobuf:"varint,14,opt,name=faceSeq" json:"faceSeq,omitempty"`
	GuildStatus        *uint32 `protobuf:"varint,15,opt,name=guildStatus" json:"guildStatus,omitempty"`
	ChannelNum         *uint32 `protobuf:"varint,16,opt,name=channelNum" json:"channelNum,omitempty"`
	MemberChangeSeq    *uint32 `protobuf:"varint,5002,opt,name=memberChangeSeq" json:"memberChangeSeq,omitempty"`
	GuildInfoChangeSeq *uint32 `protobuf:"varint,5003,opt,name=guildInfoChangeSeq" json:"guildInfoChangeSeq,omitempty"`
	ChannelChangeSeq   *uint32 `protobuf:"varint,5004,opt,name=channelChangeSeq" json:"channelChangeSeq,omitempty"`
}

func (x *GuildInfoFilter) Reset() {
	*x = GuildInfoFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildInfoFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildInfoFilter) ProtoMessage() {}

func (x *GuildInfoFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildInfoFilter.ProtoReflect.Descriptor instead.
func (*GuildInfoFilter) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{16}
}

func (x *GuildInfoFilter) GetGuildCode() uint32 {
	if x != nil && x.GuildCode != nil {
		return *x.GuildCode
	}
	return 0
}

func (x *GuildInfoFilter) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *GuildInfoFilter) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *GuildInfoFilter) GetMemberMaxNum() uint32 {
	if x != nil && x.MemberMaxNum != nil {
		return *x.MemberMaxNum
	}
	return 0
}

func (x *GuildInfoFilter) GetMemberNum() uint32 {
	if x != nil && x.MemberNum != nil {
		return *x.MemberNum
	}
	return 0
}

func (x *GuildInfoFilter) GetGuildType() uint32 {
	if x != nil && x.GuildType != nil {
		return *x.GuildType
	}
	return 0
}

func (x *GuildInfoFilter) GetGuildName() uint32 {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return 0
}

func (x *GuildInfoFilter) GetRobotList() uint32 {
	if x != nil && x.RobotList != nil {
		return *x.RobotList
	}
	return 0
}

func (x *GuildInfoFilter) GetAdminList() uint32 {
	if x != nil && x.AdminList != nil {
		return *x.AdminList
	}
	return 0
}

func (x *GuildInfoFilter) GetRobotMaxNum() uint32 {
	if x != nil && x.RobotMaxNum != nil {
		return *x.RobotMaxNum
	}
	return 0
}

func (x *GuildInfoFilter) GetAdminMaxNum() uint32 {
	if x != nil && x.AdminMaxNum != nil {
		return *x.AdminMaxNum
	}
	return 0
}

func (x *GuildInfoFilter) GetProfile() uint32 {
	if x != nil && x.Profile != nil {
		return *x.Profile
	}
	return 0
}

func (x *GuildInfoFilter) GetFaceSeq() uint32 {
	if x != nil && x.FaceSeq != nil {
		return *x.FaceSeq
	}
	return 0
}

func (x *GuildInfoFilter) GetGuildStatus() uint32 {
	if x != nil && x.GuildStatus != nil {
		return *x.GuildStatus
	}
	return 0
}

func (x *GuildInfoFilter) GetChannelNum() uint32 {
	if x != nil && x.ChannelNum != nil {
		return *x.ChannelNum
	}
	return 0
}

func (x *GuildInfoFilter) GetMemberChangeSeq() uint32 {
	if x != nil && x.MemberChangeSeq != nil {
		return *x.MemberChangeSeq
	}
	return 0
}

func (x *GuildInfoFilter) GetGuildInfoChangeSeq() uint32 {
	if x != nil && x.GuildInfoChangeSeq != nil {
		return *x.GuildInfoChangeSeq
	}
	return 0
}

func (x *GuildInfoFilter) GetChannelChangeSeq() uint32 {
	if x != nil && x.ChannelChangeSeq != nil {
		return *x.ChannelChangeSeq
	}
	return 0
}

type JoinGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId     *uint64 `protobuf:"varint,3,opt,name=memberId" json:"memberId,omitempty"`
	MemberType   *uint32 `protobuf:"varint,4,opt,name=memberType" json:"memberType,omitempty"`
	MemberTinyid *uint64 `protobuf:"varint,5,opt,name=memberTinyid" json:"memberTinyid,omitempty"`
}

func (x *JoinGuild) Reset() {
	*x = JoinGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGuild) ProtoMessage() {}

func (x *JoinGuild) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGuild.ProtoReflect.Descriptor instead.
func (*JoinGuild) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{17}
}

func (x *JoinGuild) GetMemberId() uint64 {
	if x != nil && x.MemberId != nil {
		return *x.MemberId
	}
	return 0
}

func (x *JoinGuild) GetMemberType() uint32 {
	if x != nil && x.MemberType != nil {
		return *x.MemberType
	}
	return 0
}

func (x *JoinGuild) GetMemberTinyid() uint64 {
	if x != nil && x.MemberTinyid != nil {
		return *x.MemberTinyid
	}
	return 0
}

type KickOffGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId     *uint64 `protobuf:"varint,3,opt,name=memberId" json:"memberId,omitempty"`
	SetBlack     *uint32 `protobuf:"varint,4,opt,name=setBlack" json:"setBlack,omitempty"`
	MemberTinyid *uint64 `protobuf:"varint,5,opt,name=memberTinyid" json:"memberTinyid,omitempty"`
}

func (x *KickOffGuild) Reset() {
	*x = KickOffGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickOffGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickOffGuild) ProtoMessage() {}

func (x *KickOffGuild) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickOffGuild.ProtoReflect.Descriptor instead.
func (*KickOffGuild) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{18}
}

func (x *KickOffGuild) GetMemberId() uint64 {
	if x != nil && x.MemberId != nil {
		return *x.MemberId
	}
	return 0
}

func (x *KickOffGuild) GetSetBlack() uint32 {
	if x != nil && x.SetBlack != nil {
		return *x.SetBlack
	}
	return 0
}

func (x *KickOffGuild) GetMemberTinyid() uint64 {
	if x != nil && x.MemberTinyid != nil {
		return *x.MemberTinyid
	}
	return 0
}

type LiveChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId    *uint64 `protobuf:"varint,1,opt,name=roomId" json:"roomId,omitempty"`
	AnchorUin *uint64 `protobuf:"varint,2,opt,name=anchorUin" json:"anchorUin,omitempty"`
	Name      []byte  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *LiveChannelInfo) Reset() {
	*x = LiveChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChannelInfo) ProtoMessage() {}

func (x *LiveChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChannelInfo.ProtoReflect.Descriptor instead.
func (*LiveChannelInfo) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{19}
}

func (x *LiveChannelInfo) GetRoomId() uint64 {
	if x != nil && x.RoomId != nil {
		return *x.RoomId
	}
	return 0
}

func (x *LiveChannelInfo) GetAnchorUin() uint64 {
	if x != nil && x.AnchorUin != nil {
		return *x.AnchorUin
	}
	return 0
}

func (x *LiveChannelInfo) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

type LiveChannelInfoFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNeedRoomId    *uint32 `protobuf:"varint,1,opt,name=isNeedRoomId" json:"isNeedRoomId,omitempty"`
	IsNeedAnchorUin *uint32 `protobuf:"varint,2,opt,name=isNeedAnchorUin" json:"isNeedAnchorUin,omitempty"`
	IsNeedName      *uint32 `protobuf:"varint,3,opt,name=isNeedName" json:"isNeedName,omitempty"`
}

func (x *LiveChannelInfoFilter) Reset() {
	*x = LiveChannelInfoFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveChannelInfoFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveChannelInfoFilter) ProtoMessage() {}

func (x *LiveChannelInfoFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveChannelInfoFilter.ProtoReflect.Descriptor instead.
func (*LiveChannelInfoFilter) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{20}
}

func (x *LiveChannelInfoFilter) GetIsNeedRoomId() uint32 {
	if x != nil && x.IsNeedRoomId != nil {
		return *x.IsNeedRoomId
	}
	return 0
}

func (x *LiveChannelInfoFilter) GetIsNeedAnchorUin() uint32 {
	if x != nil && x.IsNeedAnchorUin != nil {
		return *x.IsNeedAnchorUin
	}
	return 0
}

func (x *LiveChannelInfoFilter) GetIsNeedName() uint32 {
	if x != nil && x.IsNeedName != nil {
		return *x.IsNeedName
	}
	return 0
}

type LiveRoomStatusChangeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId      *uint64 `protobuf:"varint,1,opt,name=guildId" json:"guildId,omitempty"`
	ChannelId    *uint64 `protobuf:"varint,2,opt,name=channelId" json:"channelId,omitempty"`
	RoomId       *uint64 `protobuf:"varint,3,opt,name=roomId" json:"roomId,omitempty"`
	AnchorTinyid *uint64 `protobuf:"varint,4,opt,name=anchorTinyid" json:"anchorTinyid,omitempty"`
	Action       *uint32 `protobuf:"varint,5,opt,name=action" json:"action,omitempty"`
}

func (x *LiveRoomStatusChangeMsg) Reset() {
	*x = LiveRoomStatusChangeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveRoomStatusChangeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveRoomStatusChangeMsg) ProtoMessage() {}

func (x *LiveRoomStatusChangeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveRoomStatusChangeMsg.ProtoReflect.Descriptor instead.
func (*LiveRoomStatusChangeMsg) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{21}
}

func (x *LiveRoomStatusChangeMsg) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *LiveRoomStatusChangeMsg) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *LiveRoomStatusChangeMsg) GetRoomId() uint64 {
	if x != nil && x.RoomId != nil {
		return *x.RoomId
	}
	return 0
}

func (x *LiveRoomStatusChangeMsg) GetAnchorTinyid() uint64 {
	if x != nil && x.AnchorTinyid != nil {
		return *x.AnchorTinyid
	}
	return 0
}

func (x *LiveRoomStatusChangeMsg) GetAction() uint32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

type MsgEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq          *uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	EventType    *uint64 `protobuf:"varint,2,opt,name=eventType" json:"eventType,omitempty"`
	EventVersion *uint64 `protobuf:"varint,3,opt,name=eventVersion" json:"eventVersion,omitempty"`
}

func (x *MsgEvent) Reset() {
	*x = MsgEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgEvent) ProtoMessage() {}

func (x *MsgEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgEvent.ProtoReflect.Descriptor instead.
func (*MsgEvent) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{22}
}

func (x *MsgEvent) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *MsgEvent) GetEventType() uint64 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *MsgEvent) GetEventVersion() uint64 {
	if x != nil && x.EventVersion != nil {
		return *x.EventVersion
	}
	return 0
}

type MsgSeq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq  *uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Time *uint64 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
}

func (x *MsgSeq) Reset() {
	*x = MsgSeq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSeq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSeq) ProtoMessage() {}

func (x *MsgSeq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSeq.ProtoReflect.Descriptor instead.
func (*MsgSeq) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{23}
}

func (x *MsgSeq) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *MsgSeq) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type QuitGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuitGuild) Reset() {
	*x = QuitGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitGuild) ProtoMessage() {}

func (x *QuitGuild) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitGuild.ProtoReflect.Descriptor instead.
func (*QuitGuild) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{24}
}

type ReadNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId     *uint64 `protobuf:"varint,1,opt,name=channelId" json:"channelId,omitempty"`
	GuildId       *uint64 `protobuf:"varint,2,opt,name=guildId" json:"guildId,omitempty"`
	ReadMsgSeq    *MsgSeq `protobuf:"bytes,3,opt,name=readMsgSeq" json:"readMsgSeq,omitempty"`
	ReadCntMsgSeq *MsgSeq `protobuf:"bytes,4,opt,name=readCntMsgSeq" json:"readCntMsgSeq,omitempty"`
	ReadMsgMeta   []byte  `protobuf:"bytes,5,opt,name=readMsgMeta" json:"readMsgMeta,omitempty"`
}

func (x *ReadNotify) Reset() {
	*x = ReadNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadNotify) ProtoMessage() {}

func (x *ReadNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadNotify.ProtoReflect.Descriptor instead.
func (*ReadNotify) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{25}
}

func (x *ReadNotify) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *ReadNotify) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *ReadNotify) GetReadMsgSeq() *MsgSeq {
	if x != nil {
		return x.ReadMsgSeq
	}
	return nil
}

func (x *ReadNotify) GetReadCntMsgSeq() *MsgSeq {
	if x != nil {
		return x.ReadCntMsgSeq
	}
	return nil
}

func (x *ReadNotify) GetReadMsgMeta() []byte {
	if x != nil {
		return x.ReadMsgMeta
	}
	return nil
}

type SchedulerMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatorHeadUrl []byte  `protobuf:"bytes,1,opt,name=creatorHeadUrl" json:"creatorHeadUrl,omitempty"`
	Wording        *string `protobuf:"bytes,2,opt,name=wording" json:"wording,omitempty"`
	ExpireTimeMs   *uint64 `protobuf:"varint,3,opt,name=expireTimeMs" json:"expireTimeMs,omitempty"`
}

func (x *SchedulerMsg) Reset() {
	*x = SchedulerMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerMsg) ProtoMessage() {}

func (x *SchedulerMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerMsg.ProtoReflect.Descriptor instead.
func (*SchedulerMsg) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{26}
}

func (x *SchedulerMsg) GetCreatorHeadUrl() []byte {
	if x != nil {
		return x.CreatorHeadUrl
	}
	return nil
}

func (x *SchedulerMsg) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

func (x *SchedulerMsg) GetExpireTimeMs() uint64 {
	if x != nil && x.ExpireTimeMs != nil {
		return *x.ExpireTimeMs
	}
	return 0
}

type SetAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId     *uint64 `protobuf:"varint,1,opt,name=guildId" json:"guildId,omitempty"`
	ChanId      *uint64 `protobuf:"varint,2,opt,name=chanId" json:"chanId,omitempty"`
	OperatorId  *uint64 `protobuf:"varint,3,opt,name=operatorId" json:"operatorId,omitempty"`
	AdminId     *uint64 `protobuf:"varint,4,opt,name=adminId" json:"adminId,omitempty"`
	AdminTinyid *uint64 `protobuf:"varint,5,opt,name=adminTinyid" json:"adminTinyid,omitempty"`
	OperateType *uint32 `protobuf:"varint,6,opt,name=operateType" json:"operateType,omitempty"`
}

func (x *SetAdmin) Reset() {
	*x = SetAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAdmin) ProtoMessage() {}

func (x *SetAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAdmin.ProtoReflect.Descriptor instead.
func (*SetAdmin) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{27}
}

func (x *SetAdmin) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *SetAdmin) GetChanId() uint64 {
	if x != nil && x.ChanId != nil {
		return *x.ChanId
	}
	return 0
}

func (x *SetAdmin) GetOperatorId() uint64 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *SetAdmin) GetAdminId() uint64 {
	if x != nil && x.AdminId != nil {
		return *x.AdminId
	}
	return 0
}

func (x *SetAdmin) GetAdminTinyid() uint64 {
	if x != nil && x.AdminTinyid != nil {
		return *x.AdminTinyid
	}
	return 0
}

func (x *SetAdmin) GetOperateType() uint32 {
	if x != nil && x.OperateType != nil {
		return *x.OperateType
	}
	return 0
}

type SetMsgRecvType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId       *uint64 `protobuf:"varint,1,opt,name=guildId" json:"guildId,omitempty"`
	ChanId        *uint64 `protobuf:"varint,2,opt,name=chanId" json:"chanId,omitempty"`
	OperatorId    *uint64 `protobuf:"varint,3,opt,name=operatorId" json:"operatorId,omitempty"`
	MsgNotifyType *uint32 `protobuf:"varint,4,opt,name=msgNotifyType" json:"msgNotifyType,omitempty"`
}

func (x *SetMsgRecvType) Reset() {
	*x = SetMsgRecvType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMsgRecvType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMsgRecvType) ProtoMessage() {}

func (x *SetMsgRecvType) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMsgRecvType.ProtoReflect.Descriptor instead.
func (*SetMsgRecvType) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{28}
}

func (x *SetMsgRecvType) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *SetMsgRecvType) GetChanId() uint64 {
	if x != nil && x.ChanId != nil {
		return *x.ChanId
	}
	return 0
}

func (x *SetMsgRecvType) GetOperatorId() uint64 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *SetMsgRecvType) GetMsgNotifyType() uint32 {
	if x != nil && x.MsgNotifyType != nil {
		return *x.MsgNotifyType
	}
	return 0
}

type SetMute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *uint32 `protobuf:"varint,1,opt,name=action" json:"action,omitempty"`
	TinyID *uint64 `protobuf:"varint,2,opt,name=tinyID" json:"tinyID,omitempty"`
}

func (x *SetMute) Reset() {
	*x = SetMute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMute) ProtoMessage() {}

func (x *SetMute) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMute.ProtoReflect.Descriptor instead.
func (*SetMute) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{29}
}

func (x *SetMute) GetAction() uint32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

func (x *SetMute) GetTinyID() uint64 {
	if x != nil && x.TinyID != nil {
		return *x.TinyID
	}
	return 0
}

type SetTop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *uint32 `protobuf:"varint,1,opt,name=action" json:"action,omitempty"`
}

func (x *SetTop) Reset() {
	*x = SetTop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTop) ProtoMessage() {}

func (x *SetTop) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTop.ProtoReflect.Descriptor instead.
func (*SetTop) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{30}
}

func (x *SetTop) GetAction() uint32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

type SwitchDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId   *uint64 `protobuf:"varint,1,opt,name=guildId" json:"guildId,omitempty"`
	ChannelId *uint64 `protobuf:"varint,2,opt,name=channelId" json:"channelId,omitempty"`
	Platform  *uint32 `protobuf:"varint,3,opt,name=platform" json:"platform,omitempty"`
}

func (x *SwitchDetail) Reset() {
	*x = SwitchDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchDetail) ProtoMessage() {}

func (x *SwitchDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchDetail.ProtoReflect.Descriptor instead.
func (*SwitchDetail) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{31}
}

func (x *SwitchDetail) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *SwitchDetail) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *SwitchDetail) GetPlatform() uint32 {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return 0
}

type SwitchLiveRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId   *uint64 `protobuf:"varint,1,opt,name=guildId" json:"guildId,omitempty"`
	ChannelId *uint64 `protobuf:"varint,2,opt,name=channelId" json:"channelId,omitempty"`
	RoomId    *uint64 `protobuf:"varint,3,opt,name=roomId" json:"roomId,omitempty"`
	Tinyid    *uint64 `protobuf:"varint,4,opt,name=tinyid" json:"tinyid,omitempty"`
	Action    *uint32 `protobuf:"varint,5,opt,name=action" json:"action,omitempty"`
}

func (x *SwitchLiveRoom) Reset() {
	*x = SwitchLiveRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchLiveRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchLiveRoom) ProtoMessage() {}

func (x *SwitchLiveRoom) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchLiveRoom.ProtoReflect.Descriptor instead.
func (*SwitchLiveRoom) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{32}
}

func (x *SwitchLiveRoom) GetGuildId() uint64 {
	if x != nil && x.GuildId != nil {
		return *x.GuildId
	}
	return 0
}

func (x *SwitchLiveRoom) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *SwitchLiveRoom) GetRoomId() uint64 {
	if x != nil && x.RoomId != nil {
		return *x.RoomId
	}
	return 0
}

func (x *SwitchLiveRoom) GetTinyid() uint64 {
	if x != nil && x.Tinyid != nil {
		return *x.Tinyid
	}
	return 0
}

func (x *SwitchLiveRoom) GetAction() uint32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

type SwitchVoiceChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId    *uint64       `protobuf:"varint,1,opt,name=memberId" json:"memberId,omitempty"`
	EnterDetail *SwitchDetail `protobuf:"bytes,2,opt,name=enterDetail" json:"enterDetail,omitempty"`
	LeaveDetail *SwitchDetail `protobuf:"bytes,3,opt,name=leaveDetail" json:"leaveDetail,omitempty"`
}

func (x *SwitchVoiceChannel) Reset() {
	*x = SwitchVoiceChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchVoiceChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchVoiceChannel) ProtoMessage() {}

func (x *SwitchVoiceChannel) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchVoiceChannel.ProtoReflect.Descriptor instead.
func (*SwitchVoiceChannel) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{33}
}

func (x *SwitchVoiceChannel) GetMemberId() uint64 {
	if x != nil && x.MemberId != nil {
		return *x.MemberId
	}
	return 0
}

func (x *SwitchVoiceChannel) GetEnterDetail() *SwitchDetail {
	if x != nil {
		return x.EnterDetail
	}
	return nil
}

func (x *SwitchVoiceChannel) GetLeaveDetail() *SwitchDetail {
	if x != nil {
		return x.LeaveDetail
	}
	return nil
}

type UpdateCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryInfo           []*CategoryInfo `protobuf:"bytes,1,rep,name=categoryInfo" json:"categoryInfo,omitempty"`
	NoClassifyCategoryInfo *CategoryInfo   `protobuf:"bytes,2,opt,name=noClassifyCategoryInfo" json:"noClassifyCategoryInfo,omitempty"`
}

func (x *UpdateCategory) Reset() {
	*x = UpdateCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategory) ProtoMessage() {}

func (x *UpdateCategory) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategory.ProtoReflect.Descriptor instead.
func (*UpdateCategory) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateCategory) GetCategoryInfo() []*CategoryInfo {
	if x != nil {
		return x.CategoryInfo
	}
	return nil
}

func (x *UpdateCategory) GetNoClassifyCategoryInfo() *CategoryInfo {
	if x != nil {
		return x.NoClassifyCategoryInfo
	}
	return nil
}

type UpdateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgSeq             *uint64 `protobuf:"varint,1,opt,name=msgSeq" json:"msgSeq,omitempty"`
	OrigMsgUncountable *bool   `protobuf:"varint,2,opt,name=origMsgUncountable" json:"origMsgUncountable,omitempty"`
	EventType          *uint64 `protobuf:"varint,3,opt,name=eventType" json:"eventType,omitempty"`
	EventVersion       *uint64 `protobuf:"varint,4,opt,name=eventVersion" json:"eventVersion,omitempty"`
	OperatorTinyid     *uint64 `protobuf:"varint,5,opt,name=operatorTinyid" json:"operatorTinyid,omitempty"`
	OperatorRole       *uint64 `protobuf:"varint,6,opt,name=operatorRole" json:"operatorRole,omitempty"`
	Reason             *uint64 `protobuf:"varint,7,opt,name=reason" json:"reason,omitempty"`
	Timestamp          *uint64 `protobuf:"varint,8,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *UpdateMsg) Reset() {
	*x = UpdateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMsg) ProtoMessage() {}

func (x *UpdateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMsg.ProtoReflect.Descriptor instead.
func (*UpdateMsg) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateMsg) GetMsgSeq() uint64 {
	if x != nil && x.MsgSeq != nil {
		return *x.MsgSeq
	}
	return 0
}

func (x *UpdateMsg) GetOrigMsgUncountable() bool {
	if x != nil && x.OrigMsgUncountable != nil {
		return *x.OrigMsgUncountable
	}
	return false
}

func (x *UpdateMsg) GetEventType() uint64 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *UpdateMsg) GetEventVersion() uint64 {
	if x != nil && x.EventVersion != nil {
		return *x.EventVersion
	}
	return 0
}

func (x *UpdateMsg) GetOperatorTinyid() uint64 {
	if x != nil && x.OperatorTinyid != nil {
		return *x.OperatorTinyid
	}
	return 0
}

func (x *UpdateMsg) GetOperatorRole() uint64 {
	if x != nil && x.OperatorRole != nil {
		return *x.OperatorRole
	}
	return 0
}

func (x *UpdateMsg) GetReason() uint64 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

func (x *UpdateMsg) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type UpdateVoiceBlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action       *uint32 `protobuf:"varint,1,opt,name=action" json:"action,omitempty"`
	ObjectTinyid *uint64 `protobuf:"varint,2,opt,name=objectTinyid" json:"objectTinyid,omitempty"`
}

func (x *UpdateVoiceBlockList) Reset() {
	*x = UpdateVoiceBlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVoiceBlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVoiceBlockList) ProtoMessage() {}

func (x *UpdateVoiceBlockList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVoiceBlockList.ProtoReflect.Descriptor instead.
func (*UpdateVoiceBlockList) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateVoiceBlockList) GetAction() uint32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

func (x *UpdateVoiceBlockList) GetObjectTinyid() uint64 {
	if x != nil && x.ObjectTinyid != nil {
		return *x.ObjectTinyid
	}
	return 0
}

type VoiceChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberMaxNum *uint32 `protobuf:"varint,1,opt,name=memberMaxNum" json:"memberMaxNum,omitempty"`
}

func (x *VoiceChannelInfo) Reset() {
	*x = VoiceChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceChannelInfo) ProtoMessage() {}

func (x *VoiceChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceChannelInfo.ProtoReflect.Descriptor instead.
func (*VoiceChannelInfo) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{37}
}

func (x *VoiceChannelInfo) GetMemberMaxNum() uint32 {
	if x != nil && x.MemberMaxNum != nil {
		return *x.MemberMaxNum
	}
	return 0
}

type VoiceChannelInfoFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberMaxNum *uint32 `protobuf:"varint,1,opt,name=memberMaxNum" json:"memberMaxNum,omitempty"`
}

func (x *VoiceChannelInfoFilter) Reset() {
	*x = VoiceChannelInfoFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceChannelInfoFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceChannelInfoFilter) ProtoMessage() {}

func (x *VoiceChannelInfoFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceChannelInfoFilter.ProtoReflect.Descriptor instead.
func (*VoiceChannelInfoFilter) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{38}
}

func (x *VoiceChannelInfoFilter) GetMemberMaxNum() uint32 {
	if x != nil && x.MemberMaxNum != nil {
		return *x.MemberMaxNum
	}
	return 0
}

type CommGrayTips_TemplParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  []byte `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CommGrayTips_TemplParam) Reset() {
	*x = CommGrayTips_TemplParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_servtype_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommGrayTips_TemplParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommGrayTips_TemplParam) ProtoMessage() {}

func (x *CommGrayTips_TemplParam) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_servtype_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommGrayTips_TemplParam.ProtoReflect.Descriptor instead.
func (*CommGrayTips_TemplParam) Descriptor() ([]byte, []int) {
	return file_pb_channel_servtype_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CommGrayTips_TemplParam) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CommGrayTips_TemplParam) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_pb_channel_servtype_proto protoreflect.FileDescriptor

var file_pb_channel_servtype_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x62, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x57,
	0x0a, 0x13, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x93, 0x04, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x73, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x71, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x71, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x57, 0x0a, 0x16, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x54, 0x0a, 0x15, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x15, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x53, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x22, 0xa4, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x07, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x52,
	0x07, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xb7, 0x02, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x07, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x52,
	0x07, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x53, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x53, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x23, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xb0,
	0x04, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x73,
	0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6d, 0x73, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x71, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x35, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x71, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x53, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x10, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0f, 0x6c,
	0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x6c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x22, 0xc6, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x47, 0x72, 0x61, 0x79, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x75, 0x73, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x62, 0x75, 0x73, 0x69, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x74, 0x72, 0x6c, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x74, 0x72, 0x6c, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x47,
	0x72, 0x61, 0x79, 0x54, 0x69, 0x70, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x70, 0x73,
	0x53, 0x65, 0x71, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x70,
	0x73, 0x53, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x1a, 0x36, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x76, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x22, 0x47, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xc2,
	0x0b, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x33, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x47, 0x72, 0x61, 0x79, 0x54, 0x69, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x47, 0x72, 0x61, 0x79, 0x54, 0x69, 0x70, 0x73, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x47, 0x72, 0x61, 0x79, 0x54, 0x69, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x30, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x12, 0x39, 0x0a, 0x0c, 0x6b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x0c,
	0x6b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x09,
	0x71, 0x75, 0x69, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x09, 0x71, 0x75, 0x69, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x42,
	0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x12,
	0x3f, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2d, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x3f, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x76, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x76, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x76, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x52, 0x06, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x12, 0x41, 0x0a, 0x0d, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3f,
	0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x51, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x74, 0x65, 0x52, 0x07, 0x73, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x54,
	0x0a, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x14,
	0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x33, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x44, 0x0a,
	0x11, 0x77, 0x65, 0x61, 0x6b, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x73, 0x67,
	0x52, 0x11, 0x77, 0x65, 0x61, 0x6b, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x64, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x22, 0xac, 0x05, 0x0a, 0x09, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78,
	0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x53,
	0x65, 0x71, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x53, 0x65,
	0x71, 0x12, 0x39, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x0f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x18,
	0x8a, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x12, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x18, 0x8b,
	0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x52, 0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x10, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x18, 0x8c,
	0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x22, 0xe6, 0x04, 0x0a, 0x0f, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61,
	0x78, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x4e,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x61, 0x63, 0x65, 0x53, 0x65, 0x71, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66,
	0x61, 0x63, 0x65, 0x53, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x18, 0x8a, 0x27, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x18, 0x8b, 0x27, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x18, 0x8c, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65,
	0x71, 0x22, 0x6b, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x22, 0x6a,
	0x0a, 0x0c, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x54, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x0f, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x55,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x55, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x55, 0x69, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xa5, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x06, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x0b, 0x0a, 0x09, 0x51, 0x75, 0x69, 0x74, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x0d,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x73,
	0x67, 0x53, 0x65, 0x71, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x4d, 0x65,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x73,
	0x67, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x08,
	0x53, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6e,
	0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x73, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x73, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6e, 0x79, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x69, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x20,
	0x0a, 0x06, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x62, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6e, 0x79, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x37, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x9a, 0x01, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x39, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x16, 0x6e, 0x6f,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x16, 0x6e, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x97, 0x02, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x53, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12,
	0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6f, 0x72, 0x69,
	0x67, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6e,
	0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x52, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6e,
	0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6e, 0x79, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x10, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x22,
	0x3c, 0x0a, 0x16, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x42, 0x14, 0x5a,
	0x12, 0x70, 0x62, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c,
}

var (
	file_pb_channel_servtype_proto_rawDescOnce sync.Once
	file_pb_channel_servtype_proto_rawDescData = file_pb_channel_servtype_proto_rawDesc
)

func file_pb_channel_servtype_proto_rawDescGZIP() []byte {
	file_pb_channel_servtype_proto_rawDescOnce.Do(func() {
		file_pb_channel_servtype_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_channel_servtype_proto_rawDescData)
	})
	return file_pb_channel_servtype_proto_rawDescData
}

var file_pb_channel_servtype_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_pb_channel_servtype_proto_goTypes = []interface{}{
	(*AppChannelMsg)(nil),           // 0: channel.AppChannelMsg
	(*CategoryChannelInfo)(nil),     // 1: channel.CategoryChannelInfo
	(*CategoryInfo)(nil),            // 2: channel.CategoryInfo
	(*ChanInfoFilter)(nil),          // 3: channel.ChanInfoFilter
	(*ChangeChanInfo)(nil),          // 4: channel.ChangeChanInfo
	(*ChangeGuildInfo)(nil),         // 5: channel.ChangeGuildInfo
	(*ChannelID)(nil),               // 6: channel.ChannelID
	(*ServChannelInfo)(nil),         // 7: channel.ServChannelInfo
	(*CommGrayTips)(nil),            // 8: channel.CommGrayTips
	(*CreateChan)(nil),              // 9: channel.CreateChan
	(*CreateGuild)(nil),             // 10: channel.CreateGuild
	(*DestroyChan)(nil),             // 11: channel.DestroyChan
	(*DestroyGuild)(nil),            // 12: channel.DestroyGuild
	(*EventBody)(nil),               // 13: channel.EventBody
	(*GroupProStatus)(nil),          // 14: channel.GroupProStatus
	(*GuildInfo)(nil),               // 15: channel.GuildInfo
	(*GuildInfoFilter)(nil),         // 16: channel.GuildInfoFilter
	(*JoinGuild)(nil),               // 17: channel.JoinGuild
	(*KickOffGuild)(nil),            // 18: channel.KickOffGuild
	(*LiveChannelInfo)(nil),         // 19: channel.LiveChannelInfo
	(*LiveChannelInfoFilter)(nil),   // 20: channel.LiveChannelInfoFilter
	(*LiveRoomStatusChangeMsg)(nil), // 21: channel.LiveRoomStatusChangeMsg
	(*MsgEvent)(nil),                // 22: channel.MsgEvent
	(*MsgSeq)(nil),                  // 23: channel.MsgSeq
	(*QuitGuild)(nil),               // 24: channel.QuitGuild
	(*ReadNotify)(nil),              // 25: channel.ReadNotify
	(*SchedulerMsg)(nil),            // 26: channel.SchedulerMsg
	(*SetAdmin)(nil),                // 27: channel.SetAdmin
	(*SetMsgRecvType)(nil),          // 28: channel.SetMsgRecvType
	(*SetMute)(nil),                 // 29: channel.SetMute
	(*SetTop)(nil),                  // 30: channel.SetTop
	(*SwitchDetail)(nil),            // 31: channel.SwitchDetail
	(*SwitchLiveRoom)(nil),          // 32: channel.SwitchLiveRoom
	(*SwitchVoiceChannel)(nil),      // 33: channel.SwitchVoiceChannel
	(*UpdateCategory)(nil),          // 34: channel.UpdateCategory
	(*UpdateMsg)(nil),               // 35: channel.UpdateMsg
	(*UpdateVoiceBlockList)(nil),    // 36: channel.UpdateVoiceBlockList
	(*VoiceChannelInfo)(nil),        // 37: channel.VoiceChannelInfo
	(*VoiceChannelInfoFilter)(nil),  // 38: channel.VoiceChannelInfoFilter
	(*CommGrayTips_TemplParam)(nil), // 39: channel.CommGrayTips.TemplParam
}
var file_pb_channel_servtype_proto_depIdxs = []int32{
	1,  // 0: channel.CategoryInfo.channelInfo:type_name -> channel.CategoryChannelInfo
	38, // 1: channel.ChanInfoFilter.voiceChannelInfoFilter:type_name -> channel.VoiceChannelInfoFilter
	20, // 2: channel.ChanInfoFilter.liveChannelInfoFilter:type_name -> channel.LiveChannelInfoFilter
	23, // 3: channel.ChangeChanInfo.infoSeq:type_name -> channel.MsgSeq
	3,  // 4: channel.ChangeChanInfo.chanInfoFilter:type_name -> channel.ChanInfoFilter
	7,  // 5: channel.ChangeChanInfo.chanInfo:type_name -> channel.ServChannelInfo
	23, // 6: channel.ChangeGuildInfo.infoSeq:type_name -> channel.MsgSeq
	23, // 7: channel.ChangeGuildInfo.faceSeq:type_name -> channel.MsgSeq
	16, // 8: channel.ChangeGuildInfo.guildInfoFilter:type_name -> channel.GuildInfoFilter
	15, // 9: channel.ChangeGuildInfo.guildInfo:type_name -> channel.GuildInfo
	23, // 10: channel.ServChannelInfo.lastMsgSeq:type_name -> channel.MsgSeq
	23, // 11: channel.ServChannelInfo.lastCntMsgSeq:type_name -> channel.MsgSeq
	37, // 12: channel.ServChannelInfo.voiceChannelInfo:type_name -> channel.VoiceChannelInfo
	19, // 13: channel.ServChannelInfo.liveChannelInfo:type_name -> channel.LiveChannelInfo
	39, // 14: channel.CommGrayTips.templParam:type_name -> channel.CommGrayTips.TemplParam
	6,  // 15: channel.CreateChan.createId:type_name -> channel.ChannelID
	6,  // 16: channel.DestroyChan.deleteId:type_name -> channel.ChannelID
	25, // 17: channel.EventBody.readNotify:type_name -> channel.ReadNotify
	8,  // 18: channel.EventBody.commGrayTips:type_name -> channel.CommGrayTips
	10, // 19: channel.EventBody.createGuild:type_name -> channel.CreateGuild
	12, // 20: channel.EventBody.destroyGuild:type_name -> channel.DestroyGuild
	17, // 21: channel.EventBody.joinGuild:type_name -> channel.JoinGuild
	18, // 22: channel.EventBody.kickOffGuild:type_name -> channel.KickOffGuild
	24, // 23: channel.EventBody.quitGuild:type_name -> channel.QuitGuild
	5,  // 24: channel.EventBody.changeGuildInfo:type_name -> channel.ChangeGuildInfo
	9,  // 25: channel.EventBody.createChan:type_name -> channel.CreateChan
	11, // 26: channel.EventBody.destroyChan:type_name -> channel.DestroyChan
	4,  // 27: channel.EventBody.changeChanInfo:type_name -> channel.ChangeChanInfo
	27, // 28: channel.EventBody.setAdmin:type_name -> channel.SetAdmin
	28, // 29: channel.EventBody.setMsgRecvType:type_name -> channel.SetMsgRecvType
	35, // 30: channel.EventBody.updateMsg:type_name -> channel.UpdateMsg
	30, // 31: channel.EventBody.setTop:type_name -> channel.SetTop
	33, // 32: channel.EventBody.switchChannel:type_name -> channel.SwitchVoiceChannel
	34, // 33: channel.EventBody.updateCategory:type_name -> channel.UpdateCategory
	36, // 34: channel.EventBody.updateVoiceBlockList:type_name -> channel.UpdateVoiceBlockList
	29, // 35: channel.EventBody.setMute:type_name -> channel.SetMute
	21, // 36: channel.EventBody.liveStatusChangeRoom:type_name -> channel.LiveRoomStatusChangeMsg
	32, // 37: channel.EventBody.switchLiveRoom:type_name -> channel.SwitchLiveRoom
	22, // 38: channel.EventBody.events:type_name -> channel.MsgEvent
	26, // 39: channel.EventBody.scheduler:type_name -> channel.SchedulerMsg
	0,  // 40: channel.EventBody.appChannel:type_name -> channel.AppChannelMsg
	0,  // 41: channel.EventBody.weakMsgAppChannel:type_name -> channel.AppChannelMsg
	14, // 42: channel.GuildInfo.guildStatus:type_name -> channel.GroupProStatus
	23, // 43: channel.GuildInfo.memberChangeSeq:type_name -> channel.MsgSeq
	23, // 44: channel.GuildInfo.guildInfoChangeSeq:type_name -> channel.MsgSeq
	23, // 45: channel.GuildInfo.channelChangeSeq:type_name -> channel.MsgSeq
	23, // 46: channel.ReadNotify.readMsgSeq:type_name -> channel.MsgSeq
	23, // 47: channel.ReadNotify.readCntMsgSeq:type_name -> channel.MsgSeq
	31, // 48: channel.SwitchVoiceChannel.enterDetail:type_name -> channel.SwitchDetail
	31, // 49: channel.SwitchVoiceChannel.leaveDetail:type_name -> channel.SwitchDetail
	2,  // 50: channel.UpdateCategory.categoryInfo:type_name -> channel.CategoryInfo
	2,  // 51: channel.UpdateCategory.noClassifyCategoryInfo:type_name -> channel.CategoryInfo
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_pb_channel_servtype_proto_init() }
func file_pb_channel_servtype_proto_init() {
	if File_pb_channel_servtype_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_channel_servtype_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppChannelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChanInfoFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeChanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeGuildInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommGrayTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyChan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupProStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildInfoFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickOffGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveChannelInfoFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveRoomStatusChangeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSeq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMsgRecvType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchLiveRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchVoiceChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVoiceBlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceChannelInfoFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_servtype_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommGrayTips_TemplParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_channel_servtype_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_channel_servtype_proto_goTypes,
		DependencyIndexes: file_pb_channel_servtype_proto_depIdxs,
		MessageInfos:      file_pb_channel_servtype_proto_msgTypes,
	}.Build()
	File_pb_channel_servtype_proto = out.File
	file_pb_channel_servtype_proto_rawDesc = nil
	file_pb_channel_servtype_proto_goTypes = nil
	file_pb_channel_servtype_proto_depIdxs = nil
}
