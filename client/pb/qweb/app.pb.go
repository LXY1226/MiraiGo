// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/pb/qweb/app.proto

package qweb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetAppInfoByIdReq struct {
	//CommonExt ExtInfo = 1;
	AppId           string `protobuf:"bytes,2,opt,name=appId,proto3" json:"appId,omitempty"`
	NeedVersionInfo int32  `protobuf:"varint,3,opt,name=needVersionInfo,proto3" json:"needVersionInfo,omitempty"`
}

func (m *GetAppInfoByIdReq) Reset()         { *m = GetAppInfoByIdReq{} }
func (m *GetAppInfoByIdReq) String() string { return proto.CompactTextString(m) }
func (*GetAppInfoByIdReq) ProtoMessage()    {}
func (*GetAppInfoByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de65e5465eb8f0d, []int{0}
}
func (m *GetAppInfoByIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAppInfoByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAppInfoByIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAppInfoByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppInfoByIdReq.Merge(m, src)
}
func (m *GetAppInfoByIdReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAppInfoByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppInfoByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppInfoByIdReq proto.InternalMessageInfo

func (m *GetAppInfoByIdReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *GetAppInfoByIdReq) GetNeedVersionInfo() int32 {
	if m != nil {
		return m.NeedVersionInfo
	}
	return 0
}

type GetAppInfoByIdRsp struct {
	AppInfo *ApiAppInfo `protobuf:"bytes,2,opt,name=appInfo,proto3" json:"appInfo,omitempty"`
}

func (m *GetAppInfoByIdRsp) Reset()         { *m = GetAppInfoByIdRsp{} }
func (m *GetAppInfoByIdRsp) String() string { return proto.CompactTextString(m) }
func (*GetAppInfoByIdRsp) ProtoMessage()    {}
func (*GetAppInfoByIdRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de65e5465eb8f0d, []int{1}
}
func (m *GetAppInfoByIdRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAppInfoByIdRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAppInfoByIdRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAppInfoByIdRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppInfoByIdRsp.Merge(m, src)
}
func (m *GetAppInfoByIdRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetAppInfoByIdRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppInfoByIdRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppInfoByIdRsp proto.InternalMessageInfo

func (m *GetAppInfoByIdRsp) GetAppInfo() *ApiAppInfo {
	if m != nil {
		return m.AppInfo
	}
	return nil
}

type ApiAppInfo struct {
	AppId       string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	AppName     string `protobuf:"bytes,2,opt,name=appName,proto3" json:"appName,omitempty"`
	Icon        string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	DownloadUrl string `protobuf:"bytes,4,opt,name=downloadUrl,proto3" json:"downloadUrl,omitempty"`
	Version     string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Desc        string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	// pub accts = 7;
	Type               int32            `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	BaseLibMiniVersion string           `protobuf:"bytes,9,opt,name=baseLibMiniVersion,proto3" json:"baseLibMiniVersion,omitempty"`
	SubPkgs            []*AppSubPkgInfo `protobuf:"bytes,10,rep,name=subPkgs,proto3" json:"subPkgs,omitempty"`
	// first = 11;
	Domain *DomainConfig `protobuf:"bytes,12,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (m *ApiAppInfo) Reset()         { *m = ApiAppInfo{} }
func (m *ApiAppInfo) String() string { return proto.CompactTextString(m) }
func (*ApiAppInfo) ProtoMessage()    {}
func (*ApiAppInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de65e5465eb8f0d, []int{2}
}
func (m *ApiAppInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiAppInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiAppInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiAppInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiAppInfo.Merge(m, src)
}
func (m *ApiAppInfo) XXX_Size() int {
	return m.Size()
}
func (m *ApiAppInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiAppInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ApiAppInfo proto.InternalMessageInfo

func (m *ApiAppInfo) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ApiAppInfo) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *ApiAppInfo) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ApiAppInfo) GetDownloadUrl() string {
	if m != nil {
		return m.DownloadUrl
	}
	return ""
}

func (m *ApiAppInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ApiAppInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ApiAppInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ApiAppInfo) GetBaseLibMiniVersion() string {
	if m != nil {
		return m.BaseLibMiniVersion
	}
	return ""
}

func (m *ApiAppInfo) GetSubPkgs() []*AppSubPkgInfo {
	if m != nil {
		return m.SubPkgs
	}
	return nil
}

func (m *ApiAppInfo) GetDomain() *DomainConfig {
	if m != nil {
		return m.Domain
	}
	return nil
}

type AppSubPkgInfo struct {
	SubPkgName  string `protobuf:"bytes,1,opt,name=subPkgName,proto3" json:"subPkgName,omitempty"`
	DownloadUrl string `protobuf:"bytes,2,opt,name=downloadUrl,proto3" json:"downloadUrl,omitempty"`
	Independent int32  `protobuf:"varint,3,opt,name=independent,proto3" json:"independent,omitempty"`
	FileSize    int32  `protobuf:"varint,4,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
}

func (m *AppSubPkgInfo) Reset()         { *m = AppSubPkgInfo{} }
func (m *AppSubPkgInfo) String() string { return proto.CompactTextString(m) }
func (*AppSubPkgInfo) ProtoMessage()    {}
func (*AppSubPkgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de65e5465eb8f0d, []int{3}
}
func (m *AppSubPkgInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppSubPkgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppSubPkgInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppSubPkgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppSubPkgInfo.Merge(m, src)
}
func (m *AppSubPkgInfo) XXX_Size() int {
	return m.Size()
}
func (m *AppSubPkgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppSubPkgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AppSubPkgInfo proto.InternalMessageInfo

func (m *AppSubPkgInfo) GetSubPkgName() string {
	if m != nil {
		return m.SubPkgName
	}
	return ""
}

func (m *AppSubPkgInfo) GetDownloadUrl() string {
	if m != nil {
		return m.DownloadUrl
	}
	return ""
}

func (m *AppSubPkgInfo) GetIndependent() int32 {
	if m != nil {
		return m.Independent
	}
	return 0
}

func (m *AppSubPkgInfo) GetFileSize() int32 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

type DomainConfig struct {
	RequestDomain      []string `protobuf:"bytes,1,rep,name=requestDomain,proto3" json:"requestDomain,omitempty"`
	SocketDomain       []string `protobuf:"bytes,2,rep,name=socketDomain,proto3" json:"socketDomain,omitempty"`
	UploadFileDomain   []string `protobuf:"bytes,3,rep,name=uploadFileDomain,proto3" json:"uploadFileDomain,omitempty"`
	DownloadFileDomain []string `protobuf:"bytes,4,rep,name=downloadFileDomain,proto3" json:"downloadFileDomain,omitempty"`
	BusinessDomain     []string `protobuf:"bytes,5,rep,name=businessDomain,proto3" json:"businessDomain,omitempty"`
	UdpIpList          []string `protobuf:"bytes,6,rep,name=udpIpList,proto3" json:"udpIpList,omitempty"`
}

func (m *DomainConfig) Reset()         { *m = DomainConfig{} }
func (m *DomainConfig) String() string { return proto.CompactTextString(m) }
func (*DomainConfig) ProtoMessage()    {}
func (*DomainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5de65e5465eb8f0d, []int{4}
}
func (m *DomainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainConfig.Merge(m, src)
}
func (m *DomainConfig) XXX_Size() int {
	return m.Size()
}
func (m *DomainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DomainConfig proto.InternalMessageInfo

func (m *DomainConfig) GetRequestDomain() []string {
	if m != nil {
		return m.RequestDomain
	}
	return nil
}

func (m *DomainConfig) GetSocketDomain() []string {
	if m != nil {
		return m.SocketDomain
	}
	return nil
}

func (m *DomainConfig) GetUploadFileDomain() []string {
	if m != nil {
		return m.UploadFileDomain
	}
	return nil
}

func (m *DomainConfig) GetDownloadFileDomain() []string {
	if m != nil {
		return m.DownloadFileDomain
	}
	return nil
}

func (m *DomainConfig) GetBusinessDomain() []string {
	if m != nil {
		return m.BusinessDomain
	}
	return nil
}

func (m *DomainConfig) GetUdpIpList() []string {
	if m != nil {
		return m.UdpIpList
	}
	return nil
}

func init() {
	proto.RegisterType((*GetAppInfoByIdReq)(nil), "GetAppInfoByIdReq")
	proto.RegisterType((*GetAppInfoByIdRsp)(nil), "GetAppInfoByIdRsp")
	proto.RegisterType((*ApiAppInfo)(nil), "ApiAppInfo")
	proto.RegisterType((*AppSubPkgInfo)(nil), "AppSubPkgInfo")
	proto.RegisterType((*DomainConfig)(nil), "DomainConfig")
}

func init() { proto.RegisterFile("client/pb/qweb/app.proto", fileDescriptor_5de65e5465eb8f0d) }

var fileDescriptor_5de65e5465eb8f0d = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xc1, 0x6e, 0xd3, 0x4c,
	0x14, 0x85, 0xe3, 0x24, 0x76, 0xeb, 0xeb, 0xa4, 0xff, 0xcf, 0x88, 0xc5, 0x08, 0x21, 0xcb, 0xb2,
	0x28, 0xb2, 0x58, 0x38, 0x52, 0xd9, 0xc1, 0x2a, 0x05, 0x81, 0x22, 0x15, 0x84, 0x1c, 0xc1, 0x82,
	0x9d, 0x9d, 0xb9, 0xa9, 0x46, 0x75, 0x67, 0x26, 0x19, 0x9b, 0xaa, 0xbc, 0x04, 0xbc, 0x0c, 0xef,
	0xc0, 0xb2, 0x4b, 0x96, 0x28, 0x79, 0x0b, 0x56, 0xc8, 0x63, 0x87, 0x38, 0x49, 0x77, 0x73, 0xbf,
	0x7b, 0x7c, 0x74, 0x7c, 0x46, 0x03, 0x74, 0x96, 0x73, 0x14, 0xc5, 0x48, 0x65, 0xa3, 0xc5, 0x0d,
	0x66, 0xa3, 0x54, 0xa9, 0x58, 0x2d, 0x65, 0x21, 0xc3, 0x29, 0x3c, 0x78, 0x8b, 0xc5, 0x58, 0xa9,
	0x89, 0x98, 0xcb, 0xf3, 0xdb, 0x09, 0x4b, 0x70, 0x41, 0x1e, 0x82, 0x9d, 0x2a, 0x35, 0x61, 0xb4,
	0x1b, 0x58, 0x91, 0x9b, 0xd4, 0x03, 0x89, 0xe0, 0x3f, 0x81, 0xc8, 0x3e, 0xe1, 0x52, 0x73, 0x29,
	0x2a, 0x3d, 0xed, 0x05, 0x56, 0x64, 0x27, 0xfb, 0x38, 0x7c, 0x71, 0x60, 0xaa, 0x15, 0x39, 0x85,
	0xa3, 0xb4, 0x26, 0xc6, 0xd6, 0x3b, 0xf3, 0xe2, 0xb1, 0xe2, 0x8d, 0x28, 0xd9, 0xec, 0xc2, 0x1f,
	0x5d, 0x80, 0x2d, 0xdf, 0x46, 0xb1, 0xda, 0x51, 0xa8, 0xf1, 0x7a, 0x9f, 0x5e, 0x63, 0x13, 0x71,
	0x33, 0x12, 0x02, 0x7d, 0x3e, 0x93, 0xc2, 0x24, 0x73, 0x13, 0x73, 0x26, 0x01, 0x78, 0x4c, 0xde,
	0x88, 0x5c, 0xa6, 0xec, 0xe3, 0x32, 0xa7, 0x7d, 0xb3, 0x6a, 0xa3, 0xca, 0xef, 0x4b, 0x9d, 0x9f,
	0xda, 0xb5, 0x5f, 0x33, 0x56, 0x7e, 0x0c, 0xf5, 0x8c, 0x3a, 0xb5, 0x5f, 0x75, 0xae, 0x58, 0x71,
	0xab, 0x90, 0x1e, 0x9b, 0xbf, 0x37, 0x67, 0x12, 0x03, 0xc9, 0x52, 0x8d, 0x17, 0x3c, 0x7b, 0xc7,
	0x05, 0x6f, 0xca, 0xa0, 0xae, 0xf9, 0xea, 0x9e, 0x0d, 0x89, 0xe0, 0x48, 0x97, 0xd9, 0x87, 0xab,
	0x4b, 0x4d, 0x21, 0xe8, 0x45, 0xde, 0xd9, 0x49, 0x3c, 0x56, 0x6a, 0x6a, 0x50, 0x5d, 0x48, 0xb3,
	0x26, 0xa7, 0xe0, 0x30, 0x79, 0x9d, 0x72, 0x41, 0x07, 0xa6, 0xb6, 0x61, 0xfc, 0xda, 0x8c, 0xaf,
	0xa4, 0x98, 0xf3, 0xcb, 0xa4, 0x59, 0x86, 0xdf, 0x2c, 0x18, 0xee, 0x38, 0x10, 0x1f, 0xa0, 0xf6,
	0x30, 0x3d, 0xd5, 0xfd, 0xb5, 0xc8, 0x7e, 0x2d, 0xdd, 0xc3, 0x5a, 0x02, 0xf0, 0xb8, 0x60, 0xa8,
	0x50, 0x30, 0x14, 0x45, 0x73, 0xdb, 0x6d, 0x44, 0x1e, 0xc1, 0xf1, 0x9c, 0xe7, 0x38, 0xe5, 0x5f,
	0xd1, 0xf4, 0x6a, 0x27, 0xff, 0xe6, 0xf0, 0x8f, 0x05, 0x83, 0x76, 0x54, 0xf2, 0x04, 0x86, 0x4b,
	0x5c, 0x94, 0xa8, 0x8b, 0x1a, 0x53, 0x2b, 0xe8, 0x45, 0x6e, 0xb2, 0x0b, 0x49, 0x08, 0x03, 0x2d,
	0x67, 0x57, 0xb8, 0x11, 0x75, 0x8d, 0x68, 0x87, 0x91, 0x67, 0xf0, 0x7f, 0xa9, 0xaa, 0x94, 0x6f,
	0x78, 0x8e, 0x8d, 0xae, 0x67, 0x74, 0x07, 0xbc, 0xba, 0x99, 0xcd, 0x3f, 0xb5, 0xd4, 0x7d, 0xa3,
	0xbe, 0x67, 0x43, 0x9e, 0xc2, 0x49, 0x56, 0x6a, 0x2e, 0x50, 0xeb, 0x46, 0x6b, 0x1b, 0xed, 0x1e,
	0x25, 0x8f, 0xc1, 0x2d, 0x99, 0x9a, 0xa8, 0x0b, 0xae, 0x0b, 0xea, 0x18, 0xc9, 0x16, 0x9c, 0x07,
	0x3f, 0x57, 0xbe, 0x75, 0xb7, 0xf2, 0xad, 0xdf, 0x2b, 0xdf, 0xfa, 0xbe, 0xf6, 0x3b, 0x77, 0x6b,
	0xbf, 0xf3, 0x6b, 0xed, 0x77, 0x3e, 0x3b, 0xf1, 0xcb, 0xea, 0x0d, 0x66, 0x8e, 0x79, 0x80, 0xcf,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x26, 0xd1, 0xe3, 0xcf, 0x9c, 0x03, 0x00, 0x00,
}

func (m *GetAppInfoByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppInfoByIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAppInfoByIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NeedVersionInfo != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.NeedVersionInfo))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AppId) > 0 {
		i -= len(m.AppId)
		copy(dAtA[i:], m.AppId)
		i = encodeVarintApp(dAtA, i, uint64(len(m.AppId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *GetAppInfoByIdRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppInfoByIdRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAppInfoByIdRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppInfo != nil {
		{
			size, err := m.AppInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ApiAppInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiAppInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiAppInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.SubPkgs) > 0 {
		for iNdEx := len(m.SubPkgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubPkgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.BaseLibMiniVersion) > 0 {
		i -= len(m.BaseLibMiniVersion)
		copy(dAtA[i:], m.BaseLibMiniVersion)
		i = encodeVarintApp(dAtA, i, uint64(len(m.BaseLibMiniVersion)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Type != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DownloadUrl) > 0 {
		i -= len(m.DownloadUrl)
		copy(dAtA[i:], m.DownloadUrl)
		i = encodeVarintApp(dAtA, i, uint64(len(m.DownloadUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintApp(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppId) > 0 {
		i -= len(m.AppId)
		copy(dAtA[i:], m.AppId)
		i = encodeVarintApp(dAtA, i, uint64(len(m.AppId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppSubPkgInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppSubPkgInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppSubPkgInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FileSize != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x20
	}
	if m.Independent != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.Independent))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DownloadUrl) > 0 {
		i -= len(m.DownloadUrl)
		copy(dAtA[i:], m.DownloadUrl)
		i = encodeVarintApp(dAtA, i, uint64(len(m.DownloadUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubPkgName) > 0 {
		i -= len(m.SubPkgName)
		copy(dAtA[i:], m.SubPkgName)
		i = encodeVarintApp(dAtA, i, uint64(len(m.SubPkgName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DomainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UdpIpList) > 0 {
		for iNdEx := len(m.UdpIpList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UdpIpList[iNdEx])
			copy(dAtA[i:], m.UdpIpList[iNdEx])
			i = encodeVarintApp(dAtA, i, uint64(len(m.UdpIpList[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BusinessDomain) > 0 {
		for iNdEx := len(m.BusinessDomain) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BusinessDomain[iNdEx])
			copy(dAtA[i:], m.BusinessDomain[iNdEx])
			i = encodeVarintApp(dAtA, i, uint64(len(m.BusinessDomain[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DownloadFileDomain) > 0 {
		for iNdEx := len(m.DownloadFileDomain) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DownloadFileDomain[iNdEx])
			copy(dAtA[i:], m.DownloadFileDomain[iNdEx])
			i = encodeVarintApp(dAtA, i, uint64(len(m.DownloadFileDomain[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.UploadFileDomain) > 0 {
		for iNdEx := len(m.UploadFileDomain) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UploadFileDomain[iNdEx])
			copy(dAtA[i:], m.UploadFileDomain[iNdEx])
			i = encodeVarintApp(dAtA, i, uint64(len(m.UploadFileDomain[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SocketDomain) > 0 {
		for iNdEx := len(m.SocketDomain) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SocketDomain[iNdEx])
			copy(dAtA[i:], m.SocketDomain[iNdEx])
			i = encodeVarintApp(dAtA, i, uint64(len(m.SocketDomain[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RequestDomain) > 0 {
		for iNdEx := len(m.RequestDomain) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestDomain[iNdEx])
			copy(dAtA[i:], m.RequestDomain[iNdEx])
			i = encodeVarintApp(dAtA, i, uint64(len(m.RequestDomain[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	offset -= sovApp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetAppInfoByIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.NeedVersionInfo != 0 {
		n += 1 + sovApp(uint64(m.NeedVersionInfo))
	}
	return n
}

func (m *GetAppInfoByIdRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppInfo != nil {
		l = m.AppInfo.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *ApiAppInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.DownloadUrl)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApp(uint64(m.Type))
	}
	l = len(m.BaseLibMiniVersion)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if len(m.SubPkgs) > 0 {
		for _, e := range m.SubPkgs {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AppSubPkgInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubPkgName)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.DownloadUrl)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Independent != 0 {
		n += 1 + sovApp(uint64(m.Independent))
	}
	if m.FileSize != 0 {
		n += 1 + sovApp(uint64(m.FileSize))
	}
	return n
}

func (m *DomainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestDomain) > 0 {
		for _, s := range m.RequestDomain {
			l = len(s)
			n += 1 + l + sovApp(uint64(l))
		}
	}
	if len(m.SocketDomain) > 0 {
		for _, s := range m.SocketDomain {
			l = len(s)
			n += 1 + l + sovApp(uint64(l))
		}
	}
	if len(m.UploadFileDomain) > 0 {
		for _, s := range m.UploadFileDomain {
			l = len(s)
			n += 1 + l + sovApp(uint64(l))
		}
	}
	if len(m.DownloadFileDomain) > 0 {
		for _, s := range m.DownloadFileDomain {
			l = len(s)
			n += 1 + l + sovApp(uint64(l))
		}
	}
	if len(m.BusinessDomain) > 0 {
		for _, s := range m.BusinessDomain {
			l = len(s)
			n += 1 + l + sovApp(uint64(l))
		}
	}
	if len(m.UdpIpList) > 0 {
		for _, s := range m.UdpIpList {
			l = len(s)
			n += 1 + l + sovApp(uint64(l))
		}
	}
	return n
}

func sovApp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAppInfoByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppInfoByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppInfoByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedVersionInfo", wireType)
			}
			m.NeedVersionInfo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedVersionInfo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppInfoByIdRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppInfoByIdRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppInfoByIdRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppInfo == nil {
				m.AppInfo = &ApiAppInfo{}
			}
			if err := m.AppInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiAppInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiAppInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiAppInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseLibMiniVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseLibMiniVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPkgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubPkgs = append(m.SubPkgs, &AppSubPkgInfo{})
			if err := m.SubPkgs[len(m.SubPkgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Domain == nil {
				m.Domain = &DomainConfig{}
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppSubPkgInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppSubPkgInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppSubPkgInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPkgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubPkgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Independent", wireType)
			}
			m.Independent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Independent |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestDomain = append(m.RequestDomain, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocketDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocketDomain = append(m.SocketDomain, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadFileDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UploadFileDomain = append(m.UploadFileDomain, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadFileDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadFileDomain = append(m.DownloadFileDomain, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessDomain = append(m.BusinessDomain, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpIpList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UdpIpList = append(m.UdpIpList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApp = fmt.Errorf("proto: unexpected end of group")
)
