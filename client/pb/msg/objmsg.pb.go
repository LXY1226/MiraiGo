// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: objmsg.proto

package msg

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgPic struct {
	SmallPicUrl    []byte `protobuf:"bytes,1,opt,name=smallPicUrl,proto3" json:"smallPicUrl,omitempty"`
	OriginalPicUrl []byte `protobuf:"bytes,2,opt,name=originalPicUrl,proto3" json:"originalPicUrl,omitempty"`
	LocalPicId     int32  `protobuf:"varint,3,opt,name=localPicId,proto3" json:"localPicId,omitempty"`
}

func (m *MsgPic) Reset()         { *m = MsgPic{} }
func (m *MsgPic) String() string { return proto.CompactTextString(m) }
func (*MsgPic) ProtoMessage()    {}
func (*MsgPic) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c945ba39a7db0f, []int{0}
}
func (m *MsgPic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPic.Merge(m, src)
}
func (m *MsgPic) XXX_Size() int {
	return m.Size()
}
func (m *MsgPic) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPic.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPic proto.InternalMessageInfo

func (m *MsgPic) GetSmallPicUrl() []byte {
	if m != nil {
		return m.SmallPicUrl
	}
	return nil
}

func (m *MsgPic) GetOriginalPicUrl() []byte {
	if m != nil {
		return m.OriginalPicUrl
	}
	return nil
}

func (m *MsgPic) GetLocalPicId() int32 {
	if m != nil {
		return m.LocalPicId
	}
	return 0
}

type ObjMsg struct {
	MsgType        int32             `protobuf:"varint,1,opt,name=msgType,proto3" json:"msgType,omitempty"`
	Title          []byte            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	BytesAbstact   []byte            `protobuf:"bytes,3,opt,name=bytesAbstact,proto3" json:"bytesAbstact,omitempty"`
	TitleExt       []byte            `protobuf:"bytes,5,opt,name=titleExt,proto3" json:"titleExt,omitempty"`
	MsgPic         []*MsgPic         `protobuf:"bytes,6,rep,name=msgPic,proto3" json:"msgPic,omitempty"`
	MsgContentInfo []*MsgContentInfo `protobuf:"bytes,7,rep,name=msgContentInfo,proto3" json:"msgContentInfo,omitempty"`
	ReportIdShow   int32             `protobuf:"varint,8,opt,name=reportIdShow,proto3" json:"reportIdShow,omitempty"`
}

func (m *ObjMsg) Reset()         { *m = ObjMsg{} }
func (m *ObjMsg) String() string { return proto.CompactTextString(m) }
func (*ObjMsg) ProtoMessage()    {}
func (*ObjMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c945ba39a7db0f, []int{1}
}
func (m *ObjMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjMsg.Merge(m, src)
}
func (m *ObjMsg) XXX_Size() int {
	return m.Size()
}
func (m *ObjMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ObjMsg proto.InternalMessageInfo

func (m *ObjMsg) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *ObjMsg) GetTitle() []byte {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *ObjMsg) GetBytesAbstact() []byte {
	if m != nil {
		return m.BytesAbstact
	}
	return nil
}

func (m *ObjMsg) GetTitleExt() []byte {
	if m != nil {
		return m.TitleExt
	}
	return nil
}

func (m *ObjMsg) GetMsgPic() []*MsgPic {
	if m != nil {
		return m.MsgPic
	}
	return nil
}

func (m *ObjMsg) GetMsgContentInfo() []*MsgContentInfo {
	if m != nil {
		return m.MsgContentInfo
	}
	return nil
}

func (m *ObjMsg) GetReportIdShow() int32 {
	if m != nil {
		return m.ReportIdShow
	}
	return 0
}

type MsgContentInfo struct {
	ContentInfoId []byte   `protobuf:"bytes,1,opt,name=contentInfoId,proto3" json:"contentInfoId,omitempty"`
	MsgFile       *MsgFile `protobuf:"bytes,2,opt,name=msgFile,proto3" json:"msgFile,omitempty"`
}

func (m *MsgContentInfo) Reset()         { *m = MsgContentInfo{} }
func (m *MsgContentInfo) String() string { return proto.CompactTextString(m) }
func (*MsgContentInfo) ProtoMessage()    {}
func (*MsgContentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c945ba39a7db0f, []int{2}
}
func (m *MsgContentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgContentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgContentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgContentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgContentInfo.Merge(m, src)
}
func (m *MsgContentInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgContentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgContentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgContentInfo proto.InternalMessageInfo

func (m *MsgContentInfo) GetContentInfoId() []byte {
	if m != nil {
		return m.ContentInfoId
	}
	return nil
}

func (m *MsgContentInfo) GetMsgFile() *MsgFile {
	if m != nil {
		return m.MsgFile
	}
	return nil
}

type MsgFile struct {
	BusId         int32  `protobuf:"varint,1,opt,name=busId,proto3" json:"busId,omitempty"`
	FilePath      []byte `protobuf:"bytes,2,opt,name=filePath,proto3" json:"filePath,omitempty"`
	FileSize      int64  `protobuf:"varint,3,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	FileName      string `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Int64DeadTime int64  `protobuf:"varint,5,opt,name=int64DeadTime,proto3" json:"int64DeadTime,omitempty"`
	FileSha1      []byte `protobuf:"bytes,6,opt,name=fileSha1,proto3" json:"fileSha1,omitempty"`
	Ext           []byte `protobuf:"bytes,7,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (m *MsgFile) Reset()         { *m = MsgFile{} }
func (m *MsgFile) String() string { return proto.CompactTextString(m) }
func (*MsgFile) ProtoMessage()    {}
func (*MsgFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c945ba39a7db0f, []int{3}
}
func (m *MsgFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFile.Merge(m, src)
}
func (m *MsgFile) XXX_Size() int {
	return m.Size()
}
func (m *MsgFile) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFile.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFile proto.InternalMessageInfo

func (m *MsgFile) GetBusId() int32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

func (m *MsgFile) GetFilePath() []byte {
	if m != nil {
		return m.FilePath
	}
	return nil
}

func (m *MsgFile) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *MsgFile) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *MsgFile) GetInt64DeadTime() int64 {
	if m != nil {
		return m.Int64DeadTime
	}
	return 0
}

func (m *MsgFile) GetFileSha1() []byte {
	if m != nil {
		return m.FileSha1
	}
	return nil
}

func (m *MsgFile) GetExt() []byte {
	if m != nil {
		return m.Ext
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgPic)(nil), "MsgPic")
	proto.RegisterType((*ObjMsg)(nil), "ObjMsg")
	proto.RegisterType((*MsgContentInfo)(nil), "MsgContentInfo")
	proto.RegisterType((*MsgFile)(nil), "MsgFile")
}

func init() { proto.RegisterFile("objmsg.proto", fileDescriptor_c5c945ba39a7db0f) }

var fileDescriptor_c5c945ba39a7db0f = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x3d, 0x6f, 0xd4, 0x30,
	0x18, 0xc7, 0xcf, 0x84, 0x24, 0xc7, 0x73, 0xe1, 0x40, 0x16, 0x83, 0xc5, 0x90, 0x46, 0x11, 0x42,
	0x99, 0x4e, 0xa2, 0x20, 0x18, 0x98, 0x78, 0x95, 0x32, 0x14, 0x4e, 0x6e, 0x59, 0xba, 0xe5, 0xc5,
	0xcd, 0xb9, 0x8a, 0xe3, 0x53, 0x6c, 0x44, 0xcb, 0xa7, 0xe0, 0x5b, 0xc1, 0xd8, 0x91, 0x11, 0xdd,
	0x7d, 0x07, 0xe6, 0xca, 0xbe, 0x24, 0xbd, 0xdc, 0x96, 0xdf, 0xef, 0xf9, 0xeb, 0xb1, 0xfd, 0x57,
	0x20, 0x90, 0xf9, 0xa5, 0x50, 0xd5, 0x62, 0xdd, 0x4a, 0x2d, 0xe3, 0x16, 0xbc, 0x13, 0x55, 0x2d,
	0x79, 0x81, 0x23, 0x98, 0x29, 0x91, 0xd5, 0xf5, 0x92, 0x17, 0xdf, 0xda, 0x9a, 0xa0, 0x08, 0x25,
	0x01, 0xdd, 0x57, 0xf8, 0x39, 0xcc, 0x65, 0xcb, 0x2b, 0xde, 0x64, 0x7d, 0xe8, 0x9e, 0x0d, 0x1d,
	0x58, 0x1c, 0x02, 0xd4, 0xb2, 0xb0, 0x98, 0x96, 0xc4, 0x89, 0x50, 0xe2, 0xd2, 0x3d, 0x13, 0xff,
	0x47, 0xe0, 0x7d, 0xcd, 0x2f, 0x4f, 0x54, 0x85, 0x09, 0xf8, 0x42, 0x55, 0x67, 0xd7, 0x6b, 0x66,
	0x0f, 0x74, 0x69, 0x8f, 0xf8, 0x09, 0xb8, 0x9a, 0xeb, 0x9a, 0x75, 0x67, 0xec, 0x00, 0xc7, 0x10,
	0xe4, 0xd7, 0x9a, 0xa9, 0x77, 0xb9, 0xd2, 0x59, 0xa1, 0xed, 0xf2, 0x80, 0x8e, 0x1c, 0x7e, 0x0a,
	0x53, 0x1b, 0xfe, 0x74, 0xa5, 0x89, 0x6b, 0xe7, 0x03, 0xe3, 0x23, 0xf0, 0x84, 0x7d, 0x2e, 0xf1,
	0x22, 0x27, 0x99, 0x1d, 0xfb, 0x8b, 0xdd, 0xeb, 0x69, 0xa7, 0xf1, 0x1b, 0x98, 0x0b, 0x55, 0x7d,
	0x90, 0x8d, 0x66, 0x8d, 0x4e, 0x9b, 0x0b, 0x49, 0x7c, 0x1b, 0x7c, 0x64, 0x82, 0x7b, 0x9a, 0x1e,
	0xc4, 0xcc, 0xcd, 0x5a, 0xb6, 0x96, 0xad, 0x4e, 0xcb, 0xd3, 0x95, 0xfc, 0x41, 0xa6, 0xf6, 0x39,
	0x23, 0x17, 0x9f, 0xc3, 0x7c, 0xbc, 0x05, 0x3f, 0x83, 0x87, 0xc5, 0x1d, 0xa6, 0x65, 0x57, 0xfb,
	0x58, 0xe2, 0xd8, 0xb6, 0xf4, 0x99, 0x77, 0x6d, 0xcc, 0x8e, 0xa7, 0xe6, 0x36, 0x86, 0x69, 0x3f,
	0x88, 0x7f, 0x23, 0xf0, 0x3b, 0x69, 0xba, 0xcb, 0xbf, 0xab, 0x6e, 0x9b, 0x4b, 0x77, 0x60, 0x7a,
	0xb9, 0xe0, 0x35, 0x5b, 0x66, 0x7a, 0xd5, 0x95, 0x3a, 0x70, 0x3f, 0x3b, 0xe5, 0x3f, 0x99, 0xed,
	0xd4, 0xa1, 0x03, 0xf7, 0xb3, 0x2f, 0x99, 0x60, 0xe4, 0x7e, 0x84, 0x92, 0x07, 0x74, 0x60, 0x73,
	0x7f, 0xde, 0xe8, 0xd7, 0xaf, 0x3e, 0xb2, 0xac, 0x3c, 0xe3, 0x82, 0xd9, 0xc2, 0x1d, 0x3a, 0x96,
	0xc3, 0xf6, 0x55, 0xf6, 0x82, 0x78, 0x77, 0x27, 0x1b, 0xc6, 0x8f, 0xc1, 0x61, 0x57, 0x9a, 0xf8,
	0x56, 0x9b, 0xcf, 0xf7, 0x47, 0x7f, 0x36, 0x21, 0xba, 0xd9, 0x84, 0xe8, 0xdf, 0x26, 0x44, 0xbf,
	0xb6, 0xe1, 0xe4, 0x66, 0x1b, 0x4e, 0xfe, 0x6e, 0xc3, 0xc9, 0xb9, 0xbb, 0x78, 0x2b, 0x54, 0x95,
	0x7b, 0xf6, 0xd7, 0x7d, 0x79, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x89, 0x52, 0x62, 0xca, 0x02,
	0x00, 0x00,
}

func (m *MsgPic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LocalPicId != 0 {
		i = encodeVarintObjmsg(dAtA, i, uint64(m.LocalPicId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OriginalPicUrl) > 0 {
		i -= len(m.OriginalPicUrl)
		copy(dAtA[i:], m.OriginalPicUrl)
		i = encodeVarintObjmsg(dAtA, i, uint64(len(m.OriginalPicUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SmallPicUrl) > 0 {
		i -= len(m.SmallPicUrl)
		copy(dAtA[i:], m.SmallPicUrl)
		i = encodeVarintObjmsg(dAtA, i, uint64(len(m.SmallPicUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReportIdShow != 0 {
		i = encodeVarintObjmsg(dAtA, i, uint64(m.ReportIdShow))
		i--
		dAtA[i] = 0x40
	}
	if len(m.MsgContentInfo) > 0 {
		for iNdEx := len(m.MsgContentInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgContentInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObjmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.MsgPic) > 0 {
		for iNdEx := len(m.MsgPic) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgPic[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObjmsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TitleExt) > 0 {
		i -= len(m.TitleExt)
		copy(dAtA[i:], m.TitleExt)
		i = encodeVarintObjmsg(dAtA, i, uint64(len(m.TitleExt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BytesAbstact) > 0 {
		i -= len(m.BytesAbstact)
		copy(dAtA[i:], m.BytesAbstact)
		i = encodeVarintObjmsg(dAtA, i, uint64(len(m.BytesAbstact)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintObjmsg(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgType != 0 {
		i = encodeVarintObjmsg(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgContentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgContentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgContentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgFile != nil {
		{
			size, err := m.MsgFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObjmsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContentInfoId) > 0 {
		i -= len(m.ContentInfoId)
		copy(dAtA[i:], m.ContentInfoId)
		i = encodeVarintObjmsg(dAtA, i, uint64(len(m.ContentInfoId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintObjmsg(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FileSha1) > 0 {
		i -= len(m.FileSha1)
		copy(dAtA[i:], m.FileSha1)
		i = encodeVarintObjmsg(dAtA, i, uint64(len(m.FileSha1)))
		i--
		dAtA[i] = 0x32
	}
	if m.Int64DeadTime != 0 {
		i = encodeVarintObjmsg(dAtA, i, uint64(m.Int64DeadTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintObjmsg(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x22
	}
	if m.FileSize != 0 {
		i = encodeVarintObjmsg(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintObjmsg(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0x12
	}
	if m.BusId != 0 {
		i = encodeVarintObjmsg(dAtA, i, uint64(m.BusId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintObjmsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovObjmsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SmallPicUrl)
	if l > 0 {
		n += 1 + l + sovObjmsg(uint64(l))
	}
	l = len(m.OriginalPicUrl)
	if l > 0 {
		n += 1 + l + sovObjmsg(uint64(l))
	}
	if m.LocalPicId != 0 {
		n += 1 + sovObjmsg(uint64(m.LocalPicId))
	}
	return n
}

func (m *ObjMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgType != 0 {
		n += 1 + sovObjmsg(uint64(m.MsgType))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovObjmsg(uint64(l))
	}
	l = len(m.BytesAbstact)
	if l > 0 {
		n += 1 + l + sovObjmsg(uint64(l))
	}
	l = len(m.TitleExt)
	if l > 0 {
		n += 1 + l + sovObjmsg(uint64(l))
	}
	if len(m.MsgPic) > 0 {
		for _, e := range m.MsgPic {
			l = e.Size()
			n += 1 + l + sovObjmsg(uint64(l))
		}
	}
	if len(m.MsgContentInfo) > 0 {
		for _, e := range m.MsgContentInfo {
			l = e.Size()
			n += 1 + l + sovObjmsg(uint64(l))
		}
	}
	if m.ReportIdShow != 0 {
		n += 1 + sovObjmsg(uint64(m.ReportIdShow))
	}
	return n
}

func (m *MsgContentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContentInfoId)
	if l > 0 {
		n += 1 + l + sovObjmsg(uint64(l))
	}
	if m.MsgFile != nil {
		l = m.MsgFile.Size()
		n += 1 + l + sovObjmsg(uint64(l))
	}
	return n
}

func (m *MsgFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BusId != 0 {
		n += 1 + sovObjmsg(uint64(m.BusId))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovObjmsg(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovObjmsg(uint64(m.FileSize))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovObjmsg(uint64(l))
	}
	if m.Int64DeadTime != 0 {
		n += 1 + sovObjmsg(uint64(m.Int64DeadTime))
	}
	l = len(m.FileSha1)
	if l > 0 {
		n += 1 + l + sovObjmsg(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovObjmsg(uint64(l))
	}
	return n
}

func sovObjmsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObjmsg(x uint64) (n int) {
	return sovObjmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallPicUrl", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmallPicUrl = append(m.SmallPicUrl[:0], dAtA[iNdEx:postIndex]...)
			if m.SmallPicUrl == nil {
				m.SmallPicUrl = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalPicUrl", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalPicUrl = append(m.OriginalPicUrl[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalPicUrl == nil {
				m.OriginalPicUrl = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPicId", wireType)
			}
			m.LocalPicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalPicId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipObjmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObjmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObjmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = append(m.Title[:0], dAtA[iNdEx:postIndex]...)
			if m.Title == nil {
				m.Title = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesAbstact", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytesAbstact = append(m.BytesAbstact[:0], dAtA[iNdEx:postIndex]...)
			if m.BytesAbstact == nil {
				m.BytesAbstact = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleExt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleExt = append(m.TitleExt[:0], dAtA[iNdEx:postIndex]...)
			if m.TitleExt == nil {
				m.TitleExt = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgPic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObjmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObjmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgPic = append(m.MsgPic, &MsgPic{})
			if err := m.MsgPic[len(m.MsgPic)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgContentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObjmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObjmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgContentInfo = append(m.MsgContentInfo, &MsgContentInfo{})
			if err := m.MsgContentInfo[len(m.MsgContentInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportIdShow", wireType)
			}
			m.ReportIdShow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportIdShow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipObjmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObjmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObjmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgContentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgContentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgContentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentInfoId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentInfoId = append(m.ContentInfoId[:0], dAtA[iNdEx:postIndex]...)
			if m.ContentInfoId == nil {
				m.ContentInfoId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObjmsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObjmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgFile == nil {
				m.MsgFile = &MsgFile{}
			}
			if err := m.MsgFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObjmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObjmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusId", wireType)
			}
			m.BusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = append(m.FilePath[:0], dAtA[iNdEx:postIndex]...)
			if m.FilePath == nil {
				m.FilePath = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObjmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObjmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64DeadTime", wireType)
			}
			m.Int64DeadTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64DeadTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSha1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSha1 = append(m.FileSha1[:0], dAtA[iNdEx:postIndex]...)
			if m.FileSha1 == nil {
				m.FileSha1 = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjmsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = append(m.Ext[:0], dAtA[iNdEx:postIndex]...)
			if m.Ext == nil {
				m.Ext = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObjmsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObjmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObjmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObjmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObjmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObjmsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObjmsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObjmsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObjmsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObjmsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObjmsg = fmt.Errorf("proto: unexpected end of group")
)
