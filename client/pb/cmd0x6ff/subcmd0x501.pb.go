// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/pb/cmd0x6ff/subcmd0x501.proto

package cmd0x6ff

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type C501ReqBody struct {
	ReqBody *SubCmd0X501ReqBody `protobuf:"bytes,1281,opt,name=ReqBody" json:"ReqBody,omitempty"`
}

func (m *C501ReqBody) Reset()         { *m = C501ReqBody{} }
func (m *C501ReqBody) String() string { return proto.CompactTextString(m) }
func (*C501ReqBody) ProtoMessage()    {}
func (*C501ReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_6afe98e549fd0028, []int{0}
}
func (m *C501ReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C501ReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C501ReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C501ReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C501ReqBody.Merge(m, src)
}
func (m *C501ReqBody) XXX_Size() int {
	return m.Size()
}
func (m *C501ReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_C501ReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_C501ReqBody proto.InternalMessageInfo

func (m *C501ReqBody) GetReqBody() *SubCmd0X501ReqBody {
	if m != nil {
		return m.ReqBody
	}
	return nil
}

type C501RspBody struct {
	RspBody *SubCmd0X501RspBody `protobuf:"bytes,1281,opt,name=RspBody" json:"RspBody,omitempty"`
}

func (m *C501RspBody) Reset()         { *m = C501RspBody{} }
func (m *C501RspBody) String() string { return proto.CompactTextString(m) }
func (*C501RspBody) ProtoMessage()    {}
func (*C501RspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_6afe98e549fd0028, []int{1}
}
func (m *C501RspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C501RspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C501RspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C501RspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C501RspBody.Merge(m, src)
}
func (m *C501RspBody) XXX_Size() int {
	return m.Size()
}
func (m *C501RspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_C501RspBody.DiscardUnknown(m)
}

var xxx_messageInfo_C501RspBody proto.InternalMessageInfo

func (m *C501RspBody) GetRspBody() *SubCmd0X501RspBody {
	if m != nil {
		return m.RspBody
	}
	return nil
}

type SubCmd0X501ReqBody struct {
	Uin            uint64   `protobuf:"varint,1,opt,name=uin" json:"uin"`
	IdcId          uint32   `protobuf:"varint,2,opt,name=idcId" json:"idcId"`
	Appid          uint32   `protobuf:"varint,3,opt,name=appid" json:"appid"`
	LoginSigType   uint32   `protobuf:"varint,4,opt,name=loginSigType" json:"loginSigType"`
	LoginSigTicket []byte   `protobuf:"bytes,5,opt,name=loginSigTicket" json:"loginSigTicket"`
	RequestFlag    uint32   `protobuf:"varint,6,opt,name=requestFlag" json:"requestFlag"`
	ServiceTypes   []uint32 `protobuf:"varint,7,rep,name=serviceTypes" json:"serviceTypes,omitempty"`
	Bid            uint32   `protobuf:"varint,8,opt,name=bid" json:"bid"`
}

func (m *SubCmd0X501ReqBody) Reset()         { *m = SubCmd0X501ReqBody{} }
func (m *SubCmd0X501ReqBody) String() string { return proto.CompactTextString(m) }
func (*SubCmd0X501ReqBody) ProtoMessage()    {}
func (*SubCmd0X501ReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_6afe98e549fd0028, []int{2}
}
func (m *SubCmd0X501ReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubCmd0X501ReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubCmd0X501ReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubCmd0X501ReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubCmd0X501ReqBody.Merge(m, src)
}
func (m *SubCmd0X501ReqBody) XXX_Size() int {
	return m.Size()
}
func (m *SubCmd0X501ReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_SubCmd0X501ReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_SubCmd0X501ReqBody proto.InternalMessageInfo

func (m *SubCmd0X501ReqBody) GetUin() uint64 {
	if m != nil {
		return m.Uin
	}
	return 0
}

func (m *SubCmd0X501ReqBody) GetIdcId() uint32 {
	if m != nil {
		return m.IdcId
	}
	return 0
}

func (m *SubCmd0X501ReqBody) GetAppid() uint32 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *SubCmd0X501ReqBody) GetLoginSigType() uint32 {
	if m != nil {
		return m.LoginSigType
	}
	return 0
}

func (m *SubCmd0X501ReqBody) GetLoginSigTicket() []byte {
	if m != nil {
		return m.LoginSigTicket
	}
	return nil
}

func (m *SubCmd0X501ReqBody) GetRequestFlag() uint32 {
	if m != nil {
		return m.RequestFlag
	}
	return 0
}

func (m *SubCmd0X501ReqBody) GetServiceTypes() []uint32 {
	if m != nil {
		return m.ServiceTypes
	}
	return nil
}

func (m *SubCmd0X501ReqBody) GetBid() uint32 {
	if m != nil {
		return m.Bid
	}
	return 0
}

type SubCmd0X501RspBody struct {
	SigSession []byte      `protobuf:"bytes,1,opt,name=sigSession" json:"sigSession"`
	SessionKey []byte      `protobuf:"bytes,2,opt,name=sessionKey" json:"sessionKey"`
	Addrs      []*SrvAddrs `protobuf:"bytes,3,rep,name=addrs" json:"addrs,omitempty"`
}

func (m *SubCmd0X501RspBody) Reset()         { *m = SubCmd0X501RspBody{} }
func (m *SubCmd0X501RspBody) String() string { return proto.CompactTextString(m) }
func (*SubCmd0X501RspBody) ProtoMessage()    {}
func (*SubCmd0X501RspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_6afe98e549fd0028, []int{3}
}
func (m *SubCmd0X501RspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubCmd0X501RspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubCmd0X501RspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubCmd0X501RspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubCmd0X501RspBody.Merge(m, src)
}
func (m *SubCmd0X501RspBody) XXX_Size() int {
	return m.Size()
}
func (m *SubCmd0X501RspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_SubCmd0X501RspBody.DiscardUnknown(m)
}

var xxx_messageInfo_SubCmd0X501RspBody proto.InternalMessageInfo

func (m *SubCmd0X501RspBody) GetSigSession() []byte {
	if m != nil {
		return m.SigSession
	}
	return nil
}

func (m *SubCmd0X501RspBody) GetSessionKey() []byte {
	if m != nil {
		return m.SessionKey
	}
	return nil
}

func (m *SubCmd0X501RspBody) GetAddrs() []*SrvAddrs {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type SrvAddrs struct {
	ServiceType uint32    `protobuf:"varint,1,opt,name=serviceType" json:"serviceType"`
	Addrs       []*IpAddr `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
}

func (m *SrvAddrs) Reset()         { *m = SrvAddrs{} }
func (m *SrvAddrs) String() string { return proto.CompactTextString(m) }
func (*SrvAddrs) ProtoMessage()    {}
func (*SrvAddrs) Descriptor() ([]byte, []int) {
	return fileDescriptor_6afe98e549fd0028, []int{4}
}
func (m *SrvAddrs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SrvAddrs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SrvAddrs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SrvAddrs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrvAddrs.Merge(m, src)
}
func (m *SrvAddrs) XXX_Size() int {
	return m.Size()
}
func (m *SrvAddrs) XXX_DiscardUnknown() {
	xxx_messageInfo_SrvAddrs.DiscardUnknown(m)
}

var xxx_messageInfo_SrvAddrs proto.InternalMessageInfo

func (m *SrvAddrs) GetServiceType() uint32 {
	if m != nil {
		return m.ServiceType
	}
	return 0
}

func (m *SrvAddrs) GetAddrs() []*IpAddr {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type IpAddr struct {
	Type uint32 `protobuf:"varint,1,opt,name=type" json:"type"`
	Ip   uint32 `protobuf:"fixed32,2,opt,name=ip" json:"ip"`
	Port uint32 `protobuf:"varint,3,opt,name=port" json:"port"`
	Area uint32 `protobuf:"varint,4,opt,name=area" json:"area"`
}

func (m *IpAddr) Reset()         { *m = IpAddr{} }
func (m *IpAddr) String() string { return proto.CompactTextString(m) }
func (*IpAddr) ProtoMessage()    {}
func (*IpAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_6afe98e549fd0028, []int{5}
}
func (m *IpAddr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IpAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IpAddr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IpAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpAddr.Merge(m, src)
}
func (m *IpAddr) XXX_Size() int {
	return m.Size()
}
func (m *IpAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_IpAddr.DiscardUnknown(m)
}

var xxx_messageInfo_IpAddr proto.InternalMessageInfo

func (m *IpAddr) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *IpAddr) GetIp() uint32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *IpAddr) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *IpAddr) GetArea() uint32 {
	if m != nil {
		return m.Area
	}
	return 0
}

func init() {
	proto.RegisterType((*C501ReqBody)(nil), "C501ReqBody")
	proto.RegisterType((*C501RspBody)(nil), "C501RspBody")
	proto.RegisterType((*SubCmd0X501ReqBody)(nil), "SubCmd0x501ReqBody")
	proto.RegisterType((*SubCmd0X501RspBody)(nil), "SubCmd0x501RspBody")
	proto.RegisterType((*SrvAddrs)(nil), "SrvAddrs")
	proto.RegisterType((*IpAddr)(nil), "IpAddr")
}

func init() {
	proto.RegisterFile("client/pb/cmd0x6ff/subcmd0x501.proto", fileDescriptor_6afe98e549fd0028)
}

var fileDescriptor_6afe98e549fd0028 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xeb, 0xa4, 0x5d, 0xc7, 0xdb, 0x8e, 0x83, 0x41, 0xc8, 0x42, 0x22, 0x8b, 0xa2, 0x0a,
	0xe5, 0x80, 0xd2, 0x6e, 0xd2, 0xb8, 0x20, 0x0e, 0x74, 0x12, 0xd2, 0xc4, 0x89, 0x84, 0x13, 0xb7,
	0x24, 0xf6, 0x22, 0x8b, 0xd0, 0x78, 0x71, 0x32, 0xd1, 0xe3, 0xbe, 0x01, 0x1f, 0x81, 0x8f, 0xb3,
	0xe3, 0x8e, 0x9c, 0x10, 0x6a, 0xbf, 0x08, 0xb2, 0xf3, 0x07, 0xa7, 0x70, 0x7b, 0xf3, 0x7b, 0x9e,
	0xf7, 0xb1, 0xdf, 0xd7, 0x0a, 0x2c, 0xd2, 0x9c, 0xb3, 0x4d, 0xb5, 0x14, 0xc9, 0x32, 0xfd, 0x4a,
	0x57, 0xdf, 0x5e, 0x5f, 0x5f, 0x2f, 0x65, 0x9d, 0xe8, 0xfa, 0x62, 0x75, 0x16, 0x88, 0xb2, 0xa8,
	0x0a, 0xef, 0x2d, 0xcc, 0x2e, 0x2f, 0x56, 0x67, 0x21, 0xbb, 0x59, 0x17, 0x74, 0x8b, 0x03, 0x98,
	0xb6, 0x25, 0xb9, 0x03, 0x17, 0xf9, 0xb3, 0xf3, 0x27, 0x41, 0x54, 0x27, 0x97, 0x6d, 0x53, 0xab,
	0x85, 0x9d, 0xa9, 0x6f, 0x97, 0xa2, 0x6f, 0x6f, 0xca, 0xff, 0xb7, 0x37, 0x5a, 0xd8, 0x99, 0xbc,
	0x1f, 0x16, 0xe0, 0x7f, 0xe3, 0xf1, 0x33, 0xb0, 0x6b, 0xbe, 0x21, 0xc8, 0x45, 0xfe, 0x78, 0x3d,
	0xbe, 0xff, 0x75, 0x3a, 0x0a, 0x15, 0xc0, 0xcf, 0x61, 0xc2, 0x69, 0x7a, 0x45, 0x89, 0xe5, 0x22,
	0xff, 0xa4, 0x55, 0x1a, 0xa4, 0xb4, 0x58, 0x08, 0x4e, 0x89, 0x6d, 0x6a, 0x1a, 0x61, 0x1f, 0xe6,
	0x79, 0x91, 0xf1, 0x4d, 0xc4, 0xb3, 0x4f, 0x5b, 0xc1, 0xc8, 0xd8, 0xb0, 0x0c, 0x14, 0xfc, 0x0a,
	0x1e, 0xf7, 0xdf, 0x3c, 0xfd, 0xc2, 0x2a, 0x32, 0x71, 0x91, 0x3f, 0x6f, 0xbd, 0x07, 0x1a, 0x7e,
	0x09, 0xb3, 0x92, 0xdd, 0xd4, 0x4c, 0x56, 0xef, 0xf3, 0x38, 0x23, 0x47, 0x46, 0xac, 0x29, 0x60,
	0x0f, 0xe6, 0x92, 0x95, 0xb7, 0x3c, 0x65, 0xea, 0x10, 0x49, 0xa6, 0xae, 0xed, 0x9f, 0x84, 0x03,
	0xa6, 0x66, 0x4e, 0x38, 0x25, 0xc7, 0x46, 0x86, 0x02, 0xde, 0x1d, 0x1a, 0xae, 0xa8, 0xdd, 0xf4,
	0x02, 0x40, 0xf2, 0x2c, 0x62, 0x52, 0xf2, 0xa2, 0xd9, 0x54, 0x77, 0x49, 0x83, 0x6b, 0x57, 0x53,
	0x7e, 0x60, 0x5b, 0xbd, 0xb5, 0xbf, 0xae, 0x9e, 0xe3, 0x53, 0x98, 0xc4, 0x94, 0x96, 0x92, 0xd8,
	0xae, 0xed, 0xcf, 0xce, 0x1f, 0x05, 0x51, 0x79, 0xfb, 0x4e, 0x81, 0xb0, 0xe1, 0xde, 0x47, 0x38,
	0xee, 0x90, 0x9a, 0xd9, 0xb8, 0xb7, 0x3e, 0xb9, 0x9f, 0xd9, 0x10, 0xf0, 0x8b, 0x2e, 0xd4, 0xd2,
	0xa1, 0xd3, 0xe0, 0x4a, 0xa8, 0x80, 0x2e, 0x32, 0x87, 0xa3, 0x06, 0x60, 0x02, 0xe3, 0xea, 0x30,
	0x49, 0x13, 0xfc, 0x14, 0x2c, 0x2e, 0xf4, 0xad, 0xa7, 0x2d, 0xb7, 0xb8, 0x50, 0x7e, 0x51, 0x94,
	0xd5, 0xe0, 0x9d, 0x35, 0x51, 0x4a, 0x5c, 0xb2, 0x78, 0xf0, 0xbc, 0x9a, 0xac, 0x17, 0xf7, 0x3b,
	0x07, 0x3d, 0xec, 0x1c, 0xf4, 0x7b, 0xe7, 0xa0, 0xef, 0x7b, 0x67, 0xf4, 0xb0, 0x77, 0x46, 0x3f,
	0xf7, 0xce, 0xe8, 0x33, 0x04, 0x6f, 0xba, 0xbf, 0xe3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1b,
	0x43, 0x29, 0xcb, 0x32, 0x03, 0x00, 0x00,
}

func (m *C501ReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C501ReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C501ReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReqBody != nil {
		{
			size, err := m.ReqBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSubcmd0X501(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x50
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}

func (m *C501RspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C501RspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C501RspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RspBody != nil {
		{
			size, err := m.RspBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSubcmd0X501(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x50
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}

func (m *SubCmd0X501ReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubCmd0X501ReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubCmd0X501ReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintSubcmd0X501(dAtA, i, uint64(m.Bid))
	i--
	dAtA[i] = 0x40
	if len(m.ServiceTypes) > 0 {
		for iNdEx := len(m.ServiceTypes) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintSubcmd0X501(dAtA, i, uint64(m.ServiceTypes[iNdEx]))
			i--
			dAtA[i] = 0x38
		}
	}
	i = encodeVarintSubcmd0X501(dAtA, i, uint64(m.RequestFlag))
	i--
	dAtA[i] = 0x30
	if m.LoginSigTicket != nil {
		i -= len(m.LoginSigTicket)
		copy(dAtA[i:], m.LoginSigTicket)
		i = encodeVarintSubcmd0X501(dAtA, i, uint64(len(m.LoginSigTicket)))
		i--
		dAtA[i] = 0x2a
	}
	i = encodeVarintSubcmd0X501(dAtA, i, uint64(m.LoginSigType))
	i--
	dAtA[i] = 0x20
	i = encodeVarintSubcmd0X501(dAtA, i, uint64(m.Appid))
	i--
	dAtA[i] = 0x18
	i = encodeVarintSubcmd0X501(dAtA, i, uint64(m.IdcId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintSubcmd0X501(dAtA, i, uint64(m.Uin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SubCmd0X501RspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubCmd0X501RspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubCmd0X501RspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Addrs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSubcmd0X501(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SessionKey != nil {
		i -= len(m.SessionKey)
		copy(dAtA[i:], m.SessionKey)
		i = encodeVarintSubcmd0X501(dAtA, i, uint64(len(m.SessionKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.SigSession != nil {
		i -= len(m.SigSession)
		copy(dAtA[i:], m.SigSession)
		i = encodeVarintSubcmd0X501(dAtA, i, uint64(len(m.SigSession)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SrvAddrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SrvAddrs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SrvAddrs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Addrs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSubcmd0X501(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintSubcmd0X501(dAtA, i, uint64(m.ServiceType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *IpAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IpAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintSubcmd0X501(dAtA, i, uint64(m.Area))
	i--
	dAtA[i] = 0x20
	i = encodeVarintSubcmd0X501(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x18
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Ip))
	i--
	dAtA[i] = 0x15
	i = encodeVarintSubcmd0X501(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintSubcmd0X501(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubcmd0X501(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *C501ReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReqBody != nil {
		l = m.ReqBody.Size()
		n += 2 + l + sovSubcmd0X501(uint64(l))
	}
	return n
}

func (m *C501RspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RspBody != nil {
		l = m.RspBody.Size()
		n += 2 + l + sovSubcmd0X501(uint64(l))
	}
	return n
}

func (m *SubCmd0X501ReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSubcmd0X501(uint64(m.Uin))
	n += 1 + sovSubcmd0X501(uint64(m.IdcId))
	n += 1 + sovSubcmd0X501(uint64(m.Appid))
	n += 1 + sovSubcmd0X501(uint64(m.LoginSigType))
	if m.LoginSigTicket != nil {
		l = len(m.LoginSigTicket)
		n += 1 + l + sovSubcmd0X501(uint64(l))
	}
	n += 1 + sovSubcmd0X501(uint64(m.RequestFlag))
	if len(m.ServiceTypes) > 0 {
		for _, e := range m.ServiceTypes {
			n += 1 + sovSubcmd0X501(uint64(e))
		}
	}
	n += 1 + sovSubcmd0X501(uint64(m.Bid))
	return n
}

func (m *SubCmd0X501RspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SigSession != nil {
		l = len(m.SigSession)
		n += 1 + l + sovSubcmd0X501(uint64(l))
	}
	if m.SessionKey != nil {
		l = len(m.SessionKey)
		n += 1 + l + sovSubcmd0X501(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, e := range m.Addrs {
			l = e.Size()
			n += 1 + l + sovSubcmd0X501(uint64(l))
		}
	}
	return n
}

func (m *SrvAddrs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSubcmd0X501(uint64(m.ServiceType))
	if len(m.Addrs) > 0 {
		for _, e := range m.Addrs {
			l = e.Size()
			n += 1 + l + sovSubcmd0X501(uint64(l))
		}
	}
	return n
}

func (m *IpAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSubcmd0X501(uint64(m.Type))
	n += 5
	n += 1 + sovSubcmd0X501(uint64(m.Port))
	n += 1 + sovSubcmd0X501(uint64(m.Area))
	return n
}

func sovSubcmd0X501(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubcmd0X501(x uint64) (n int) {
	return sovSubcmd0X501(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C501ReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubcmd0X501
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C501ReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C501ReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1281:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReqBody == nil {
				m.ReqBody = &SubCmd0X501ReqBody{}
			}
			if err := m.ReqBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubcmd0X501(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C501RspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubcmd0X501
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C501RspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C501RspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1281:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RspBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RspBody == nil {
				m.RspBody = &SubCmd0X501RspBody{}
			}
			if err := m.RspBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubcmd0X501(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubCmd0X501ReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubcmd0X501
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubCmd0x501ReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubCmd0x501ReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			m.Uin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdcId", wireType)
			}
			m.IdcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdcId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appid", wireType)
			}
			m.Appid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Appid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginSigType", wireType)
			}
			m.LoginSigType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginSigType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginSigTicket", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginSigTicket = append(m.LoginSigTicket[:0], dAtA[iNdEx:postIndex]...)
			if m.LoginSigTicket == nil {
				m.LoginSigTicket = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestFlag", wireType)
			}
			m.RequestFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubcmd0X501
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ServiceTypes = append(m.ServiceTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubcmd0X501
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSubcmd0X501
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSubcmd0X501
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ServiceTypes) == 0 {
					m.ServiceTypes = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSubcmd0X501
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ServiceTypes = append(m.ServiceTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceTypes", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubcmd0X501(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubCmd0X501RspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubcmd0X501
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubCmd0x501RspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubCmd0x501RspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigSession", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigSession = append(m.SigSession[:0], dAtA[iNdEx:postIndex]...)
			if m.SigSession == nil {
				m.SigSession = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionKey = append(m.SessionKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionKey == nil {
				m.SessionKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, &SrvAddrs{})
			if err := m.Addrs[len(m.Addrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubcmd0X501(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SrvAddrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubcmd0X501
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SrvAddrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SrvAddrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			m.ServiceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, &IpAddr{})
			if err := m.Addrs[len(m.Addrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubcmd0X501(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubcmd0X501
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			m.Ip = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubcmd0X501(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubcmd0X501
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubcmd0X501(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubcmd0X501
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubcmd0X501
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubcmd0X501
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubcmd0X501
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubcmd0X501
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubcmd0X501        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubcmd0X501          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubcmd0X501 = fmt.Errorf("proto: unexpected end of group")
)
