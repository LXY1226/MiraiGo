// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shortvideo.proto

package pttcenter

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ShortVideoReqBody struct {
	Cmd                      int32                  `protobuf:"varint,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Seq                      int32                  `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	PttShortVideoDownloadReq *ShortVideoDownloadReq `protobuf:"bytes,4,opt,name=pttShortVideoDownloadReq,proto3" json:"pttShortVideoDownloadReq,omitempty"`
}

func (m *ShortVideoReqBody) Reset()         { *m = ShortVideoReqBody{} }
func (m *ShortVideoReqBody) String() string { return proto.CompactTextString(m) }
func (*ShortVideoReqBody) ProtoMessage()    {}
func (*ShortVideoReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed5c8567d0e4ac0, []int{0}
}
func (m *ShortVideoReqBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShortVideoReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShortVideoReqBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShortVideoReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShortVideoReqBody.Merge(m, src)
}
func (m *ShortVideoReqBody) XXX_Size() int {
	return m.Size()
}
func (m *ShortVideoReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_ShortVideoReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_ShortVideoReqBody proto.InternalMessageInfo

func (m *ShortVideoReqBody) GetCmd() int32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *ShortVideoReqBody) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ShortVideoReqBody) GetPttShortVideoDownloadReq() *ShortVideoDownloadReq {
	if m != nil {
		return m.PttShortVideoDownloadReq
	}
	return nil
}

type ShortVideoRspBody struct {
	Cmd                      int32                  `protobuf:"varint,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Seq                      int32                  `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	PttShortVideoDownloadRsp *ShortVideoDownloadRsp `protobuf:"bytes,4,opt,name=pttShortVideoDownloadRsp,proto3" json:"pttShortVideoDownloadRsp,omitempty"`
}

func (m *ShortVideoRspBody) Reset()         { *m = ShortVideoRspBody{} }
func (m *ShortVideoRspBody) String() string { return proto.CompactTextString(m) }
func (*ShortVideoRspBody) ProtoMessage()    {}
func (*ShortVideoRspBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed5c8567d0e4ac0, []int{1}
}
func (m *ShortVideoRspBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShortVideoRspBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShortVideoRspBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShortVideoRspBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShortVideoRspBody.Merge(m, src)
}
func (m *ShortVideoRspBody) XXX_Size() int {
	return m.Size()
}
func (m *ShortVideoRspBody) XXX_DiscardUnknown() {
	xxx_messageInfo_ShortVideoRspBody.DiscardUnknown(m)
}

var xxx_messageInfo_ShortVideoRspBody proto.InternalMessageInfo

func (m *ShortVideoRspBody) GetCmd() int32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *ShortVideoRspBody) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ShortVideoRspBody) GetPttShortVideoDownloadRsp() *ShortVideoDownloadRsp {
	if m != nil {
		return m.PttShortVideoDownloadRsp
	}
	return nil
}

type ShortVideoDownloadReq struct {
	FromUin      int64  `protobuf:"varint,1,opt,name=fromUin,proto3" json:"fromUin,omitempty"`
	ToUin        int64  `protobuf:"varint,2,opt,name=toUin,proto3" json:"toUin,omitempty"`
	ChatType     int32  `protobuf:"varint,3,opt,name=chatType,proto3" json:"chatType,omitempty"`
	ClientType   int32  `protobuf:"varint,4,opt,name=clientType,proto3" json:"clientType,omitempty"`
	FileId       string `protobuf:"bytes,5,opt,name=fileId,proto3" json:"fileId,omitempty"`
	GroupCode    int64  `protobuf:"varint,6,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	AgentType    int32  `protobuf:"varint,7,opt,name=agentType,proto3" json:"agentType,omitempty"`
	FileMd5      []byte `protobuf:"bytes,8,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	BusinessType int32  `protobuf:"varint,9,opt,name=businessType,proto3" json:"businessType,omitempty"`
	FileType     int32  `protobuf:"varint,10,opt,name=fileType,proto3" json:"fileType,omitempty"`
	DownType     int32  `protobuf:"varint,11,opt,name=downType,proto3" json:"downType,omitempty"`
	SceneType    int32  `protobuf:"varint,12,opt,name=sceneType,proto3" json:"sceneType,omitempty"`
}

func (m *ShortVideoDownloadReq) Reset()         { *m = ShortVideoDownloadReq{} }
func (m *ShortVideoDownloadReq) String() string { return proto.CompactTextString(m) }
func (*ShortVideoDownloadReq) ProtoMessage()    {}
func (*ShortVideoDownloadReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed5c8567d0e4ac0, []int{2}
}
func (m *ShortVideoDownloadReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShortVideoDownloadReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShortVideoDownloadReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShortVideoDownloadReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShortVideoDownloadReq.Merge(m, src)
}
func (m *ShortVideoDownloadReq) XXX_Size() int {
	return m.Size()
}
func (m *ShortVideoDownloadReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ShortVideoDownloadReq.DiscardUnknown(m)
}

var xxx_messageInfo_ShortVideoDownloadReq proto.InternalMessageInfo

func (m *ShortVideoDownloadReq) GetFromUin() int64 {
	if m != nil {
		return m.FromUin
	}
	return 0
}

func (m *ShortVideoDownloadReq) GetToUin() int64 {
	if m != nil {
		return m.ToUin
	}
	return 0
}

func (m *ShortVideoDownloadReq) GetChatType() int32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *ShortVideoDownloadReq) GetClientType() int32 {
	if m != nil {
		return m.ClientType
	}
	return 0
}

func (m *ShortVideoDownloadReq) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *ShortVideoDownloadReq) GetGroupCode() int64 {
	if m != nil {
		return m.GroupCode
	}
	return 0
}

func (m *ShortVideoDownloadReq) GetAgentType() int32 {
	if m != nil {
		return m.AgentType
	}
	return 0
}

func (m *ShortVideoDownloadReq) GetFileMd5() []byte {
	if m != nil {
		return m.FileMd5
	}
	return nil
}

func (m *ShortVideoDownloadReq) GetBusinessType() int32 {
	if m != nil {
		return m.BusinessType
	}
	return 0
}

func (m *ShortVideoDownloadReq) GetFileType() int32 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *ShortVideoDownloadReq) GetDownType() int32 {
	if m != nil {
		return m.DownType
	}
	return 0
}

func (m *ShortVideoDownloadReq) GetSceneType() int32 {
	if m != nil {
		return m.SceneType
	}
	return 0
}

type ShortVideoDownloadRsp struct {
	RetCode           int32               `protobuf:"varint,1,opt,name=retCode,proto3" json:"retCode,omitempty"`
	RetMsg            string              `protobuf:"bytes,2,opt,name=retMsg,proto3" json:"retMsg,omitempty"`
	SameAreaOutAddr   []*ShortVideoIpList `protobuf:"bytes,3,rep,name=sameAreaOutAddr,proto3" json:"sameAreaOutAddr,omitempty"`
	DiffAreaOutAddr   []*ShortVideoIpList `protobuf:"bytes,4,rep,name=diffAreaOutAddr,proto3" json:"diffAreaOutAddr,omitempty"`
	DownloadKey       []byte              `protobuf:"bytes,5,opt,name=downloadKey,proto3" json:"downloadKey,omitempty"`
	FileMd5           []byte              `protobuf:"bytes,6,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	SameAreaInnerAddr []*ShortVideoIpList `protobuf:"bytes,7,rep,name=sameAreaInnerAddr,proto3" json:"sameAreaInnerAddr,omitempty"`
	DiffAreaInnerAddr []*ShortVideoIpList `protobuf:"bytes,8,rep,name=diffAreaInnerAddr,proto3" json:"diffAreaInnerAddr,omitempty"`
	DownloadAddr      *ShortVideoAddr     `protobuf:"bytes,9,opt,name=downloadAddr,proto3" json:"downloadAddr,omitempty"`
	EncryptKey        []byte              `protobuf:"bytes,10,opt,name=encryptKey,proto3" json:"encryptKey,omitempty"`
}

func (m *ShortVideoDownloadRsp) Reset()         { *m = ShortVideoDownloadRsp{} }
func (m *ShortVideoDownloadRsp) String() string { return proto.CompactTextString(m) }
func (*ShortVideoDownloadRsp) ProtoMessage()    {}
func (*ShortVideoDownloadRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed5c8567d0e4ac0, []int{3}
}
func (m *ShortVideoDownloadRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShortVideoDownloadRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShortVideoDownloadRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShortVideoDownloadRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShortVideoDownloadRsp.Merge(m, src)
}
func (m *ShortVideoDownloadRsp) XXX_Size() int {
	return m.Size()
}
func (m *ShortVideoDownloadRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ShortVideoDownloadRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ShortVideoDownloadRsp proto.InternalMessageInfo

func (m *ShortVideoDownloadRsp) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *ShortVideoDownloadRsp) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *ShortVideoDownloadRsp) GetSameAreaOutAddr() []*ShortVideoIpList {
	if m != nil {
		return m.SameAreaOutAddr
	}
	return nil
}

func (m *ShortVideoDownloadRsp) GetDiffAreaOutAddr() []*ShortVideoIpList {
	if m != nil {
		return m.DiffAreaOutAddr
	}
	return nil
}

func (m *ShortVideoDownloadRsp) GetDownloadKey() []byte {
	if m != nil {
		return m.DownloadKey
	}
	return nil
}

func (m *ShortVideoDownloadRsp) GetFileMd5() []byte {
	if m != nil {
		return m.FileMd5
	}
	return nil
}

func (m *ShortVideoDownloadRsp) GetSameAreaInnerAddr() []*ShortVideoIpList {
	if m != nil {
		return m.SameAreaInnerAddr
	}
	return nil
}

func (m *ShortVideoDownloadRsp) GetDiffAreaInnerAddr() []*ShortVideoIpList {
	if m != nil {
		return m.DiffAreaInnerAddr
	}
	return nil
}

func (m *ShortVideoDownloadRsp) GetDownloadAddr() *ShortVideoAddr {
	if m != nil {
		return m.DownloadAddr
	}
	return nil
}

func (m *ShortVideoDownloadRsp) GetEncryptKey() []byte {
	if m != nil {
		return m.EncryptKey
	}
	return nil
}

type ShortVideoIpList struct {
	Ip   int32 `protobuf:"varint,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *ShortVideoIpList) Reset()         { *m = ShortVideoIpList{} }
func (m *ShortVideoIpList) String() string { return proto.CompactTextString(m) }
func (*ShortVideoIpList) ProtoMessage()    {}
func (*ShortVideoIpList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed5c8567d0e4ac0, []int{4}
}
func (m *ShortVideoIpList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShortVideoIpList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShortVideoIpList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShortVideoIpList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShortVideoIpList.Merge(m, src)
}
func (m *ShortVideoIpList) XXX_Size() int {
	return m.Size()
}
func (m *ShortVideoIpList) XXX_DiscardUnknown() {
	xxx_messageInfo_ShortVideoIpList.DiscardUnknown(m)
}

var xxx_messageInfo_ShortVideoIpList proto.InternalMessageInfo

func (m *ShortVideoIpList) GetIp() int32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *ShortVideoIpList) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type ShortVideoAddr struct {
	Host    []string `protobuf:"bytes,10,rep,name=host,proto3" json:"host,omitempty"`
	UrlArgs string   `protobuf:"bytes,11,opt,name=urlArgs,proto3" json:"urlArgs,omitempty"`
}

func (m *ShortVideoAddr) Reset()         { *m = ShortVideoAddr{} }
func (m *ShortVideoAddr) String() string { return proto.CompactTextString(m) }
func (*ShortVideoAddr) ProtoMessage()    {}
func (*ShortVideoAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ed5c8567d0e4ac0, []int{5}
}
func (m *ShortVideoAddr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShortVideoAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShortVideoAddr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShortVideoAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShortVideoAddr.Merge(m, src)
}
func (m *ShortVideoAddr) XXX_Size() int {
	return m.Size()
}
func (m *ShortVideoAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_ShortVideoAddr.DiscardUnknown(m)
}

var xxx_messageInfo_ShortVideoAddr proto.InternalMessageInfo

func (m *ShortVideoAddr) GetHost() []string {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *ShortVideoAddr) GetUrlArgs() string {
	if m != nil {
		return m.UrlArgs
	}
	return ""
}

func init() {
	proto.RegisterType((*ShortVideoReqBody)(nil), "ShortVideoReqBody")
	proto.RegisterType((*ShortVideoRspBody)(nil), "ShortVideoRspBody")
	proto.RegisterType((*ShortVideoDownloadReq)(nil), "ShortVideoDownloadReq")
	proto.RegisterType((*ShortVideoDownloadRsp)(nil), "ShortVideoDownloadRsp")
	proto.RegisterType((*ShortVideoIpList)(nil), "ShortVideoIpList")
	proto.RegisterType((*ShortVideoAddr)(nil), "ShortVideoAddr")
}

func init() { proto.RegisterFile("shortvideo.proto", fileDescriptor_9ed5c8567d0e4ac0) }

var fileDescriptor_9ed5c8567d0e4ac0 = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0x8d, 0x31, 0x01, 0x3c, 0xa0, 0x04, 0x56, 0x6d, 0x64, 0x55, 0x95, 0x65, 0x59, 0xaa, 0xe4,
	0x13, 0x87, 0x44, 0xed, 0x25, 0x52, 0x2b, 0xd2, 0x5e, 0x50, 0x1b, 0x55, 0xda, 0x7e, 0x1c, 0x7a,
	0x23, 0xde, 0x05, 0x2c, 0x81, 0x77, 0xd9, 0x5d, 0x1a, 0xf1, 0x1b, 0x7a, 0xe9, 0xcf, 0xea, 0x31,
	0xa7, 0xaa, 0xc7, 0x0a, 0x8e, 0xfd, 0x13, 0xd5, 0x8e, 0x71, 0x30, 0x04, 0x7a, 0xe9, 0x6d, 0xdf,
	0x9b, 0x79, 0x33, 0x6f, 0xc6, 0xbb, 0x86, 0xb6, 0x1e, 0x0b, 0x65, 0xbe, 0xa6, 0x8c, 0x8b, 0xae,
	0x54, 0xc2, 0x88, 0xe8, 0x9b, 0x03, 0x9d, 0x0f, 0x96, 0xfc, 0x6c, 0x49, 0xca, 0x67, 0x57, 0x82,
	0x2d, 0x48, 0x1b, 0xdc, 0x64, 0xca, 0x7c, 0x27, 0x74, 0xe2, 0x63, 0x6a, 0x8f, 0x96, 0xd1, 0x7c,
	0xe6, 0x57, 0x72, 0x46, 0xf3, 0x19, 0xa1, 0xe0, 0x4b, 0x63, 0x36, 0xda, 0x37, 0xe2, 0x36, 0x9b,
	0x88, 0x01, 0xa3, 0x7c, 0xe6, 0x57, 0x43, 0x27, 0x6e, 0x9e, 0x9f, 0x75, 0xf7, 0x46, 0xe9, 0x41,
	0xdd, 0xae, 0x1b, 0x2d, 0xff, 0xdf, 0x8d, 0x96, 0xff, 0x72, 0xa3, 0x25, 0x3d, 0xa8, 0x8b, 0xfe,
	0x54, 0xe0, 0xf1, 0x5e, 0x9f, 0xc4, 0x87, 0xfa, 0x50, 0x89, 0xe9, 0xa7, 0x34, 0x43, 0x57, 0x2e,
	0x2d, 0x20, 0x79, 0x04, 0xc7, 0x46, 0x58, 0xbe, 0x82, 0x7c, 0x0e, 0xc8, 0x13, 0x68, 0x24, 0xe3,
	0x81, 0xf9, 0xb8, 0x90, 0xdc, 0x77, 0xd1, 0xf4, 0x3d, 0x26, 0x01, 0x40, 0x32, 0x49, 0x79, 0x96,
	0x47, 0xab, 0x18, 0x2d, 0x31, 0xe4, 0x0c, 0x6a, 0xc3, 0x74, 0xc2, 0xfb, 0xcc, 0x3f, 0x0e, 0x9d,
	0xd8, 0xa3, 0x6b, 0x44, 0x9e, 0x82, 0x37, 0x52, 0x62, 0x2e, 0x5f, 0x0b, 0xc6, 0xfd, 0x1a, 0x76,
	0xdb, 0x10, 0x36, 0x3a, 0x18, 0x15, 0x45, 0xeb, 0x58, 0x74, 0x43, 0xa0, 0xff, 0x74, 0xc2, 0xaf,
	0xd9, 0x73, 0xbf, 0x11, 0x3a, 0x71, 0x8b, 0x16, 0x90, 0x44, 0xd0, 0xba, 0x99, 0xeb, 0x34, 0xe3,
	0x5a, 0xa3, 0xd4, 0x43, 0xe9, 0x16, 0x67, 0xa7, 0xb1, 0xe9, 0x18, 0x87, 0x7c, 0x9a, 0x02, 0xdb,
	0x18, 0x13, 0xb7, 0x19, 0xc6, 0x9a, 0x79, 0xac, 0xc0, 0xd6, 0x93, 0x4e, 0x78, 0x96, 0x0b, 0x5b,
	0xb9, 0xa7, 0x7b, 0x22, 0xfa, 0xe9, 0xee, 0xdd, 0xb6, 0x96, 0xd6, 0xad, 0xe2, 0x06, 0xe7, 0xcc,
	0xef, 0x40, 0x01, 0xed, 0x6e, 0x14, 0x37, 0xd7, 0x7a, 0x84, 0xeb, 0xf6, 0xe8, 0x1a, 0x91, 0x4b,
	0x38, 0xd5, 0x83, 0x29, 0xef, 0x29, 0x3e, 0x78, 0x3f, 0x37, 0x3d, 0xc6, 0x94, 0xef, 0x86, 0x6e,
	0xdc, 0x3c, 0xef, 0x94, 0x2e, 0x41, 0x5f, 0xbe, 0x4b, 0xb5, 0xa1, 0xbb, 0x99, 0x56, 0xcc, 0xd2,
	0xe1, 0xb0, 0x2c, 0xae, 0x1e, 0x14, 0xef, 0x64, 0x92, 0x10, 0x9a, 0x6c, 0x6d, 0xfd, 0x2d, 0x5f,
	0xe0, 0x27, 0x6b, 0xd1, 0x32, 0x55, 0xde, 0x7d, 0x6d, 0x7b, 0xf7, 0xaf, 0xa0, 0x53, 0x78, 0xe9,
	0x67, 0x19, 0x57, 0xd8, 0xba, 0x7e, 0xa8, 0xf5, 0xc3, 0x5c, 0x5b, 0xa0, 0xf0, 0xb3, 0x29, 0xd0,
	0x38, 0x58, 0xe0, 0x41, 0x2e, 0xb9, 0x80, 0x56, 0x61, 0x15, 0xb5, 0x1e, 0xbe, 0x9c, 0xd3, 0x92,
	0xd6, 0xd2, 0x74, 0x2b, 0xc9, 0x5e, 0x60, 0x9e, 0x25, 0x6a, 0x21, 0x8d, 0x9d, 0x18, 0x70, 0xa6,
	0x12, 0x13, 0xbd, 0x80, 0xf6, 0x6e, 0x6f, 0x72, 0x02, 0x95, 0x54, 0xae, 0xbf, 0x66, 0x25, 0x95,
	0x84, 0x40, 0x55, 0x0a, 0x65, 0xd6, 0x2f, 0x1a, 0xcf, 0xd1, 0x4b, 0x38, 0xd9, 0xee, 0x6b, 0xb3,
	0xc6, 0x42, 0x1b, 0x1f, 0x42, 0x37, 0xf6, 0x28, 0x9e, 0xed, 0x3a, 0xe7, 0x6a, 0xd2, 0x53, 0x23,
	0x8d, 0xf7, 0xcd, 0xa3, 0x05, 0xbc, 0x7a, 0xf6, 0x63, 0x19, 0x38, 0x77, 0xcb, 0xc0, 0xf9, 0xbd,
	0x0c, 0x9c, 0xef, 0xab, 0xe0, 0xe8, 0x6e, 0x15, 0x1c, 0xfd, 0x5a, 0x05, 0x47, 0x5f, 0x9a, 0xdd,
	0x4b, 0x69, 0x4c, 0xc2, 0x33, 0xc3, 0xd5, 0x4d, 0x0d, 0x7f, 0x84, 0x17, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x91, 0x7d, 0x4a, 0x33, 0x1c, 0x05, 0x00, 0x00,
}

func (m *ShortVideoReqBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShortVideoReqBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShortVideoReqBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PttShortVideoDownloadReq != nil {
		{
			size, err := m.PttShortVideoDownloadReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShortvideo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Seq != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x10
	}
	if m.Cmd != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.Cmd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShortVideoRspBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShortVideoRspBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShortVideoRspBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PttShortVideoDownloadRsp != nil {
		{
			size, err := m.PttShortVideoDownloadRsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShortvideo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Seq != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x10
	}
	if m.Cmd != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.Cmd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShortVideoDownloadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShortVideoDownloadReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShortVideoDownloadReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SceneType != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.SceneType))
		i--
		dAtA[i] = 0x60
	}
	if m.DownType != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.DownType))
		i--
		dAtA[i] = 0x58
	}
	if m.FileType != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.FileType))
		i--
		dAtA[i] = 0x50
	}
	if m.BusinessType != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.BusinessType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.FileMd5) > 0 {
		i -= len(m.FileMd5)
		copy(dAtA[i:], m.FileMd5)
		i = encodeVarintShortvideo(dAtA, i, uint64(len(m.FileMd5)))
		i--
		dAtA[i] = 0x42
	}
	if m.AgentType != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.AgentType))
		i--
		dAtA[i] = 0x38
	}
	if m.GroupCode != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.GroupCode))
		i--
		dAtA[i] = 0x30
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintShortvideo(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ClientType != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.ClientType))
		i--
		dAtA[i] = 0x20
	}
	if m.ChatType != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.ChatType))
		i--
		dAtA[i] = 0x18
	}
	if m.ToUin != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.ToUin))
		i--
		dAtA[i] = 0x10
	}
	if m.FromUin != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.FromUin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShortVideoDownloadRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShortVideoDownloadRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShortVideoDownloadRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptKey) > 0 {
		i -= len(m.EncryptKey)
		copy(dAtA[i:], m.EncryptKey)
		i = encodeVarintShortvideo(dAtA, i, uint64(len(m.EncryptKey)))
		i--
		dAtA[i] = 0x52
	}
	if m.DownloadAddr != nil {
		{
			size, err := m.DownloadAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShortvideo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DiffAreaInnerAddr) > 0 {
		for iNdEx := len(m.DiffAreaInnerAddr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DiffAreaInnerAddr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShortvideo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SameAreaInnerAddr) > 0 {
		for iNdEx := len(m.SameAreaInnerAddr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SameAreaInnerAddr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShortvideo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.FileMd5) > 0 {
		i -= len(m.FileMd5)
		copy(dAtA[i:], m.FileMd5)
		i = encodeVarintShortvideo(dAtA, i, uint64(len(m.FileMd5)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DownloadKey) > 0 {
		i -= len(m.DownloadKey)
		copy(dAtA[i:], m.DownloadKey)
		i = encodeVarintShortvideo(dAtA, i, uint64(len(m.DownloadKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DiffAreaOutAddr) > 0 {
		for iNdEx := len(m.DiffAreaOutAddr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DiffAreaOutAddr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShortvideo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SameAreaOutAddr) > 0 {
		for iNdEx := len(m.SameAreaOutAddr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SameAreaOutAddr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShortvideo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RetMsg) > 0 {
		i -= len(m.RetMsg)
		copy(dAtA[i:], m.RetMsg)
		i = encodeVarintShortvideo(dAtA, i, uint64(len(m.RetMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.RetCode != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.RetCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShortVideoIpList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShortVideoIpList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShortVideoIpList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if m.Ip != 0 {
		i = encodeVarintShortvideo(dAtA, i, uint64(m.Ip))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShortVideoAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShortVideoAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShortVideoAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UrlArgs) > 0 {
		i -= len(m.UrlArgs)
		copy(dAtA[i:], m.UrlArgs)
		i = encodeVarintShortvideo(dAtA, i, uint64(len(m.UrlArgs)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Host) > 0 {
		for iNdEx := len(m.Host) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Host[iNdEx])
			copy(dAtA[i:], m.Host[iNdEx])
			i = encodeVarintShortvideo(dAtA, i, uint64(len(m.Host[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintShortvideo(dAtA []byte, offset int, v uint64) int {
	offset -= sovShortvideo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ShortVideoReqBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != 0 {
		n += 1 + sovShortvideo(uint64(m.Cmd))
	}
	if m.Seq != 0 {
		n += 1 + sovShortvideo(uint64(m.Seq))
	}
	if m.PttShortVideoDownloadReq != nil {
		l = m.PttShortVideoDownloadReq.Size()
		n += 1 + l + sovShortvideo(uint64(l))
	}
	return n
}

func (m *ShortVideoRspBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != 0 {
		n += 1 + sovShortvideo(uint64(m.Cmd))
	}
	if m.Seq != 0 {
		n += 1 + sovShortvideo(uint64(m.Seq))
	}
	if m.PttShortVideoDownloadRsp != nil {
		l = m.PttShortVideoDownloadRsp.Size()
		n += 1 + l + sovShortvideo(uint64(l))
	}
	return n
}

func (m *ShortVideoDownloadReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromUin != 0 {
		n += 1 + sovShortvideo(uint64(m.FromUin))
	}
	if m.ToUin != 0 {
		n += 1 + sovShortvideo(uint64(m.ToUin))
	}
	if m.ChatType != 0 {
		n += 1 + sovShortvideo(uint64(m.ChatType))
	}
	if m.ClientType != 0 {
		n += 1 + sovShortvideo(uint64(m.ClientType))
	}
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovShortvideo(uint64(l))
	}
	if m.GroupCode != 0 {
		n += 1 + sovShortvideo(uint64(m.GroupCode))
	}
	if m.AgentType != 0 {
		n += 1 + sovShortvideo(uint64(m.AgentType))
	}
	l = len(m.FileMd5)
	if l > 0 {
		n += 1 + l + sovShortvideo(uint64(l))
	}
	if m.BusinessType != 0 {
		n += 1 + sovShortvideo(uint64(m.BusinessType))
	}
	if m.FileType != 0 {
		n += 1 + sovShortvideo(uint64(m.FileType))
	}
	if m.DownType != 0 {
		n += 1 + sovShortvideo(uint64(m.DownType))
	}
	if m.SceneType != 0 {
		n += 1 + sovShortvideo(uint64(m.SceneType))
	}
	return n
}

func (m *ShortVideoDownloadRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetCode != 0 {
		n += 1 + sovShortvideo(uint64(m.RetCode))
	}
	l = len(m.RetMsg)
	if l > 0 {
		n += 1 + l + sovShortvideo(uint64(l))
	}
	if len(m.SameAreaOutAddr) > 0 {
		for _, e := range m.SameAreaOutAddr {
			l = e.Size()
			n += 1 + l + sovShortvideo(uint64(l))
		}
	}
	if len(m.DiffAreaOutAddr) > 0 {
		for _, e := range m.DiffAreaOutAddr {
			l = e.Size()
			n += 1 + l + sovShortvideo(uint64(l))
		}
	}
	l = len(m.DownloadKey)
	if l > 0 {
		n += 1 + l + sovShortvideo(uint64(l))
	}
	l = len(m.FileMd5)
	if l > 0 {
		n += 1 + l + sovShortvideo(uint64(l))
	}
	if len(m.SameAreaInnerAddr) > 0 {
		for _, e := range m.SameAreaInnerAddr {
			l = e.Size()
			n += 1 + l + sovShortvideo(uint64(l))
		}
	}
	if len(m.DiffAreaInnerAddr) > 0 {
		for _, e := range m.DiffAreaInnerAddr {
			l = e.Size()
			n += 1 + l + sovShortvideo(uint64(l))
		}
	}
	if m.DownloadAddr != nil {
		l = m.DownloadAddr.Size()
		n += 1 + l + sovShortvideo(uint64(l))
	}
	l = len(m.EncryptKey)
	if l > 0 {
		n += 1 + l + sovShortvideo(uint64(l))
	}
	return n
}

func (m *ShortVideoIpList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ip != 0 {
		n += 1 + sovShortvideo(uint64(m.Ip))
	}
	if m.Port != 0 {
		n += 1 + sovShortvideo(uint64(m.Port))
	}
	return n
}

func (m *ShortVideoAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Host) > 0 {
		for _, s := range m.Host {
			l = len(s)
			n += 1 + l + sovShortvideo(uint64(l))
		}
	}
	l = len(m.UrlArgs)
	if l > 0 {
		n += 1 + l + sovShortvideo(uint64(l))
	}
	return n
}

func sovShortvideo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShortvideo(x uint64) (n int) {
	return sovShortvideo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShortVideoReqBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShortvideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShortVideoReqBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShortVideoReqBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PttShortVideoDownloadReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PttShortVideoDownloadReq == nil {
				m.PttShortVideoDownloadReq = &ShortVideoDownloadReq{}
			}
			if err := m.PttShortVideoDownloadReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShortvideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShortvideo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShortvideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShortVideoRspBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShortvideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShortVideoRspBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShortVideoRspBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PttShortVideoDownloadRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PttShortVideoDownloadRsp == nil {
				m.PttShortVideoDownloadRsp = &ShortVideoDownloadRsp{}
			}
			if err := m.PttShortVideoDownloadRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShortvideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShortvideo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShortvideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShortVideoDownloadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShortvideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShortVideoDownloadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShortVideoDownloadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromUin", wireType)
			}
			m.FromUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromUin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUin", wireType)
			}
			m.ToUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToUin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			m.ClientType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCode", wireType)
			}
			m.GroupCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentType", wireType)
			}
			m.AgentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileMd5", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileMd5 = append(m.FileMd5[:0], dAtA[iNdEx:postIndex]...)
			if m.FileMd5 == nil {
				m.FileMd5 = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessType", wireType)
			}
			m.BusinessType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownType", wireType)
			}
			m.DownType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneType", wireType)
			}
			m.SceneType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SceneType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShortvideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShortvideo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShortvideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShortVideoDownloadRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShortvideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShortVideoDownloadRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShortVideoDownloadRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SameAreaOutAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SameAreaOutAddr = append(m.SameAreaOutAddr, &ShortVideoIpList{})
			if err := m.SameAreaOutAddr[len(m.SameAreaOutAddr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffAreaOutAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiffAreaOutAddr = append(m.DiffAreaOutAddr, &ShortVideoIpList{})
			if err := m.DiffAreaOutAddr[len(m.DiffAreaOutAddr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadKey = append(m.DownloadKey[:0], dAtA[iNdEx:postIndex]...)
			if m.DownloadKey == nil {
				m.DownloadKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileMd5", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileMd5 = append(m.FileMd5[:0], dAtA[iNdEx:postIndex]...)
			if m.FileMd5 == nil {
				m.FileMd5 = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SameAreaInnerAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SameAreaInnerAddr = append(m.SameAreaInnerAddr, &ShortVideoIpList{})
			if err := m.SameAreaInnerAddr[len(m.SameAreaInnerAddr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffAreaInnerAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiffAreaInnerAddr = append(m.DiffAreaInnerAddr, &ShortVideoIpList{})
			if err := m.DiffAreaInnerAddr[len(m.DiffAreaInnerAddr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownloadAddr == nil {
				m.DownloadAddr = &ShortVideoAddr{}
			}
			if err := m.DownloadAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptKey = append(m.EncryptKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptKey == nil {
				m.EncryptKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShortvideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShortvideo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShortvideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShortVideoIpList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShortvideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShortVideoIpList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShortVideoIpList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			m.Ip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShortvideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShortvideo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShortvideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShortVideoAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShortvideo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShortVideoAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShortVideoAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = append(m.Host, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShortvideo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShortvideo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlArgs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShortvideo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShortvideo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShortvideo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShortvideo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShortvideo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShortvideo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShortvideo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShortvideo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShortvideo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShortvideo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShortvideo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShortvideo = fmt.Errorf("proto: unexpected end of group")
)
