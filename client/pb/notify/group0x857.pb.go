// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/pb/notify/group0x857.proto

package notify

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NotifyMsgBody struct {
	OptMsgGrayTips    *AIOGrayTipsInfo       `protobuf:"bytes,5,opt,name=optMsgGrayTips,proto3" json:"optMsgGrayTips,omitempty"`
	OptMsgRedTips     *RedGrayTipsInfo       `protobuf:"bytes,9,opt,name=optMsgRedTips,proto3" json:"optMsgRedTips,omitempty"`
	OptMsgRecall      *MessageRecallReminder `protobuf:"bytes,11,opt,name=optMsgRecall,proto3" json:"optMsgRecall,omitempty"`
	OptGeneralGrayTip *GeneralGrayTipInfo    `protobuf:"bytes,26,opt,name=optGeneralGrayTip,proto3" json:"optGeneralGrayTip,omitempty"`
	ServiceType       int32                  `protobuf:"varint,13,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
}

func (m *NotifyMsgBody) Reset()         { *m = NotifyMsgBody{} }
func (m *NotifyMsgBody) String() string { return proto.CompactTextString(m) }
func (*NotifyMsgBody) ProtoMessage()    {}
func (*NotifyMsgBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_c985ba69a0a8234f, []int{0}
}
func (m *NotifyMsgBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyMsgBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyMsgBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyMsgBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyMsgBody.Merge(m, src)
}
func (m *NotifyMsgBody) XXX_Size() int {
	return m.Size()
}
func (m *NotifyMsgBody) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyMsgBody.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyMsgBody proto.InternalMessageInfo

func (m *NotifyMsgBody) GetOptMsgGrayTips() *AIOGrayTipsInfo {
	if m != nil {
		return m.OptMsgGrayTips
	}
	return nil
}

func (m *NotifyMsgBody) GetOptMsgRedTips() *RedGrayTipsInfo {
	if m != nil {
		return m.OptMsgRedTips
	}
	return nil
}

func (m *NotifyMsgBody) GetOptMsgRecall() *MessageRecallReminder {
	if m != nil {
		return m.OptMsgRecall
	}
	return nil
}

func (m *NotifyMsgBody) GetOptGeneralGrayTip() *GeneralGrayTipInfo {
	if m != nil {
		return m.OptGeneralGrayTip
	}
	return nil
}

func (m *NotifyMsgBody) GetServiceType() int32 {
	if m != nil {
		return m.ServiceType
	}
	return 0
}

type AIOGrayTipsInfo struct {
	ShowLatest     uint32 `protobuf:"varint,1,opt,name=showLatest,proto3" json:"showLatest,omitempty"`
	Content        []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Remind         uint32 `protobuf:"varint,3,opt,name=remind,proto3" json:"remind,omitempty"`
	Brief          []byte `protobuf:"bytes,4,opt,name=brief,proto3" json:"brief,omitempty"`
	ReceiverUin    uint64 `protobuf:"varint,5,opt,name=receiverUin,proto3" json:"receiverUin,omitempty"`
	ReliaoAdminOpt uint32 `protobuf:"varint,6,opt,name=reliaoAdminOpt,proto3" json:"reliaoAdminOpt,omitempty"`
}

func (m *AIOGrayTipsInfo) Reset()         { *m = AIOGrayTipsInfo{} }
func (m *AIOGrayTipsInfo) String() string { return proto.CompactTextString(m) }
func (*AIOGrayTipsInfo) ProtoMessage()    {}
func (*AIOGrayTipsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c985ba69a0a8234f, []int{1}
}
func (m *AIOGrayTipsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AIOGrayTipsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AIOGrayTipsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AIOGrayTipsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AIOGrayTipsInfo.Merge(m, src)
}
func (m *AIOGrayTipsInfo) XXX_Size() int {
	return m.Size()
}
func (m *AIOGrayTipsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AIOGrayTipsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AIOGrayTipsInfo proto.InternalMessageInfo

func (m *AIOGrayTipsInfo) GetShowLatest() uint32 {
	if m != nil {
		return m.ShowLatest
	}
	return 0
}

func (m *AIOGrayTipsInfo) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *AIOGrayTipsInfo) GetRemind() uint32 {
	if m != nil {
		return m.Remind
	}
	return 0
}

func (m *AIOGrayTipsInfo) GetBrief() []byte {
	if m != nil {
		return m.Brief
	}
	return nil
}

func (m *AIOGrayTipsInfo) GetReceiverUin() uint64 {
	if m != nil {
		return m.ReceiverUin
	}
	return 0
}

func (m *AIOGrayTipsInfo) GetReliaoAdminOpt() uint32 {
	if m != nil {
		return m.ReliaoAdminOpt
	}
	return 0
}

type GeneralGrayTipInfo struct {
	BusiType      uint64        `protobuf:"varint,1,opt,name=busiType,proto3" json:"busiType,omitempty"`
	BusiId        uint64        `protobuf:"varint,2,opt,name=busiId,proto3" json:"busiId,omitempty"`
	CtrlFlag      uint32        `protobuf:"varint,3,opt,name=ctrlFlag,proto3" json:"ctrlFlag,omitempty"`
	C2CType       uint32        `protobuf:"varint,4,opt,name=c2cType,proto3" json:"c2cType,omitempty"`
	ServiceType   uint32        `protobuf:"varint,5,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	TemplId       uint64        `protobuf:"varint,6,opt,name=templId,proto3" json:"templId,omitempty"`
	MsgTemplParam []*TemplParam `protobuf:"bytes,7,rep,name=msgTemplParam,proto3" json:"msgTemplParam,omitempty"`
	Content       string        `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *GeneralGrayTipInfo) Reset()         { *m = GeneralGrayTipInfo{} }
func (m *GeneralGrayTipInfo) String() string { return proto.CompactTextString(m) }
func (*GeneralGrayTipInfo) ProtoMessage()    {}
func (*GeneralGrayTipInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c985ba69a0a8234f, []int{2}
}
func (m *GeneralGrayTipInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeneralGrayTipInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeneralGrayTipInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeneralGrayTipInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralGrayTipInfo.Merge(m, src)
}
func (m *GeneralGrayTipInfo) XXX_Size() int {
	return m.Size()
}
func (m *GeneralGrayTipInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralGrayTipInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralGrayTipInfo proto.InternalMessageInfo

func (m *GeneralGrayTipInfo) GetBusiType() uint64 {
	if m != nil {
		return m.BusiType
	}
	return 0
}

func (m *GeneralGrayTipInfo) GetBusiId() uint64 {
	if m != nil {
		return m.BusiId
	}
	return 0
}

func (m *GeneralGrayTipInfo) GetCtrlFlag() uint32 {
	if m != nil {
		return m.CtrlFlag
	}
	return 0
}

func (m *GeneralGrayTipInfo) GetC2CType() uint32 {
	if m != nil {
		return m.C2CType
	}
	return 0
}

func (m *GeneralGrayTipInfo) GetServiceType() uint32 {
	if m != nil {
		return m.ServiceType
	}
	return 0
}

func (m *GeneralGrayTipInfo) GetTemplId() uint64 {
	if m != nil {
		return m.TemplId
	}
	return 0
}

func (m *GeneralGrayTipInfo) GetMsgTemplParam() []*TemplParam {
	if m != nil {
		return m.MsgTemplParam
	}
	return nil
}

func (m *GeneralGrayTipInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type TemplParam struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *TemplParam) Reset()         { *m = TemplParam{} }
func (m *TemplParam) String() string { return proto.CompactTextString(m) }
func (*TemplParam) ProtoMessage()    {}
func (*TemplParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_c985ba69a0a8234f, []int{3}
}
func (m *TemplParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TemplParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TemplParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TemplParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemplParam.Merge(m, src)
}
func (m *TemplParam) XXX_Size() int {
	return m.Size()
}
func (m *TemplParam) XXX_DiscardUnknown() {
	xxx_messageInfo_TemplParam.DiscardUnknown(m)
}

var xxx_messageInfo_TemplParam proto.InternalMessageInfo

func (m *TemplParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TemplParam) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MessageRecallReminder struct {
	Uin             int64                  `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	Nickname        []byte                 `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	RecalledMsgList []*RecalledMessageMeta `protobuf:"bytes,3,rep,name=recalledMsgList,proto3" json:"recalledMsgList,omitempty"`
	ReminderContent []byte                 `protobuf:"bytes,4,opt,name=reminderContent,proto3" json:"reminderContent,omitempty"`
	Userdef         []byte                 `protobuf:"bytes,5,opt,name=userdef,proto3" json:"userdef,omitempty"`
	GroupType       int32                  `protobuf:"varint,6,opt,name=groupType,proto3" json:"groupType,omitempty"`
	OpType          int32                  `protobuf:"varint,7,opt,name=opType,proto3" json:"opType,omitempty"`
}

func (m *MessageRecallReminder) Reset()         { *m = MessageRecallReminder{} }
func (m *MessageRecallReminder) String() string { return proto.CompactTextString(m) }
func (*MessageRecallReminder) ProtoMessage()    {}
func (*MessageRecallReminder) Descriptor() ([]byte, []int) {
	return fileDescriptor_c985ba69a0a8234f, []int{4}
}
func (m *MessageRecallReminder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageRecallReminder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageRecallReminder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageRecallReminder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageRecallReminder.Merge(m, src)
}
func (m *MessageRecallReminder) XXX_Size() int {
	return m.Size()
}
func (m *MessageRecallReminder) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageRecallReminder.DiscardUnknown(m)
}

var xxx_messageInfo_MessageRecallReminder proto.InternalMessageInfo

func (m *MessageRecallReminder) GetUin() int64 {
	if m != nil {
		return m.Uin
	}
	return 0
}

func (m *MessageRecallReminder) GetNickname() []byte {
	if m != nil {
		return m.Nickname
	}
	return nil
}

func (m *MessageRecallReminder) GetRecalledMsgList() []*RecalledMessageMeta {
	if m != nil {
		return m.RecalledMsgList
	}
	return nil
}

func (m *MessageRecallReminder) GetReminderContent() []byte {
	if m != nil {
		return m.ReminderContent
	}
	return nil
}

func (m *MessageRecallReminder) GetUserdef() []byte {
	if m != nil {
		return m.Userdef
	}
	return nil
}

func (m *MessageRecallReminder) GetGroupType() int32 {
	if m != nil {
		return m.GroupType
	}
	return 0
}

func (m *MessageRecallReminder) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

type RecalledMessageMeta struct {
	Seq       int32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Time      int32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	MsgRandom int32 `protobuf:"varint,3,opt,name=msgRandom,proto3" json:"msgRandom,omitempty"`
	MsgType   int32 `protobuf:"varint,4,opt,name=msgType,proto3" json:"msgType,omitempty"`
	MsgFlag   int32 `protobuf:"varint,5,opt,name=msgFlag,proto3" json:"msgFlag,omitempty"`
	AuthorUin int64 `protobuf:"varint,6,opt,name=authorUin,proto3" json:"authorUin,omitempty"`
}

func (m *RecalledMessageMeta) Reset()         { *m = RecalledMessageMeta{} }
func (m *RecalledMessageMeta) String() string { return proto.CompactTextString(m) }
func (*RecalledMessageMeta) ProtoMessage()    {}
func (*RecalledMessageMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_c985ba69a0a8234f, []int{5}
}
func (m *RecalledMessageMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecalledMessageMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecalledMessageMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecalledMessageMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecalledMessageMeta.Merge(m, src)
}
func (m *RecalledMessageMeta) XXX_Size() int {
	return m.Size()
}
func (m *RecalledMessageMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_RecalledMessageMeta.DiscardUnknown(m)
}

var xxx_messageInfo_RecalledMessageMeta proto.InternalMessageInfo

func (m *RecalledMessageMeta) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RecalledMessageMeta) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RecalledMessageMeta) GetMsgRandom() int32 {
	if m != nil {
		return m.MsgRandom
	}
	return 0
}

func (m *RecalledMessageMeta) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *RecalledMessageMeta) GetMsgFlag() int32 {
	if m != nil {
		return m.MsgFlag
	}
	return 0
}

func (m *RecalledMessageMeta) GetAuthorUin() int64 {
	if m != nil {
		return m.AuthorUin
	}
	return 0
}

type RedGrayTipsInfo struct {
	ShowLatest          uint32 `protobuf:"varint,1,opt,name=showLatest,proto3" json:"showLatest,omitempty"`
	SenderUin           uint64 `protobuf:"varint,2,opt,name=senderUin,proto3" json:"senderUin,omitempty"`
	ReceiverUin         uint64 `protobuf:"varint,3,opt,name=receiverUin,proto3" json:"receiverUin,omitempty"`
	SenderRichContent   string `protobuf:"bytes,4,opt,name=senderRichContent,proto3" json:"senderRichContent,omitempty"`
	ReceiverRichContent string `protobuf:"bytes,5,opt,name=receiverRichContent,proto3" json:"receiverRichContent,omitempty"`
	AuthKey             []byte `protobuf:"bytes,6,opt,name=authKey,proto3" json:"authKey,omitempty"`
	MsgType             int32  `protobuf:"zigzag32,7,opt,name=msgType,proto3" json:"msgType,omitempty"`
	LuckyFlag           uint32 `protobuf:"varint,8,opt,name=luckyFlag,proto3" json:"luckyFlag,omitempty"`
	HideFlag            uint32 `protobuf:"varint,9,opt,name=hideFlag,proto3" json:"hideFlag,omitempty"`
}

func (m *RedGrayTipsInfo) Reset()         { *m = RedGrayTipsInfo{} }
func (m *RedGrayTipsInfo) String() string { return proto.CompactTextString(m) }
func (*RedGrayTipsInfo) ProtoMessage()    {}
func (*RedGrayTipsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c985ba69a0a8234f, []int{6}
}
func (m *RedGrayTipsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedGrayTipsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedGrayTipsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedGrayTipsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedGrayTipsInfo.Merge(m, src)
}
func (m *RedGrayTipsInfo) XXX_Size() int {
	return m.Size()
}
func (m *RedGrayTipsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RedGrayTipsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RedGrayTipsInfo proto.InternalMessageInfo

func (m *RedGrayTipsInfo) GetShowLatest() uint32 {
	if m != nil {
		return m.ShowLatest
	}
	return 0
}

func (m *RedGrayTipsInfo) GetSenderUin() uint64 {
	if m != nil {
		return m.SenderUin
	}
	return 0
}

func (m *RedGrayTipsInfo) GetReceiverUin() uint64 {
	if m != nil {
		return m.ReceiverUin
	}
	return 0
}

func (m *RedGrayTipsInfo) GetSenderRichContent() string {
	if m != nil {
		return m.SenderRichContent
	}
	return ""
}

func (m *RedGrayTipsInfo) GetReceiverRichContent() string {
	if m != nil {
		return m.ReceiverRichContent
	}
	return ""
}

func (m *RedGrayTipsInfo) GetAuthKey() []byte {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

func (m *RedGrayTipsInfo) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *RedGrayTipsInfo) GetLuckyFlag() uint32 {
	if m != nil {
		return m.LuckyFlag
	}
	return 0
}

func (m *RedGrayTipsInfo) GetHideFlag() uint32 {
	if m != nil {
		return m.HideFlag
	}
	return 0
}

func init() {
	proto.RegisterType((*NotifyMsgBody)(nil), "NotifyMsgBody")
	proto.RegisterType((*AIOGrayTipsInfo)(nil), "AIOGrayTipsInfo")
	proto.RegisterType((*GeneralGrayTipInfo)(nil), "GeneralGrayTipInfo")
	proto.RegisterType((*TemplParam)(nil), "TemplParam")
	proto.RegisterType((*MessageRecallReminder)(nil), "MessageRecallReminder")
	proto.RegisterType((*RecalledMessageMeta)(nil), "RecalledMessageMeta")
	proto.RegisterType((*RedGrayTipsInfo)(nil), "RedGrayTipsInfo")
}

func init() { proto.RegisterFile("client/pb/notify/group0x857.proto", fileDescriptor_c985ba69a0a8234f) }

var fileDescriptor_c985ba69a0a8234f = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x25, 0x51, 0x16, 0x47, 0x92, 0x7f, 0xd6, 0xae, 0x41, 0x18, 0x82, 0xa0, 0xf2, 0x50,
	0xe8, 0x50, 0xc8, 0xae, 0x8b, 0xba, 0x46, 0x0b, 0x14, 0xb0, 0x0b, 0xd4, 0x10, 0x6a, 0xc5, 0xc1,
	0xc2, 0xb9, 0xe4, 0x46, 0x91, 0x2b, 0x6a, 0x61, 0xfe, 0x85, 0xbb, 0x72, 0xa2, 0x27, 0xc8, 0x35,
	0xcf, 0x90, 0x6b, 0x1e, 0x22, 0x87, 0x5c, 0x72, 0xf4, 0x31, 0xc7, 0xc0, 0x7e, 0x90, 0x04, 0x3b,
	0x24, 0x25, 0x8a, 0x32, 0x90, 0xdb, 0x7e, 0xdf, 0xcc, 0xec, 0xee, 0xf7, 0xcd, 0x2c, 0x09, 0x3f,
	0x3b, 0x3e, 0x67, 0xa1, 0x3c, 0x8a, 0xc7, 0x47, 0x61, 0x24, 0xf9, 0x64, 0x7e, 0xe4, 0x25, 0xd1,
	0x2c, 0x3e, 0x7e, 0x73, 0xf6, 0xc7, 0x9f, 0x83, 0x38, 0x89, 0x64, 0x64, 0xbd, 0xaf, 0x40, 0xfb,
	0x19, 0xc6, 0x46, 0xc2, 0xbb, 0x88, 0xdc, 0x39, 0x39, 0x83, 0xad, 0x28, 0x96, 0x23, 0xe1, 0x5d,
	0x26, 0xf6, 0xfc, 0x86, 0xc7, 0xc2, 0xd4, 0x7b, 0x5a, 0xbf, 0x79, 0xb2, 0x33, 0x38, 0x1f, 0x5e,
	0xe7, 0xdc, 0x30, 0x9c, 0x44, 0xb4, 0x94, 0x47, 0x4e, 0xa1, 0x9d, 0x32, 0x94, 0xb9, 0x58, 0x68,
	0x64, 0x85, 0x94, 0xb9, 0x2b, 0x85, 0xab, 0x69, 0xe4, 0x2f, 0x68, 0xe5, 0x84, 0x63, 0xfb, 0xbe,
	0xd9, 0xc4, 0xb2, 0x83, 0xc1, 0x88, 0x09, 0x61, 0x7b, 0x2c, 0x65, 0x29, 0x0b, 0x78, 0xe8, 0xb2,
	0x84, 0xae, 0xe4, 0x92, 0x73, 0xd8, 0x8d, 0x62, 0x79, 0xc9, 0x42, 0x96, 0xd8, 0x7e, 0x76, 0x88,
	0x79, 0x88, 0x1b, 0xec, 0x0d, 0x56, 0x69, 0x3c, 0x7a, 0x3d, 0x9b, 0xf4, 0xa0, 0x29, 0x58, 0x72,
	0xc7, 0x1d, 0x76, 0x33, 0x8f, 0x99, 0xd9, 0xee, 0x69, 0x7d, 0x9d, 0x16, 0x29, 0xeb, 0x93, 0x06,
	0xdb, 0x25, 0xf1, 0xa4, 0x0b, 0x20, 0xa6, 0xd1, 0xeb, 0x2b, 0x5b, 0x32, 0x21, 0x4d, 0xad, 0xa7,
	0xf5, 0xdb, 0xb4, 0xc0, 0x10, 0x13, 0x36, 0x9d, 0x28, 0x94, 0x2c, 0x94, 0x66, 0xa5, 0xa7, 0xf5,
	0x5b, 0x34, 0x87, 0xe4, 0x00, 0xea, 0x09, 0x8a, 0x31, 0xab, 0x58, 0x95, 0x21, 0xb2, 0x0f, 0xfa,
	0x38, 0xe1, 0x6c, 0x62, 0xd6, 0x30, 0x3f, 0x05, 0xea, 0x76, 0x09, 0x73, 0x18, 0xbf, 0x63, 0xc9,
	0x0b, 0x1e, 0x62, 0x2f, 0x6a, 0xb4, 0x48, 0x91, 0x5f, 0x60, 0x2b, 0x61, 0x3e, 0xb7, 0xa3, 0x73,
	0x37, 0xe0, 0xe1, 0x75, 0x2c, 0xcd, 0x3a, 0xee, 0x5b, 0x62, 0xad, 0xb7, 0x15, 0x20, 0xeb, 0x8e,
	0x90, 0x43, 0x68, 0x8c, 0x67, 0x82, 0xa3, 0x76, 0x0d, 0x77, 0x5f, 0x60, 0x75, 0x55, 0xb5, 0x1e,
	0xba, 0xa8, 0xa1, 0x46, 0x33, 0xa4, 0x6a, 0x1c, 0x99, 0xf8, 0xff, 0xf9, 0xb6, 0x97, 0x89, 0x58,
	0x60, 0x14, 0x7e, 0xe2, 0xe0, 0x76, 0x35, 0x0c, 0xe5, 0xb0, 0x6c, 0xb4, 0x8e, 0xd1, 0x22, 0xa5,
	0x6a, 0x25, 0x0b, 0x62, 0x7f, 0xe8, 0xa2, 0x86, 0x1a, 0xcd, 0x21, 0xf9, 0x0d, 0xda, 0x81, 0xf0,
	0x6e, 0x14, 0x7a, 0x6e, 0x27, 0x76, 0x60, 0x6e, 0xf6, 0xaa, 0xfd, 0xe6, 0x49, 0x73, 0xb0, 0xa4,
	0xe8, 0x6a, 0x46, 0xb1, 0x03, 0x8d, 0x9e, 0xd6, 0x37, 0x16, 0x1d, 0xb0, 0x4e, 0x01, 0x0a, 0x79,
	0x04, 0x6a, 0xa1, 0x1d, 0xa4, 0xe2, 0x0d, 0x8a, 0x6b, 0xd5, 0x8b, 0x3b, 0xdb, 0x9f, 0x31, 0xd4,
	0x6d, 0xd0, 0x14, 0x58, 0xdf, 0x34, 0xf8, 0xe9, 0xc9, 0xa1, 0x24, 0x3b, 0x50, 0x9d, 0xf1, 0x10,
	0xb7, 0xa8, 0x52, 0xb5, 0x54, 0x16, 0x85, 0xdc, 0xb9, 0xc5, 0x9d, 0xd3, 0x01, 0x58, 0x60, 0xf2,
	0x0f, 0x6c, 0x27, 0x58, 0xcf, 0xdc, 0x91, 0xf0, 0xae, 0xb8, 0x90, 0x66, 0x15, 0xe5, 0xec, 0x0f,
	0x68, 0xce, 0xa7, 0xc7, 0x8c, 0x98, 0xb4, 0x69, 0x39, 0x99, 0xf4, 0x55, 0x7d, 0x7a, 0xf2, 0xbf,
	0x99, 0xc2, 0x74, 0x66, 0xca, 0xb4, 0xf2, 0x60, 0x26, 0x58, 0xe2, 0xb2, 0x09, 0xda, 0xdd, 0xa2,
	0x39, 0x24, 0x1d, 0x30, 0xf0, 0x63, 0x80, 0xad, 0xa8, 0xe3, 0xcc, 0x2f, 0x09, 0xd5, 0xf8, 0x28,
	0x0d, 0x6d, 0x62, 0x28, 0x43, 0xd6, 0x07, 0x0d, 0xf6, 0x9e, 0xb8, 0xa2, 0xd2, 0x2f, 0xd8, 0x2b,
	0xd4, 0xaf, 0x53, 0xb5, 0x54, 0xae, 0x4a, 0x9e, 0x69, 0xd7, 0x29, 0xae, 0xd5, 0x99, 0x81, 0xf0,
	0xa8, 0x1d, 0xba, 0x51, 0x80, 0x73, 0xa3, 0xd3, 0x25, 0xa1, 0xee, 0xaa, 0x1a, 0x98, 0x0f, 0x8e,
	0x4e, 0x73, 0x98, 0x45, 0x70, 0xda, 0xf4, 0x45, 0x04, 0x87, 0xad, 0x03, 0x86, 0x3d, 0x93, 0xd3,
	0x08, 0xdf, 0x46, 0x1d, 0xdd, 0x5f, 0x12, 0xd6, 0xc7, 0x0a, 0x6c, 0x97, 0xbe, 0x3d, 0x3f, 0x7c,
	0xb7, 0x1d, 0x30, 0x04, 0x53, 0x16, 0xaa, 0x1d, 0xd3, 0xa9, 0x5f, 0x12, 0xe5, 0xd7, 0x58, 0x5d,
	0x7f, 0x8d, 0xbf, 0xc2, 0x6e, 0x9a, 0x4e, 0xb9, 0x33, 0x2d, 0x76, 0xc7, 0xa0, 0xeb, 0x01, 0x72,
	0x0c, 0x7b, 0x79, 0x71, 0x31, 0x5f, 0xc7, 0xfc, 0xa7, 0x42, 0xca, 0x0b, 0x25, 0xf0, 0x7f, 0x36,
	0x47, 0xbd, 0x2d, 0x9a, 0xc3, 0xa2, 0x7f, 0xaa, 0x69, 0xbb, 0x4b, 0xff, 0x3a, 0x60, 0xf8, 0x33,
	0xe7, 0x76, 0x8e, 0x0e, 0x36, 0x50, 0xf2, 0x92, 0x50, 0x93, 0x3a, 0xe5, 0x2e, 0xc3, 0xa0, 0x91,
	0x3e, 0xe6, 0x1c, 0x5f, 0x58, 0x9f, 0x1f, 0xba, 0xda, 0xfd, 0x43, 0x57, 0xfb, 0xfa, 0xd0, 0xd5,
	0xde, 0x3d, 0x76, 0x37, 0xee, 0x1f, 0xbb, 0x1b, 0x5f, 0x1e, 0xbb, 0x1b, 0x2f, 0x1b, 0x83, 0xbf,
	0xd3, 0x7f, 0xca, 0xb8, 0x8e, 0x7f, 0x92, 0xdf, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0xde, 0xf2,
	0x53, 0x5d, 0x6e, 0x06, 0x00, 0x00,
}

func (m *NotifyMsgBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyMsgBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyMsgBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptGeneralGrayTip != nil {
		{
			size, err := m.OptGeneralGrayTip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup0X857(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.ServiceType != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.ServiceType))
		i--
		dAtA[i] = 0x68
	}
	if m.OptMsgRecall != nil {
		{
			size, err := m.OptMsgRecall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup0X857(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.OptMsgRedTips != nil {
		{
			size, err := m.OptMsgRedTips.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup0X857(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.OptMsgGrayTips != nil {
		{
			size, err := m.OptMsgGrayTips.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup0X857(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}

func (m *AIOGrayTipsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AIOGrayTipsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AIOGrayTipsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReliaoAdminOpt != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.ReliaoAdminOpt))
		i--
		dAtA[i] = 0x30
	}
	if m.ReceiverUin != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.ReceiverUin))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Brief) > 0 {
		i -= len(m.Brief)
		copy(dAtA[i:], m.Brief)
		i = encodeVarintGroup0X857(dAtA, i, uint64(len(m.Brief)))
		i--
		dAtA[i] = 0x22
	}
	if m.Remind != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.Remind))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintGroup0X857(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.ShowLatest != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.ShowLatest))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GeneralGrayTipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeneralGrayTipInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeneralGrayTipInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintGroup0X857(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MsgTemplParam) > 0 {
		for iNdEx := len(m.MsgTemplParam) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgTemplParam[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup0X857(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.TemplId != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.TemplId))
		i--
		dAtA[i] = 0x30
	}
	if m.ServiceType != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.ServiceType))
		i--
		dAtA[i] = 0x28
	}
	if m.C2CType != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.C2CType))
		i--
		dAtA[i] = 0x20
	}
	if m.CtrlFlag != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.CtrlFlag))
		i--
		dAtA[i] = 0x18
	}
	if m.BusiId != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.BusiId))
		i--
		dAtA[i] = 0x10
	}
	if m.BusiType != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.BusiType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TemplParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TemplParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TemplParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintGroup0X857(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGroup0X857(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageRecallReminder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageRecallReminder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageRecallReminder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OpType != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.OpType))
		i--
		dAtA[i] = 0x38
	}
	if m.GroupType != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.GroupType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Userdef) > 0 {
		i -= len(m.Userdef)
		copy(dAtA[i:], m.Userdef)
		i = encodeVarintGroup0X857(dAtA, i, uint64(len(m.Userdef)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReminderContent) > 0 {
		i -= len(m.ReminderContent)
		copy(dAtA[i:], m.ReminderContent)
		i = encodeVarintGroup0X857(dAtA, i, uint64(len(m.ReminderContent)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecalledMsgList) > 0 {
		for iNdEx := len(m.RecalledMsgList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecalledMsgList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup0X857(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintGroup0X857(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uin != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.Uin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecalledMessageMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecalledMessageMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecalledMessageMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthorUin != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.AuthorUin))
		i--
		dAtA[i] = 0x30
	}
	if m.MsgFlag != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.MsgFlag))
		i--
		dAtA[i] = 0x28
	}
	if m.MsgType != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x20
	}
	if m.MsgRandom != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.MsgRandom))
		i--
		dAtA[i] = 0x18
	}
	if m.Time != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Seq != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RedGrayTipsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedGrayTipsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedGrayTipsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HideFlag != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.HideFlag))
		i--
		dAtA[i] = 0x48
	}
	if m.LuckyFlag != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.LuckyFlag))
		i--
		dAtA[i] = 0x40
	}
	if m.MsgType != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64((uint32(m.MsgType)<<1)^uint32((m.MsgType>>31))))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AuthKey) > 0 {
		i -= len(m.AuthKey)
		copy(dAtA[i:], m.AuthKey)
		i = encodeVarintGroup0X857(dAtA, i, uint64(len(m.AuthKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ReceiverRichContent) > 0 {
		i -= len(m.ReceiverRichContent)
		copy(dAtA[i:], m.ReceiverRichContent)
		i = encodeVarintGroup0X857(dAtA, i, uint64(len(m.ReceiverRichContent)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SenderRichContent) > 0 {
		i -= len(m.SenderRichContent)
		copy(dAtA[i:], m.SenderRichContent)
		i = encodeVarintGroup0X857(dAtA, i, uint64(len(m.SenderRichContent)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReceiverUin != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.ReceiverUin))
		i--
		dAtA[i] = 0x18
	}
	if m.SenderUin != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.SenderUin))
		i--
		dAtA[i] = 0x10
	}
	if m.ShowLatest != 0 {
		i = encodeVarintGroup0X857(dAtA, i, uint64(m.ShowLatest))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroup0X857(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroup0X857(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NotifyMsgBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OptMsgGrayTips != nil {
		l = m.OptMsgGrayTips.Size()
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	if m.OptMsgRedTips != nil {
		l = m.OptMsgRedTips.Size()
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	if m.OptMsgRecall != nil {
		l = m.OptMsgRecall.Size()
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	if m.ServiceType != 0 {
		n += 1 + sovGroup0X857(uint64(m.ServiceType))
	}
	if m.OptGeneralGrayTip != nil {
		l = m.OptGeneralGrayTip.Size()
		n += 2 + l + sovGroup0X857(uint64(l))
	}
	return n
}

func (m *AIOGrayTipsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShowLatest != 0 {
		n += 1 + sovGroup0X857(uint64(m.ShowLatest))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	if m.Remind != 0 {
		n += 1 + sovGroup0X857(uint64(m.Remind))
	}
	l = len(m.Brief)
	if l > 0 {
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	if m.ReceiverUin != 0 {
		n += 1 + sovGroup0X857(uint64(m.ReceiverUin))
	}
	if m.ReliaoAdminOpt != 0 {
		n += 1 + sovGroup0X857(uint64(m.ReliaoAdminOpt))
	}
	return n
}

func (m *GeneralGrayTipInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BusiType != 0 {
		n += 1 + sovGroup0X857(uint64(m.BusiType))
	}
	if m.BusiId != 0 {
		n += 1 + sovGroup0X857(uint64(m.BusiId))
	}
	if m.CtrlFlag != 0 {
		n += 1 + sovGroup0X857(uint64(m.CtrlFlag))
	}
	if m.C2CType != 0 {
		n += 1 + sovGroup0X857(uint64(m.C2CType))
	}
	if m.ServiceType != 0 {
		n += 1 + sovGroup0X857(uint64(m.ServiceType))
	}
	if m.TemplId != 0 {
		n += 1 + sovGroup0X857(uint64(m.TemplId))
	}
	if len(m.MsgTemplParam) > 0 {
		for _, e := range m.MsgTemplParam {
			l = e.Size()
			n += 1 + l + sovGroup0X857(uint64(l))
		}
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	return n
}

func (m *TemplParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	return n
}

func (m *MessageRecallReminder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uin != 0 {
		n += 1 + sovGroup0X857(uint64(m.Uin))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	if len(m.RecalledMsgList) > 0 {
		for _, e := range m.RecalledMsgList {
			l = e.Size()
			n += 1 + l + sovGroup0X857(uint64(l))
		}
	}
	l = len(m.ReminderContent)
	if l > 0 {
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	l = len(m.Userdef)
	if l > 0 {
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	if m.GroupType != 0 {
		n += 1 + sovGroup0X857(uint64(m.GroupType))
	}
	if m.OpType != 0 {
		n += 1 + sovGroup0X857(uint64(m.OpType))
	}
	return n
}

func (m *RecalledMessageMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovGroup0X857(uint64(m.Seq))
	}
	if m.Time != 0 {
		n += 1 + sovGroup0X857(uint64(m.Time))
	}
	if m.MsgRandom != 0 {
		n += 1 + sovGroup0X857(uint64(m.MsgRandom))
	}
	if m.MsgType != 0 {
		n += 1 + sovGroup0X857(uint64(m.MsgType))
	}
	if m.MsgFlag != 0 {
		n += 1 + sovGroup0X857(uint64(m.MsgFlag))
	}
	if m.AuthorUin != 0 {
		n += 1 + sovGroup0X857(uint64(m.AuthorUin))
	}
	return n
}

func (m *RedGrayTipsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShowLatest != 0 {
		n += 1 + sovGroup0X857(uint64(m.ShowLatest))
	}
	if m.SenderUin != 0 {
		n += 1 + sovGroup0X857(uint64(m.SenderUin))
	}
	if m.ReceiverUin != 0 {
		n += 1 + sovGroup0X857(uint64(m.ReceiverUin))
	}
	l = len(m.SenderRichContent)
	if l > 0 {
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	l = len(m.ReceiverRichContent)
	if l > 0 {
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	l = len(m.AuthKey)
	if l > 0 {
		n += 1 + l + sovGroup0X857(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sozGroup0X857(uint64(m.MsgType))
	}
	if m.LuckyFlag != 0 {
		n += 1 + sovGroup0X857(uint64(m.LuckyFlag))
	}
	if m.HideFlag != 0 {
		n += 1 + sovGroup0X857(uint64(m.HideFlag))
	}
	return n
}

func sovGroup0X857(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroup0X857(x uint64) (n int) {
	return sovGroup0X857(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NotifyMsgBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup0X857
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyMsgBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyMsgBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptMsgGrayTips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OptMsgGrayTips == nil {
				m.OptMsgGrayTips = &AIOGrayTipsInfo{}
			}
			if err := m.OptMsgGrayTips.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptMsgRedTips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OptMsgRedTips == nil {
				m.OptMsgRedTips = &RedGrayTipsInfo{}
			}
			if err := m.OptMsgRedTips.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptMsgRecall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OptMsgRecall == nil {
				m.OptMsgRecall = &MessageRecallReminder{}
			}
			if err := m.OptMsgRecall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			m.ServiceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptGeneralGrayTip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OptGeneralGrayTip == nil {
				m.OptGeneralGrayTip = &GeneralGrayTipInfo{}
			}
			if err := m.OptGeneralGrayTip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup0X857(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AIOGrayTipsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup0X857
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AIOGrayTipsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AIOGrayTipsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowLatest", wireType)
			}
			m.ShowLatest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowLatest |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remind", wireType)
			}
			m.Remind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Remind |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brief", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brief = append(m.Brief[:0], dAtA[iNdEx:postIndex]...)
			if m.Brief == nil {
				m.Brief = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverUin", wireType)
			}
			m.ReceiverUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverUin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReliaoAdminOpt", wireType)
			}
			m.ReliaoAdminOpt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReliaoAdminOpt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup0X857(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeneralGrayTipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup0X857
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeneralGrayTipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeneralGrayTipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusiType", wireType)
			}
			m.BusiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusiType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusiId", wireType)
			}
			m.BusiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusiId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtrlFlag", wireType)
			}
			m.CtrlFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CtrlFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C2CType", wireType)
			}
			m.C2CType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C2CType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			m.ServiceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplId", wireType)
			}
			m.TemplId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TemplId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTemplParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTemplParam = append(m.MsgTemplParam, &TemplParam{})
			if err := m.MsgTemplParam[len(m.MsgTemplParam)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup0X857(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TemplParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup0X857
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemplParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemplParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup0X857(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageRecallReminder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup0X857
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageRecallReminder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageRecallReminder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			m.Uin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = append(m.Nickname[:0], dAtA[iNdEx:postIndex]...)
			if m.Nickname == nil {
				m.Nickname = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecalledMsgList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecalledMsgList = append(m.RecalledMsgList, &RecalledMessageMeta{})
			if err := m.RecalledMsgList[len(m.RecalledMsgList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReminderContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReminderContent = append(m.ReminderContent[:0], dAtA[iNdEx:postIndex]...)
			if m.ReminderContent == nil {
				m.ReminderContent = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userdef", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userdef = append(m.Userdef[:0], dAtA[iNdEx:postIndex]...)
			if m.Userdef == nil {
				m.Userdef = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupType", wireType)
			}
			m.GroupType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup0X857(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecalledMessageMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup0X857
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecalledMessageMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecalledMessageMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgRandom", wireType)
			}
			m.MsgRandom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgRandom |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgFlag", wireType)
			}
			m.MsgFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgFlag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorUin", wireType)
			}
			m.AuthorUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorUin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup0X857(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedGrayTipsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup0X857
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedGrayTipsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedGrayTipsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowLatest", wireType)
			}
			m.ShowLatest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowLatest |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderUin", wireType)
			}
			m.SenderUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderUin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverUin", wireType)
			}
			m.ReceiverUin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverUin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderRichContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderRichContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverRichContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverRichContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroup0X857
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthKey = append(m.AuthKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthKey == nil {
				m.AuthKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.MsgType = v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyFlag", wireType)
			}
			m.LuckyFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LuckyFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideFlag", wireType)
			}
			m.HideFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HideFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup0X857(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroup0X857
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroup0X857(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroup0X857
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup0X857
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroup0X857
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGroup0X857
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGroup0X857
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGroup0X857        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroup0X857          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGroup0X857 = fmt.Errorf("proto: unexpected end of group")
)
